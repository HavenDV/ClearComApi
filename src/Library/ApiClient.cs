//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace ClearComApi
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiClient
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public ApiClient(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Devices Capabilities</summary>
        /// <returns>An array of capabilities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous4>> GetDevicesCapabilitiesAsync()
        {
            return GetDevicesCapabilitiesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Devices Capabilities</summary>
        /// <returns>An array of capabilities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous4>> GetDevicesCapabilitiesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/capabilities/devices");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous4>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Anonymous4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Device Capability</summary>
        /// <param name="deviceType">Retrieve capability for this {deviceType}.</param>
        /// <returns>The device {deviceType}'s capability.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response> GetDeviceCapabilitiesByTypeAsync(DeviceType deviceType)
        {
            return GetDeviceCapabilitiesByTypeAsync(deviceType, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Device Capability</summary>
        /// <param name="deviceType">Retrieve capability for this {deviceType}.</param>
        /// <returns>The device {deviceType}'s capability.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response> GetDeviceCapabilitiesByTypeAsync(DeviceType deviceType, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceType == null)
                throw new System.ArgumentNullException("deviceType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/capabilities/devices/{deviceType}");
            urlBuilder_.Replace("{deviceType}", System.Uri.EscapeDataString(ConvertToString(deviceType, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response2>("The capabilities for {deviceType} weren\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Connections Capabilities</summary>
        /// <returns>An array of capabilities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous5>> GetConnectionsCapabilitiesAsync()
        {
            return GetConnectionsCapabilitiesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Connections Capabilities</summary>
        /// <returns>An array of capabilities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous5>> GetConnectionsCapabilitiesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/capabilities/connections");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous5>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Anonymous5>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Connection Capability</summary>
        /// <param name="connectionType">Retrieve capability for this {connectionType}.</param>
        /// <returns>The connection {connectionType}'s capability.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response3> GetConnectionCapabilitiesByTypeAsync(ConnectionType connectionType)
        {
            return GetConnectionCapabilitiesByTypeAsync(connectionType, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Connection Capability</summary>
        /// <param name="connectionType">Retrieve capability for this {connectionType}.</param>
        /// <returns>The connection {connectionType}'s capability.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response3> GetConnectionCapabilitiesByTypeAsync(ConnectionType connectionType, System.Threading.CancellationToken cancellationToken)
        {
            if (connectionType == null)
                throw new System.ArgumentNullException("connectionType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/capabilities/connections/{connectionType}");
            urlBuilder_.Replace("{connectionType}", System.Uri.EscapeDataString(ConvertToString(connectionType, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response3>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response4>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response4>("The connections for {connectionType} weren\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response3);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Interfaces Capabilities</summary>
        /// <returns>An array of capabilities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous6>> GetInterfacesCapabilitiesAsync()
        {
            return GetInterfacesCapabilitiesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Interfaces Capabilities</summary>
        /// <returns>An array of capabilities</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous6>> GetInterfacesCapabilitiesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/capabilities/interfaces");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous6>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Anonymous6>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Interface Capability</summary>
        /// <param name="interfaceType">Retrieve capability for this {deviceType}.</param>
        /// <returns>The interface {interfaceType}'s capability.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response5> GetInterfaceCapabilitiesByTypeAsync(InterfaceType interfaceType)
        {
            return GetInterfaceCapabilitiesByTypeAsync(interfaceType, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Interface Capability</summary>
        /// <param name="interfaceType">Retrieve capability for this {deviceType}.</param>
        /// <returns>The interface {interfaceType}'s capability.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response5> GetInterfaceCapabilitiesByTypeAsync(InterfaceType interfaceType, System.Threading.CancellationToken cancellationToken)
        {
            if (interfaceType == null)
                throw new System.ArgumentNullException("interfaceType");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/capabilities/interfaces/{interfaceType}");
            urlBuilder_.Replace("{interfaceType}", System.Uri.EscapeDataString(ConvertToString(interfaceType, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response5>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response6>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response6>("The interface {interfaceType}\'s capabilities weren\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response5);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>LinkGroup Capabilities</summary>
        /// <returns>The linkgroup's capability</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response7> GetLinkGroupCapabilitiesAsync()
        {
            return GetLinkGroupCapabilitiesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>LinkGroup Capabilities</summary>
        /// <returns>The linkgroup's capability</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response7> GetLinkGroupCapabilitiesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/capabilities/linkgroup");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response7>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response7);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>API Version</summary>
        /// <returns>The API version</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Version> GetVersionAsync()
        {
            return GetVersionAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>API Version</summary>
        /// <returns>The API version</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Version> GetVersionAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/version");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Version>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Version);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Devices</summary>
        /// <returns>An array of devices</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous7>> GetDevicesAsync(string filter)
        {
            return GetDevicesAsync(filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Devices</summary>
        /// <returns>An array of devices</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous7>> GetDevicesAsync(string filter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices?");
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous7>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Anonymous7>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Device</summary>
        /// <param name="deviceId">Retrieve configuration for this {deviceId}. If {deviceId} is 0, retrieve the host device.</param>
        /// <returns>The device information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response8> GetDeviceByIdAsync(int deviceId, string filter)
        {
            return GetDeviceByIdAsync(deviceId, filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Device</summary>
        /// <param name="deviceId">Retrieve configuration for this {deviceId}. If {deviceId} is 0, retrieve the host device.</param>
        /// <returns>The device information</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response8> GetDeviceByIdAsync(int deviceId, string filter, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}?");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response8>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response9>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response9>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response8);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update Device</summary>
        /// <param name="deviceId">Update this {deviceId}. If {deviceId} is 0, update the host device.</param>
        /// <param name="device">The device properties to update.</param>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response10> UpdateDeviceAsync(int deviceId, Update device)
        {
            return UpdateDeviceAsync(deviceId, device, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Device</summary>
        /// <param name="deviceId">Update this {deviceId}. If {deviceId} is 0, update the host device.</param>
        /// <param name="device">The device properties to update.</param>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response10> UpdateDeviceAsync(int deviceId, Update device, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(device, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response10>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response11>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response11>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response10);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Delete Device</summary>
        /// <param name="deviceId">Remove the offline device represented by this {deviceId}.</param>
        /// <returns>The device was successfully removed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response12> DeleteDeviceAsync(int deviceId)
        {
            return DeleteDeviceAsync(deviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Device</summary>
        /// <param name="deviceId">Remove the offline device represented by this {deviceId}.</param>
        /// <returns>The device was successfully removed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response12> DeleteDeviceAsync(int deviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response12>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response13>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response13>("The device {deviceId} is in use (not offline).", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response14>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response14>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response12);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Device Capability</summary>
        /// <param name="deviceId">Retrieve capabilities for this {deviceId}. If {deviceId} is 0, retrieve the host device.</param>
        /// <returns>The device {deviceId}'s capabilities.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response15> GetDeviceCapabilityAsync(int deviceId)
        {
            return GetDeviceCapabilityAsync(deviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Device Capability</summary>
        /// <param name="deviceId">Retrieve capabilities for this {deviceId}. If {deviceId} is 0, retrieve the host device.</param>
        /// <returns>The device {deviceId}'s capabilities.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response15> GetDeviceCapabilityAsync(int deviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/capability");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response15>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response16>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response16>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response15);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Devices Live Status</summary>
        /// <param name="deviceId">Retrieve liveStatus for this {deviceId}. If {deviceId} is 0, retrieve the host device.</param>
        /// <returns>An array of this {deviceId} live status</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DevicesLiveStatus> GetDevicesLiveStatusAsync(int deviceId)
        {
            return GetDevicesLiveStatusAsync(deviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Devices Live Status</summary>
        /// <param name="deviceId">Retrieve liveStatus for this {deviceId}. If {deviceId} is 0, retrieve the host device.</param>
        /// <returns>An array of this {deviceId} live status</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<DevicesLiveStatus> GetDevicesLiveStatusAsync(int deviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/liveStatus");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DevicesLiveStatus>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response17>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response17>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "502")
                        {
                            string responseText_ = (response_.Content == null) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The remote server closed the connection.", (int)response_.StatusCode, responseText_, headers_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(DevicesLiveStatus);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Upload Firmware</summary>
        /// <param name="deviceId">Upgrade this {deviceId}. If {deviceId} is 0, upgrade the host device. Limitation: Only the host device can be upgraded for now.</param>
        /// <param name="file">The firmware file to use for the upgrade.</param>
        /// <returns>When the file is uploaded successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response18> DeviceUploadFirmwareAsync(int deviceId, FileParameter file)
        {
            return DeviceUploadFirmwareAsync(deviceId, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upload Firmware</summary>
        /// <param name="deviceId">Upgrade this {deviceId}. If {deviceId} is 0, upgrade the host device. Limitation: Only the host device can be upgraded for now.</param>
        /// <param name="file">The firmware file to use for the upgrade.</param>
        /// <returns>When the file is uploaded successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response18> DeviceUploadFirmwareAsync(int deviceId, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/upload");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response18>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response19>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response19>("The provided file doesn\'t match the expected format.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response20>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response20>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "413")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response21>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response21>("The file is larger than the expected max firmware size for the device {deviceId}.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "503")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response22>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response22>("Another operation is preventing this file upload.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response18);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Upgrade Status</summary>
        /// <param name="deviceId">Get the upgrade status for this {deviceId}. If {deviceId} is 0, get the upgrade status from the host device. Limitation: You may upgrade only the host device but the status can be retrieved from any device.</param>
        /// <returns>When the upgrade status can be retrieved successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response23> GetDeviceUpgradeStatusAsync(int deviceId)
        {
            return GetDeviceUpgradeStatusAsync(deviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upgrade Status</summary>
        /// <param name="deviceId">Get the upgrade status for this {deviceId}. If {deviceId} is 0, get the upgrade status from the host device. Limitation: You may upgrade only the host device but the status can be retrieved from any device.</param>
        /// <returns>When the upgrade status can be retrieved successfully.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response23> GetDeviceUpgradeStatusAsync(int deviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/upgrade");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response23>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response24>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response24>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response23);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Upgrade Device</summary>
        /// <param name="deviceId">Upgrade this {deviceId}. If {deviceId} is 0, upgrade the host device. Limitation: Only the host device can be upgraded for now.</param>
        /// <returns>When the request is successful and the upgrade is initiated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response25> DeviceUpgradeAsync(int deviceId)
        {
            return DeviceUpgradeAsync(deviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upgrade Device</summary>
        /// <param name="deviceId">Upgrade this {deviceId}. If {deviceId} is 0, upgrade the host device. Limitation: Only the host device can be upgraded for now.</param>
        /// <returns>When the request is successful and the upgrade is initiated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response25> DeviceUpgradeAsync(int deviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/upgrade");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response25>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response26>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response26>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response25);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update License</summary>
        /// <param name="deviceId">Update this {deviceId}. If {deviceId} is 0, update the host device.</param>
        /// <param name="license">The license passcode to update.</param>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response27> DeviceUpdateLicenseAsync(int deviceId, License license)
        {
            return DeviceUpdateLicenseAsync(deviceId, license, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update License</summary>
        /// <param name="deviceId">Update this {deviceId}. If {deviceId} is 0, update the host device.</param>
        /// <param name="license">The license passcode to update.</param>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response27> DeviceUpdateLicenseAsync(int deviceId, License license, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/license");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(license, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response27>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response28>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response28>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response27);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Retrieve Device License Context File</summary>
        /// <param name="deviceId">Retrieve the context on this {deviceId}. If {deviceId} is 0, retrieve the context on the host device.</param>
        /// <returns>The WibuCmRaC (context) file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> DeviceGetLicenseContextAsync(int deviceId)
        {
            return DeviceGetLicenseContextAsync(deviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve Device License Context File</summary>
        /// <param name="deviceId">Retrieve the context on this {deviceId}. If {deviceId} is 0, retrieve the context on the host device.</param>
        /// <returns>The WibuCmRaC (context) file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> DeviceGetLicenseContextAsync(int deviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/license/context");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "206")
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_);
                            client_ = null; response_ = null; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(FileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Upload License Activation File</summary>
        /// <param name="deviceId">Upload activation to this {deviceId}. If {deviceId} is 0, upload to the host device.</param>
        /// <param name="file">A WibuCmRaU file to update the license activation.</param>
        /// <returns>When the file is uploaded successfully and the license is activated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response29> UploadLicenseFileAsync(int deviceId, FileParameter file)
        {
            return UploadLicenseFileAsync(deviceId, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Upload License Activation File</summary>
        /// <param name="deviceId">Upload activation to this {deviceId}. If {deviceId} is 0, upload to the host device.</param>
        /// <param name="file">A WibuCmRaU file to update the license activation.</param>
        /// <returns>When the file is uploaded successfully and the license is activated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response29> UploadLicenseFileAsync(int deviceId, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/license/upload");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response29>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response30>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response30>("The provided file doesn\'t match the expected format.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response31>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response31>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response32>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response32>("The license was already applied.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response33>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response33>("The server failed to apply the license.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response29);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get the license ticket info</summary>
        /// <param name="deviceId">Apply the license to device {deviceId}. If {deviceId} is 0, use the host device.</param>
        /// <param name="ticketId">Apply the license to device {deviceId}. If {deviceId} is 0, use the host device.</param>
        /// <returns>The device will be added to the link-group.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response34> GetLicenseTicketInfoAsync(int deviceId, string ticketId)
        {
            return GetLicenseTicketInfoAsync(deviceId, ticketId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the license ticket info</summary>
        /// <param name="deviceId">Apply the license to device {deviceId}. If {deviceId} is 0, use the host device.</param>
        /// <param name="ticketId">Apply the license to device {deviceId}. If {deviceId} is 0, use the host device.</param>
        /// <returns>The device will be added to the link-group.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response34> GetLicenseTicketInfoAsync(int deviceId, string ticketId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (ticketId == null)
                throw new System.ArgumentNullException("ticketId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/license/ticket/{ticketId}");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ticketId}", System.Uri.EscapeDataString(ConvertToString(ticketId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response34>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response35>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response35>("Missing or invalid mode.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response36>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response36>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response37>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response37>("Failed to communicate with the license gateway or failed to apply the license.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response34);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update license activation with a ticket</summary>
        /// <param name="deviceId">Apply the license to device {deviceId}. If {deviceId} is 0, use the host device.</param>
        /// <param name="ticketId">The ticket from which to extract the activations.</param>
        /// <param name="features">The features to activate.</param>
        /// <returns>The device will be added to the link-group.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response38> UpdateActivationsWithTicketAsync(int deviceId, string ticketId, Features features)
        {
            return UpdateActivationsWithTicketAsync(deviceId, ticketId, features, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update license activation with a ticket</summary>
        /// <param name="deviceId">Apply the license to device {deviceId}. If {deviceId} is 0, use the host device.</param>
        /// <param name="ticketId">The ticket from which to extract the activations.</param>
        /// <param name="features">The features to activate.</param>
        /// <returns>The device will be added to the link-group.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response38> UpdateActivationsWithTicketAsync(int deviceId, string ticketId, Features features, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (ticketId == null)
                throw new System.ArgumentNullException("ticketId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/license/ticket/{ticketId}");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{ticketId}", System.Uri.EscapeDataString(ConvertToString(ticketId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(features, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response38>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response39>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response39>("Missing or invalid mode.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response40>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response40>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response41>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response41>("Failed to communicate with the license gateway.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response38);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update linking config</summary>
        /// <param name="deviceId">Use device {deviceId} for adding a new device. If {deviceId} is 0, use the host device.</param>
        /// <param name="config">The device linking configuration.</param>
        /// <returns>The device will be added to the link-group.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response42> UpdateLinkConfigAsync(int deviceId, Config config)
        {
            return UpdateLinkConfigAsync(deviceId, config, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update linking config</summary>
        /// <param name="deviceId">Use device {deviceId} for adding a new device. If {deviceId} is 0, use the host device.</param>
        /// <param name="config">The device linking configuration.</param>
        /// <returns>The device will be added to the link-group.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response42> UpdateLinkConfigAsync(int deviceId, Config config, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/updatelinkingconfig");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(config, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response42>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response43>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response43>("Missing or invalid mode.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response44>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response44>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response42);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Enable OTA</summary>
        /// <param name="deviceId">Start OTA for this {deviceId}. If {deviceId} is 0, start OTA on the host device.</param>
        /// <param name="ota">OTA state to enable.</param>
        /// <returns>OTA is enabled for 2 minutes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response45> DeviceEnableOtaAsync(int deviceId, Ota ota)
        {
            return DeviceEnableOtaAsync(deviceId, ota, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Enable OTA</summary>
        /// <param name="deviceId">Start OTA for this {deviceId}. If {deviceId} is 0, start OTA on the host device.</param>
        /// <param name="ota">OTA state to enable.</param>
        /// <returns>OTA is enabled for 2 minutes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response45> DeviceEnableOtaAsync(int deviceId, Ota ota, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/otastate");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(ota, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response45>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response46>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response46>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response45);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Reboot Device</summary>
        /// <param name="deviceId">Reboot this {deviceId}. If {deviceId} is 0, reboot the host device.</param>
        /// <param name="reboot">The reboot configuration.</param>
        /// <returns>The device will reboot.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response47> DeviceRebootAsync(int deviceId, Reboot reboot)
        {
            return DeviceRebootAsync(deviceId, reboot, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Reboot Device</summary>
        /// <param name="deviceId">Reboot this {deviceId}. If {deviceId} is 0, reboot the host device.</param>
        /// <param name="reboot">The reboot configuration.</param>
        /// <returns>The device will reboot.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response47> DeviceRebootAsync(int deviceId, Reboot reboot, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/reboot");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(reboot, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response47>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response48>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response48>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response47);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Reset to default Device</summary>
        /// <param name="deviceId">Reset to default this {deviceId}. If {deviceId} is 0, reset to default the host device.</param>
        /// <param name="resettodefault">Control what will be reset.</param>
        /// <returns>The device will reset to default.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response49> DeviceResetToDefaultAsync(int deviceId, Resettodefault resettodefault)
        {
            return DeviceResetToDefaultAsync(deviceId, resettodefault, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Reset to default Device</summary>
        /// <param name="deviceId">Reset to default this {deviceId}. If {deviceId} is 0, reset to default the host device.</param>
        /// <param name="resettodefault">Control what will be reset.</param>
        /// <returns>The device will reset to default.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response49> DeviceResetToDefaultAsync(int deviceId, Resettodefault resettodefault, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/resettodefault");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(resettodefault, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response49>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response50>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response50>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response49);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Device Network Mode</summary>
        /// <param name="deviceId">Change the linking network mode for this {deviceId}. If {deviceId} is 0, reset to default the host device.</param>
        /// <param name="setnetmode">Select the linking network mode.</param>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response51> DeviceSetNetModeAsync(int deviceId, Setnetmode setnetmode)
        {
            return DeviceSetNetModeAsync(deviceId, setnetmode, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Device Network Mode</summary>
        /// <param name="deviceId">Change the linking network mode for this {deviceId}. If {deviceId} is 0, reset to default the host device.</param>
        /// <param name="setnetmode">Select the linking network mode.</param>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response51> DeviceSetNetModeAsync(int deviceId, Setnetmode setnetmode, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/setnetmode");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(setnetmode, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response51>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response52>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response52>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response51);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Device Network Settings</summary>
        /// <param name="deviceId">Change the network interface and external network settings for this {deviceId}. If {deviceId} is 0, reset to default the host device.</param>
        /// <param name="setupnetwork">The network settings to configure.</param>
        /// <returns>The network settings were successfully applied.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response53> DeviceSetupNetworkAsync(int deviceId, Setupnetwork setupnetwork)
        {
            return DeviceSetupNetworkAsync(deviceId, setupnetwork, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Device Network Settings</summary>
        /// <param name="deviceId">Change the network interface and external network settings for this {deviceId}. If {deviceId} is 0, reset to default the host device.</param>
        /// <param name="setupnetwork">The network settings to configure.</param>
        /// <returns>The network settings were successfully applied.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response53> DeviceSetupNetworkAsync(int deviceId, Setupnetwork setupnetwork, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/setupnetwork");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(setupnetwork, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response53>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response54>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response54>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response53);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Initiate Device Snapshot</summary>
        /// <param name="deviceId">Update this {deviceId}. If {deviceId} is 0, update the host device.</param>
        /// <returns>When the snapshot is initiated. Call /devices/{deviceId}/snapshotinfo to query the snapshot progress.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response55> DeviceInitiateSnapshotAsync(int deviceId)
        {
            return DeviceInitiateSnapshotAsync(deviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Initiate Device Snapshot</summary>
        /// <param name="deviceId">Update this {deviceId}. If {deviceId} is 0, update the host device.</param>
        /// <returns>When the snapshot is initiated. Call /devices/{deviceId}/snapshotinfo to query the snapshot progress.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response55> DeviceInitiateSnapshotAsync(int deviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/snapshot");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response55>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response56>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response56>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response55);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Retrieve Device Snapshot</summary>
        /// <param name="deviceId">Capture a snapshot on this {deviceId}. If {deviceId} is 0, capture a snapshot on the host device.</param>
        /// <returns>The snapshot file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> DeviceGetSnapshotAsync(int deviceId)
        {
            return DeviceGetSnapshotAsync(deviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve Device Snapshot</summary>
        /// <param name="deviceId">Capture a snapshot on this {deviceId}. If {deviceId} is 0, capture a snapshot on the host device.</param>
        /// <returns>The snapshot file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> DeviceGetSnapshotAsync(int deviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/snapshot");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "206")
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_);
                            client_ = null; response_ = null; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response57>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response57>("If the snapshot file isn\'t available.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(FileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Device Snapshot Status</summary>
        /// <param name="deviceId">Get the snapshot progress for this {deviceId}. If {deviceId} is 0, get the snapshot progress for the host device.</param>
        /// <returns>The snapshot info.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response58> DeviceGetSnapshotInfoAsync(int deviceId)
        {
            return DeviceGetSnapshotInfoAsync(deviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Device Snapshot Status</summary>
        /// <param name="deviceId">Get the snapshot progress for this {deviceId}. If {deviceId} is 0, get the snapshot progress for the host device.</param>
        /// <returns>The snapshot info.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response58> DeviceGetSnapshotInfoAsync(int deviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/snapshotinfo");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response58>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response58);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>All Endpoints</summary>
        /// <returns>An array of endpoints</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Endpoint>> GetEndpointsOnAllDevicesAsync(string filter)
        {
            return GetEndpointsOnAllDevicesAsync(filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>All Endpoints</summary>
        /// <returns>An array of endpoints</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Endpoint>> GetEndpointsOnAllDevicesAsync(string filter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/endpoints?");
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Endpoint>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response59>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response59>("No match for the filter", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Endpoint>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Device Endpoints</summary>
        /// <param name="deviceId">Retrieve endpoints configuration for this {deviceId}. If {deviceId} is 0, retrieve the host device's endpoints.</param>
        /// <returns>An array of endpoints</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Endpoint2>> GetEndpointsOnDeviceAsync(int deviceId, string filter)
        {
            return GetEndpointsOnDeviceAsync(deviceId, filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Device Endpoints</summary>
        /// <param name="deviceId">Retrieve endpoints configuration for this {deviceId}. If {deviceId} is 0, retrieve the host device's endpoints.</param>
        /// <returns>An array of endpoints</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Endpoint2>> GetEndpointsOnDeviceAsync(int deviceId, string filter, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/endpoints?");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Endpoint2>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response60>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response60>("No match for the filter", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response61>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response61>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Endpoint2>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Endpoint</summary>
        /// <param name="deviceId">Retrieve endpoints configuration for this {deviceId}. If {deviceId} is 0, retrieve the host device's endpoints.</param>
        /// <param name="endpointId">Retrieve endpoint configuration for this {endpointId}.</param>
        /// <returns>An endpoint</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Endpoint3> GetEndpointOnDeviceAsync(int deviceId, int endpointId, string filter)
        {
            return GetEndpointOnDeviceAsync(deviceId, endpointId, filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Endpoint</summary>
        /// <param name="deviceId">Retrieve endpoints configuration for this {deviceId}. If {deviceId} is 0, retrieve the host device's endpoints.</param>
        /// <param name="endpointId">Retrieve endpoint configuration for this {endpointId}.</param>
        /// <returns>An endpoint</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Endpoint3> GetEndpointOnDeviceAsync(int deviceId, int endpointId, string filter, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (endpointId == null)
                throw new System.ArgumentNullException("endpointId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/endpoints/{endpointId}?");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{endpointId}", System.Uri.EscapeDataString(ConvertToString(endpointId, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Endpoint3>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response62>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response62>("No match for the filter", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response63>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response63>("The device/endpoint {deviceId}/{endpointId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Endpoint3);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Endpoint Update</summary>
        /// <param name="deviceId">Update configuration for an endpoint attached to device {deviceId}. If {deviceId} is 0, use the host device</param>
        /// <param name="endpointId">Update the endpoint's configuration for this {endpointId}.</param>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response64> UpdateEndpointOnDeviceAsync(int deviceId, int endpointId, Update2 @params)
        {
            return UpdateEndpointOnDeviceAsync(deviceId, endpointId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Endpoint Update</summary>
        /// <param name="deviceId">Update configuration for an endpoint attached to device {deviceId}. If {deviceId} is 0, use the host device</param>
        /// <param name="endpointId">Update the endpoint's configuration for this {endpointId}.</param>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response64> UpdateEndpointOnDeviceAsync(int deviceId, int endpointId, Update2 @params, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (endpointId == null)
                throw new System.ArgumentNullException("endpointId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/endpoints/{endpointId}");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{endpointId}", System.Uri.EscapeDataString(ConvertToString(endpointId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response64>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response65>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response65>("Role not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response66>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response66>("The device/endpoint {deviceId}/{endpointId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response64);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Unregister Endpoint</summary>
        /// <param name="deviceId">Retrieve endpoints configuration for this {deviceId}. If {deviceId} is 0, retrieve the host device's endpoints.</param>
        /// <param name="endpointId">Retrieve endpoint configuration for this {endpointId}.</param>
        /// <returns>The endpoint was successfully removed/unregistered.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Endpoint4> DeleteEndpointOnDeviceAsync(int deviceId, int endpointId)
        {
            return DeleteEndpointOnDeviceAsync(deviceId, endpointId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Unregister Endpoint</summary>
        /// <param name="deviceId">Retrieve endpoints configuration for this {deviceId}. If {deviceId} is 0, retrieve the host device's endpoints.</param>
        /// <param name="endpointId">Retrieve endpoint configuration for this {endpointId}.</param>
        /// <returns>The endpoint was successfully removed/unregistered.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Endpoint4> DeleteEndpointOnDeviceAsync(int deviceId, int endpointId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (endpointId == null)
                throw new System.ArgumentNullException("endpointId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/endpoints/{endpointId}");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{endpointId}", System.Uri.EscapeDataString(ConvertToString(endpointId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Endpoint4>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response67>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response67>("The device/endpoint {deviceId}/{endpointId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Endpoint4);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Endpoint Role</summary>
        /// <param name="deviceId">Update role for an endpoint attached to device {deviceId}. If {deviceId} is 0, use the host device.</param>
        /// <param name="endpointId">Update the endpoint's role for this {endpointId}.</param>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response68> EndpointChangeRoleAsync(int deviceId, int endpointId, Params @params)
        {
            return EndpointChangeRoleAsync(deviceId, endpointId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Endpoint Role</summary>
        /// <param name="deviceId">Update role for an endpoint attached to device {deviceId}. If {deviceId} is 0, use the host device.</param>
        /// <param name="endpointId">Update the endpoint's role for this {endpointId}.</param>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response68> EndpointChangeRoleAsync(int deviceId, int endpointId, Params @params, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (endpointId == null)
                throw new System.ArgumentNullException("endpointId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/endpoints/{endpointId}/changerole");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{endpointId}", System.Uri.EscapeDataString(ConvertToString(endpointId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response68>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response69>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response69>("Role not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response70>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response70>("Role is not compatible with endpoint type", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response71>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response71>("The device/endpoint {deviceId}/{endpointId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response68);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Endpoint State</summary>
        /// <param name="deviceId">Update state for an endpoint attached to device {deviceId}. If {deviceId} is 0, use the host device.</param>
        /// <param name="endpointId">Update the endpoint's state for this {endpointId}.</param>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response72> EndpointChangeStateAsync(int deviceId, int endpointId, Params2 @params)
        {
            return EndpointChangeStateAsync(deviceId, endpointId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Endpoint State</summary>
        /// <param name="deviceId">Update state for an endpoint attached to device {deviceId}. If {deviceId} is 0, use the host device.</param>
        /// <param name="endpointId">Update the endpoint's state for this {endpointId}.</param>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response72> EndpointChangeStateAsync(int deviceId, int endpointId, Params2 @params, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (endpointId == null)
                throw new System.ArgumentNullException("endpointId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/endpoints/{endpointId}/state");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{endpointId}", System.Uri.EscapeDataString(ConvertToString(endpointId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response72>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response73>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response73>("The device/endpoint {deviceId}/{endpointId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response72);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Reboot Endpoint</summary>
        /// <param name="deviceId">Reboot this {endpointId} on this {deviceId}. If {deviceId} is 0, reboot the endpoint on the host device. Only valid for HelixNet endpoints.</param>
        /// <param name="endpointId">Update the endpoint's configuration for this {endpointId}.</param>
        /// <param name="reboot">The reboot configuration.</param>
        /// <returns>The endpoint will reboot.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response74> EndpointRebootOnDeviceAsync(int deviceId, int endpointId, Reboot2 reboot)
        {
            return EndpointRebootOnDeviceAsync(deviceId, endpointId, reboot, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Reboot Endpoint</summary>
        /// <param name="deviceId">Reboot this {endpointId} on this {deviceId}. If {deviceId} is 0, reboot the endpoint on the host device. Only valid for HelixNet endpoints.</param>
        /// <param name="endpointId">Update the endpoint's configuration for this {endpointId}.</param>
        /// <param name="reboot">The reboot configuration.</param>
        /// <returns>The endpoint will reboot.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response74> EndpointRebootOnDeviceAsync(int deviceId, int endpointId, Reboot2 reboot, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (endpointId == null)
                throw new System.ArgumentNullException("endpointId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/endpoints/{endpointId}/reboot");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{endpointId}", System.Uri.EscapeDataString(ConvertToString(endpointId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(reboot, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response74>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response75>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response75>("The device/endpoint {deviceId}/{endpointId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response74);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Reset to default Endpoint</summary>
        /// <param name="deviceId">Reset to default this {endpointId} on this {deviceId}. If {deviceId} is 0, reset to default the endpoint on the host device. Only valid for HelixNet endpoints.</param>
        /// <param name="endpointId">Reset to default for this {endpointId}.</param>
        /// <param name="resettodefault">Control what will be reset.</param>
        /// <returns>The endpoint will reset to default.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response76> EndpointResetToDefaultOnDeviceAsync(int deviceId, int endpointId, Resettodefault2 resettodefault)
        {
            return EndpointResetToDefaultOnDeviceAsync(deviceId, endpointId, resettodefault, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Reset to default Endpoint</summary>
        /// <param name="deviceId">Reset to default this {endpointId} on this {deviceId}. If {deviceId} is 0, reset to default the endpoint on the host device. Only valid for HelixNet endpoints.</param>
        /// <param name="endpointId">Reset to default for this {endpointId}.</param>
        /// <param name="resettodefault">Control what will be reset.</param>
        /// <returns>The endpoint will reset to default.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response76> EndpointResetToDefaultOnDeviceAsync(int deviceId, int endpointId, Resettodefault2 resettodefault, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (endpointId == null)
                throw new System.ArgumentNullException("endpointId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/endpoints/{endpointId}/resettodefault");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{endpointId}", System.Uri.EscapeDataString(ConvertToString(endpointId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(resettodefault, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response76>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response77>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response77>("The device/endpoint {deviceId}/{endpointId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response76);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Retrieve Endpoint snapshot.</summary>
        /// <param name="deviceId">Capture a snapshot on this {deviceId}. If {deviceId} is 0, capture a snapshot on the host device.</param>
        /// <param name="endpointId">Retrieve endpoint configuration for this {endpointId}.</param>
        /// <returns>The snapshot file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> EndpointGetSnapshotOnDeviceAsync(int deviceId, int endpointId)
        {
            return EndpointGetSnapshotOnDeviceAsync(deviceId, endpointId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Retrieve Endpoint snapshot.</summary>
        /// <param name="deviceId">Capture a snapshot on this {deviceId}. If {deviceId} is 0, capture a snapshot on the host device.</param>
        /// <param name="endpointId">Retrieve endpoint configuration for this {endpointId}.</param>
        /// <returns>The snapshot file.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<FileResponse> EndpointGetSnapshotOnDeviceAsync(int deviceId, int endpointId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (endpointId == null)
                throw new System.ArgumentNullException("endpointId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/endpoints/{endpointId}/snapshot");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{endpointId}", System.Uri.EscapeDataString(ConvertToString(endpointId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/octet-stream"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "206")
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, null, response_);
                            client_ = null; response_ = null; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response78>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response78>("If the snapshot file isn\'t available.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(FileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Unregister Endpoint</summary>
        /// <param name="deviceId">Unregister from this {deviceId}. If {deviceId} is 0, unregister from the host device.</param>
        /// <param name="endpointId">Unregister the endpoint {endpointId}.</param>
        /// <returns>The endpoint was unregistered/removed from the device.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response79> EndpointUnregisterAsync(int deviceId, int endpointId)
        {
            return EndpointUnregisterAsync(deviceId, endpointId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Unregister Endpoint</summary>
        /// <param name="deviceId">Unregister from this {deviceId}. If {deviceId} is 0, unregister from the host device.</param>
        /// <param name="endpointId">Unregister the endpoint {endpointId}.</param>
        /// <returns>The endpoint was unregistered/removed from the device.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response79> EndpointUnregisterAsync(int deviceId, int endpointId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (endpointId == null)
                throw new System.ArgumentNullException("endpointId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/endpoints/{endpointId}/unregister");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{endpointId}", System.Uri.EscapeDataString(ConvertToString(endpointId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response79>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response80>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response80>("The device/endpoint {deviceId}/{endpointId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response79);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>External Devices</summary>
        /// <returns>An array of external devices and ports</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous8>> GetExternalDevicesAsync()
        {
            return GetExternalDevicesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>External Devices</summary>
        /// <returns>An array of external devices and ports</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous8>> GetExternalDevicesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/externalDevices");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous8>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Anonymous8>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Add External Device</summary>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response81> AddExternalDeviceAsync(Add @params)
        {
            return AddExternalDeviceAsync(@params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add External Device</summary>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response81> AddExternalDeviceAsync(Add @params, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/externalDevices");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response81>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response81);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>External Device</summary>
        /// <param name="externalDeviceId">Retrieve configuration for this {externalDeviceId}.</param>
        /// <returns>An single external device and ports assigned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response82> GetExternalDeviceByIdAsync(int externalDeviceId)
        {
            return GetExternalDeviceByIdAsync(externalDeviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>External Device</summary>
        /// <param name="externalDeviceId">Retrieve configuration for this {externalDeviceId}.</param>
        /// <returns>An single external device and ports assigned</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response82> GetExternalDeviceByIdAsync(int externalDeviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (externalDeviceId == null)
                throw new System.ArgumentNullException("externalDeviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/externalDevices/{externalDeviceId}");
            urlBuilder_.Replace("{externalDeviceId}", System.Uri.EscapeDataString(ConvertToString(externalDeviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response82>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response83>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response83>("{externalDeviceId} not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response82);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>External Device</summary>
        /// <param name="externalDeviceId">Update configuration for this {externalDeviceId}.</param>
        /// <returns>The external device was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response84> UpdateExternalDeviceByIdAsync(int externalDeviceId, Params3 @params)
        {
            return UpdateExternalDeviceByIdAsync(externalDeviceId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>External Device</summary>
        /// <param name="externalDeviceId">Update configuration for this {externalDeviceId}.</param>
        /// <returns>The external device was successfully updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response84> UpdateExternalDeviceByIdAsync(int externalDeviceId, Params3 @params, System.Threading.CancellationToken cancellationToken)
        {
            if (externalDeviceId == null)
                throw new System.ArgumentNullException("externalDeviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/externalDevices/{externalDeviceId}");
            urlBuilder_.Replace("{externalDeviceId}", System.Uri.EscapeDataString(ConvertToString(externalDeviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response84>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response85>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response85>("{externalDeviceId} not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response84);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Remove External Device</summary>
        /// <param name="externalDeviceId">Remove the external device represented by this {externalDeviceId}.</param>
        /// <returns>The external device was successfully removed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response86> DeleteExternalDeviceAsync(int externalDeviceId)
        {
            return DeleteExternalDeviceAsync(externalDeviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Remove External Device</summary>
        /// <param name="externalDeviceId">Remove the external device represented by this {externalDeviceId}.</param>
        /// <returns>The external device was successfully removed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response86> DeleteExternalDeviceAsync(int externalDeviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (externalDeviceId == null)
                throw new System.ArgumentNullException("externalDeviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/externalDevices/{externalDeviceId}");
            urlBuilder_.Replace("{externalDeviceId}", System.Uri.EscapeDataString(ConvertToString(externalDeviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response86>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response87>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response87>("The external device {externalDeviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response86);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get the External Device's ports</summary>
        /// <param name="externalDeviceId">Retrieve ports for this {externalDeviceId}.</param>
        /// <returns>An array of ports</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, Anonymous9>>> GetExternalDevicePortsAsync(int externalDeviceId)
        {
            return GetExternalDevicePortsAsync(externalDeviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get the External Device's ports</summary>
        /// <param name="externalDeviceId">Retrieve ports for this {externalDeviceId}.</param>
        /// <returns>An array of ports</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, Anonymous9>>> GetExternalDevicePortsAsync(int externalDeviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (externalDeviceId == null)
                throw new System.ArgumentNullException("externalDeviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/externalDevices/{externalDeviceId}/ports");
            urlBuilder_.Replace("{externalDeviceId}", System.Uri.EscapeDataString(ConvertToString(externalDeviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, Anonymous9>>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response88>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response88>("{externalDeviceId} not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, Anonymous9>>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Add External Device Port</summary>
        /// <param name="externalDeviceId">Add port to this {externalDeviceId}.</param>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response89> AddExternalDevicePortAsync(int externalDeviceId, Add2 @params)
        {
            return AddExternalDevicePortAsync(externalDeviceId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add External Device Port</summary>
        /// <param name="externalDeviceId">Add port to this {externalDeviceId}.</param>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response89> AddExternalDevicePortAsync(int externalDeviceId, Add2 @params, System.Threading.CancellationToken cancellationToken)
        {
            if (externalDeviceId == null)
                throw new System.ArgumentNullException("externalDeviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/externalDevices/{externalDeviceId}/ports");
            urlBuilder_.Replace("{externalDeviceId}", System.Uri.EscapeDataString(ConvertToString(externalDeviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response89>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response89);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update External Device Port</summary>
        /// <param name="externalDeviceId">Update external port configuration for this {externalDeviceId}.</param>
        /// <param name="portId">Update external port configuration for this {portId}</param>
        /// <returns>Port updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response90> UpdateExternalDevicePortAsync(int externalDeviceId, int portId, Update3 @params)
        {
            return UpdateExternalDevicePortAsync(externalDeviceId, portId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update External Device Port</summary>
        /// <param name="externalDeviceId">Update external port configuration for this {externalDeviceId}.</param>
        /// <param name="portId">Update external port configuration for this {portId}</param>
        /// <returns>Port updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response90> UpdateExternalDevicePortAsync(int externalDeviceId, int portId, Update3 @params, System.Threading.CancellationToken cancellationToken)
        {
            if (externalDeviceId == null)
                throw new System.ArgumentNullException("externalDeviceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/externalDevices/{externalDeviceId}/ports/{portId}");
            urlBuilder_.Replace("{externalDeviceId}", System.Uri.EscapeDataString(ConvertToString(externalDeviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response90>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response91>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response91>("The device {externalDeviceId} or {portId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response90);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Delete External Device Port</summary>
        /// <param name="externalDeviceId">Delete external port configuration for this external {externalDeviceId}.</param>
        /// <param name="portId">Delete the external port {portId}</param>
        /// <returns>Deletion confirmation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response92> DeleteExternalDevicePortAsync(int externalDeviceId, int portId)
        {
            return DeleteExternalDevicePortAsync(externalDeviceId, portId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete External Device Port</summary>
        /// <param name="externalDeviceId">Delete external port configuration for this external {externalDeviceId}.</param>
        /// <param name="portId">Delete the external port {portId}</param>
        /// <returns>Deletion confirmation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response92> DeleteExternalDevicePortAsync(int externalDeviceId, int portId, System.Threading.CancellationToken cancellationToken)
        {
            if (externalDeviceId == null)
                throw new System.ArgumentNullException("externalDeviceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/externalDevices/{externalDeviceId}/ports/{portId}");
            urlBuilder_.Replace("{externalDeviceId}", System.Uri.EscapeDataString(ConvertToString(externalDeviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response92>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response93>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response93>("The external device {externalDeviceId} or external port {portId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response92);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get External Device Port</summary>
        /// <param name="externalDeviceId">Get external port configuration for this external {externalDeviceId}.</param>
        /// <param name="portId">Get the external port {portId}</param>
        /// <returns>An external port</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, Anonymous10>> GetExternalDevicePortAsync(int externalDeviceId, int portId)
        {
            return GetExternalDevicePortAsync(externalDeviceId, portId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get External Device Port</summary>
        /// <param name="externalDeviceId">Get external port configuration for this external {externalDeviceId}.</param>
        /// <param name="portId">Get the external port {portId}</param>
        /// <returns>An external port</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, Anonymous10>> GetExternalDevicePortAsync(int externalDeviceId, int portId, System.Threading.CancellationToken cancellationToken)
        {
            if (externalDeviceId == null)
                throw new System.ArgumentNullException("externalDeviceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/externalDevices/{externalDeviceId}/ports/{portId}");
            urlBuilder_.Replace("{externalDeviceId}", System.Uri.EscapeDataString(ConvertToString(externalDeviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, Anonymous10>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response94>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response94>("The external device {externalDeviceId} or external port {portId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.IDictionary<string, Anonymous10>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Users</summary>
        /// <returns>An array of users</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous11>> GetUsersAsync(string filter)
        {
            return GetUsersAsync(filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Users</summary>
        /// <returns>An array of users</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous11>> GetUsersAsync(string filter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/users?");
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous11>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response95>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response95>("Issue reading from the password store", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Anonymous11>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>User</summary>
        /// <param name="username">The user configuration to retreive. 'admin' is the only supported user for now.</param>
        /// <returns>A single user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response96> GetUserByNameAsync(string username, string filter)
        {
            return GetUserByNameAsync(username, filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>User</summary>
        /// <param name="username">The user configuration to retreive. 'admin' is the only supported user for now.</param>
        /// <returns>A single user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response96> GetUserByNameAsync(string username, string filter, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/users/{username}?");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response96>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response97>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response97>("{username} not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response98>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response98>("Issue reading from the password store", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response96);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update User</summary>
        /// <param name="username">The user's password to change. 'admin' is the only supported user for now.</param>
        /// <returns>Password updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response99> UpdateUserAsync(string username, Params4 @params)
        {
            return UpdateUserAsync(username, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update User</summary>
        /// <param name="username">The user's password to change. 'admin' is the only supported user for now.</param>
        /// <returns>Password updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response99> UpdateUserAsync(string username, Params4 @params, System.Threading.CancellationToken cancellationToken)
        {
            if (username == null)
                throw new System.ArgumentNullException("username");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/users/{username}");
            urlBuilder_.Replace("{username}", System.Uri.EscapeDataString(ConvertToString(username, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response99>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response100>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response100>("Password must be 32 characters or less.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response101>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response101>("Old password is incorrect.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response102>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response102>("{username} not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response103>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response103>("Issue writing to the password store", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response99);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>All Interfaces</summary>
        /// <returns>An array of interfaces</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Interface>> GetInterfacesOnAllDevicesAsync()
        {
            return GetInterfacesOnAllDevicesAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>All Interfaces</summary>
        /// <returns>An array of interfaces</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Interface>> GetInterfacesOnAllDevicesAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/interfaces");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Interface>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Interface>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Device Interfaces</summary>
        /// <param name="deviceId">Retrieve interface configurations for this {deviceId}. If {deviceId} is 0, retrieve the host device's interfaces.</param>
        /// <returns>An array of interfaces</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Interface2>> GetInterfacesOnDeviceAsync(int deviceId)
        {
            return GetInterfacesOnDeviceAsync(deviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Device Interfaces</summary>
        /// <param name="deviceId">Retrieve interface configurations for this {deviceId}. If {deviceId} is 0, retrieve the host device's interfaces.</param>
        /// <returns>An array of interfaces</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Interface2>> GetInterfacesOnDeviceAsync(int deviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Interface2>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response104>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response104>("The device {deviceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Interface2>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Interface</summary>
        /// <param name="deviceId">Retrieve interface configurations for this {deviceId}. If {deviceId} is 0, retrieve the host device's interfaces.</param>
        /// <param name="interfaceId">Retrieve interface configuration for this {interfaceId}</param>
        /// <returns>A single interface</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Interface3> GetInterfaceOnDeviceAsync(int deviceId, int interfaceId)
        {
            return GetInterfaceOnDeviceAsync(deviceId, interfaceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Interface</summary>
        /// <param name="deviceId">Retrieve interface configurations for this {deviceId}. If {deviceId} is 0, retrieve the host device's interfaces.</param>
        /// <param name="interfaceId">Retrieve interface configuration for this {interfaceId}</param>
        /// <returns>A single interface</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Interface3> GetInterfaceOnDeviceAsync(int deviceId, int interfaceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Interface3>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response105>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response105>("The device {deviceId} or interface {interfaceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Interface3);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update Interface</summary>
        /// <param name="deviceId">Device ID of device that the interface to update is hosted by.</param>
        /// <param name="interfaceId">Interface ID of the interface to update {interfaceId}</param>
        /// <returns>Interface updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response106> UpdateInterfaceOnDeviceAsync(int deviceId, int interfaceId, Update4 @params)
        {
            return UpdateInterfaceOnDeviceAsync(deviceId, interfaceId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Interface</summary>
        /// <param name="deviceId">Device ID of device that the interface to update is hosted by.</param>
        /// <param name="interfaceId">Interface ID of the interface to update {interfaceId}</param>
        /// <returns>Interface updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response106> UpdateInterfaceOnDeviceAsync(int deviceId, int interfaceId, Update4 @params, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response106>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response107>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response107>("{deviceId} or {interfaceId} not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response108>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response108>("Failed to updated Interface", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response106);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Device Interfaces Capabilities</summary>
        /// <param name="deviceId">Retrieve interface capabilities for this {deviceId}. If {deviceId} is 0, retrieve it for the host device's interface.</param>
        /// <returns>Capabilities for a single interface</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> GetInterfacesCapabilitiesOnDeviceAsync(int deviceId)
        {
            return GetInterfacesCapabilitiesOnDeviceAsync(deviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Device Interfaces Capabilities</summary>
        /// <param name="deviceId">Retrieve interface capabilities for this {deviceId}. If {deviceId} is 0, retrieve it for the host device's interface.</param>
        /// <returns>Capabilities for a single interface</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<object> GetInterfacesCapabilitiesOnDeviceAsync(int deviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/capability");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<object>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response109>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response109>("The device {deviceId} or interface {interfaceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Device Interface Capabilities</summary>
        /// <param name="deviceId">Retrieve interface capabilities for this {deviceId}. If {deviceId} is 0, retrieve it for the host device's interface.</param>
        /// <param name="interfaceId">Retrieve interface capabilities for this {interfaceId}</param>
        /// <returns>Capabilities for a single interface</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response110> GetInterfaceCapabilitiesOnDeviceAsync(int deviceId, int interfaceId)
        {
            return GetInterfaceCapabilitiesOnDeviceAsync(deviceId, interfaceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Device Interface Capabilities</summary>
        /// <param name="deviceId">Retrieve interface capabilities for this {deviceId}. If {deviceId} is 0, retrieve it for the host device's interface.</param>
        /// <param name="interfaceId">Retrieve interface capabilities for this {interfaceId}</param>
        /// <returns>Capabilities for a single interface</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response110> GetInterfaceCapabilitiesOnDeviceAsync(int deviceId, int interfaceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}/capability");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response110>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response111>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response111>("The device {deviceId} or interface {interfaceId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response110);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Device Interfaces Ports</summary>
        /// <returns>An array of ports</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Add4>> GetPortsOnDeviceAsync()
        {
            return GetPortsOnDeviceAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Device Interfaces Ports</summary>
        /// <returns>An array of ports</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Add4>> GetPortsOnDeviceAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/interfaces/ports");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Add4>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response112>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response112>("The device {deviceId} wasn\'t found.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Add4>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update Interface Ports</summary>
        /// <returns>All ports have been updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response113> UpdatePortsOnDeviceAsync(Put @params)
        {
            return UpdatePortsOnDeviceAsync(@params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Interface Ports</summary>
        /// <returns>All ports have been updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response113> UpdatePortsOnDeviceAsync(Put @params, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/interfaces/ports");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response113>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response114>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response114>("All targeted ports must be from the same device (as spcified in the \'res\' parameter)", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response115>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response115>("One of the ports could not be found.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response113);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Port</summary>
        /// <param name="deviceId">Retrieve port configurations for this {deviceId}. If {deviceId} is 0, retrieve the host device's interfaces.</param>
        /// <param name="interfaceId">Retrieve port configuration for this {interfaceId}</param>
        /// <returns>An array of ports</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Add5>> GetPortsOnInterfaceOnDeviceAsync(int deviceId, int interfaceId)
        {
            return GetPortsOnInterfaceOnDeviceAsync(deviceId, interfaceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Port</summary>
        /// <param name="deviceId">Retrieve port configurations for this {deviceId}. If {deviceId} is 0, retrieve the host device's interfaces.</param>
        /// <param name="interfaceId">Retrieve port configuration for this {interfaceId}</param>
        /// <returns>An array of ports</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Add5>> GetPortsOnInterfaceOnDeviceAsync(int deviceId, int interfaceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}/ports");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Add5>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response116>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response116>("The device {deviceId} or interface {interfaceId} or {portId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Add5>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Port</summary>
        /// <param name="deviceId">Retrieve port configurations for this {deviceId}. If {deviceId} is 0, retrieve the host device's interfaces.</param>
        /// <param name="interfaceId">Retrieve port configuration for this {interfaceId}</param>
        /// <param name="portId">Retrieve port configuration for this {portId}</param>
        /// <returns>A single Port</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Add6> GetPortOnInterfaceOnDeviceAsync(int deviceId, int interfaceId, int portId)
        {
            return GetPortOnInterfaceOnDeviceAsync(deviceId, interfaceId, portId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Port</summary>
        /// <param name="deviceId">Retrieve port configurations for this {deviceId}. If {deviceId} is 0, retrieve the host device's interfaces.</param>
        /// <param name="interfaceId">Retrieve port configuration for this {interfaceId}</param>
        /// <param name="portId">Retrieve port configuration for this {portId}</param>
        /// <returns>A single Port</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Add6> GetPortOnInterfaceOnDeviceAsync(int deviceId, int interfaceId, int portId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}/ports/{portId}");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Add6>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response117>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response117>("The device {deviceId} or interface {interfaceId} or {portId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Add6);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update Interface Port</summary>
        /// <param name="deviceId">Retrieve port configuration for this {deviceId}. If {deviceId} is 0, retrieve the host device's interfaces.</param>
        /// <param name="interfaceId">Retrieve port configuration for this {interfaceId}</param>
        /// <param name="portId">Retrieve port configuration for this {portId}</param>
        /// <returns>The port has been updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response118> UpdatePortOnDeviceAsync(int deviceId, int interfaceId, int portId, Put2 @params)
        {
            return UpdatePortOnDeviceAsync(deviceId, interfaceId, portId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Interface Port</summary>
        /// <param name="deviceId">Retrieve port configuration for this {deviceId}. If {deviceId} is 0, retrieve the host device's interfaces.</param>
        /// <param name="interfaceId">Retrieve port configuration for this {interfaceId}</param>
        /// <param name="portId">Retrieve port configuration for this {portId}</param>
        /// <returns>The port has been updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response118> UpdatePortOnDeviceAsync(int deviceId, int interfaceId, int portId, Put2 @params, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}/ports/{portId}");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response118>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response119>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response119>("The port could not be found.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response118);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Port Nulling Status</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <returns>The port's nulling status.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response120> GetPortNullingStatusAsync(int deviceId, int interfaceId, int portId)
        {
            return GetPortNullingStatusAsync(deviceId, interfaceId, portId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Port Nulling Status</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <returns>The port's nulling status.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response120> GetPortNullingStatusAsync(int deviceId, int interfaceId, int portId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}/ports/{portId}/nulling");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response120>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response121>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response121>("The device {deviceId} or interface {interfaceId} or {portId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response120);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Start Port Nulling</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <returns>The port's nulling process has been started.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response122> StartPortNullingAsync(int deviceId, int interfaceId, int portId)
        {
            return StartPortNullingAsync(deviceId, interfaceId, portId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Start Port Nulling</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <returns>The port's nulling process has been started.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response122> StartPortNullingAsync(int deviceId, int interfaceId, int portId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}/ports/{portId}/nulling");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response122>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response123>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response123>("The port could not be found.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response122);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Set Port GPO State</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <returns>The port's GPO status has been set.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response124> SetPortGpoStateAsync(int deviceId, int interfaceId, int portId, Params5 @params)
        {
            return SetPortGpoStateAsync(deviceId, interfaceId, portId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Set Port GPO State</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <returns>The port's GPO status has been set.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response124> SetPortGpoStateAsync(int deviceId, int interfaceId, int portId, Params5 @params, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}/ports/{portId}/gpo");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response124>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response125>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response125>("The port could not be found.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response124);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Join Connection</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <returns>The port has joined the connection.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response126> JoinPortToConnectionAsync(int deviceId, int interfaceId, int portId, Anonymous @params)
        {
            return JoinPortToConnectionAsync(deviceId, interfaceId, portId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Join Connection</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <returns>The port has joined the connection.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response126> JoinPortToConnectionAsync(int deviceId, int interfaceId, int portId, Anonymous @params, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}/ports/{portId}/join");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response126>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response127>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response127>("The port could not be found.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response126);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Leave Connection</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <returns>The port has left the connection.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response128> LeavePortToConnectionAsync(int deviceId, int interfaceId, int portId, Anonymous2 @params)
        {
            return LeavePortToConnectionAsync(deviceId, interfaceId, portId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Leave Connection</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <returns>The port has left the connection.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response128> LeavePortToConnectionAsync(int deviceId, int interfaceId, int portId, Anonymous2 @params, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}/ports/{portId}/leave");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response128>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response129>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response129>("The port could not be found.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response128);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get all active Calls for Link-Group</summary>
        /// <returns>The call states</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous12>> GetAllCallsAsync()
        {
            return GetAllCallsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all active Calls for Link-Group</summary>
        /// <returns>The call states</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous12>> GetAllCallsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/interfaces/ports/calls");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous12>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Anonymous12>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Hang all calls</summary>
        /// <returns>Hang up for all calls initiated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response130> HangupDevicesCallsAsync()
        {
            return HangupDevicesCallsAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Hang all calls</summary>
        /// <returns>Hang up for all calls initiated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response130> HangupDevicesCallsAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/interfaces/ports/calls");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response130>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response130);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get all active Calls for a Device</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <returns>The call states</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous13>> GetCallsForDeviceAsync(int deviceId)
        {
            return GetCallsForDeviceAsync(deviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all active Calls for a Device</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <returns>The call states</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous13>> GetCallsForDeviceAsync(int deviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/ports/calls");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous13>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Anonymous13>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Hang all device calls</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <returns>Hang up for calls initiated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response131> HangupDeviceCallsAsync(int deviceId)
        {
            return HangupDeviceCallsAsync(deviceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Hang all device calls</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <returns>Hang up for calls initiated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response131> HangupDeviceCallsAsync(int deviceId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/ports/calls");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response131>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response131);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get all active Calls for a Port</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <returns>The call states</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous14>> GetCallsForPortAsync(int deviceId, int interfaceId, int portId)
        {
            return GetCallsForPortAsync(deviceId, interfaceId, portId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get all active Calls for a Port</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <returns>The call states</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous14>> GetCallsForPortAsync(int deviceId, int interfaceId, int portId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}/ports/{portId}/calls");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous14>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response132>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response132>("The call could not be found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Anonymous14>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Make a call</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <returns>When the call request was accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response133> MakeCallAsync(int deviceId, int interfaceId, int portId, Params6 @params)
        {
            return MakeCallAsync(deviceId, interfaceId, portId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Make a call</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <returns>When the call request was accepted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response133> MakeCallAsync(int deviceId, int interfaceId, int portId, Params6 @params, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}/ports/{portId}/calls");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response133>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response134>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response134>("The call could not be made", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response133);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get a single active Call</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <param name="callId">Call ID {portId}</param>
        /// <returns>The call state</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response135> GetCallAsync(int deviceId, int interfaceId, int portId, int callId)
        {
            return GetCallAsync(deviceId, interfaceId, portId, callId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get a single active Call</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <param name="callId">Call ID {portId}</param>
        /// <returns>The call state</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response135> GetCallAsync(int deviceId, int interfaceId, int portId, int callId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            if (callId == null)
                throw new System.ArgumentNullException("callId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}/ports/{portId}/calls/{callId}");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{callId}", System.Uri.EscapeDataString(ConvertToString(callId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response135>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response136>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response136>("The call could not be found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response135);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Hang up a Call</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <param name="callId">Call ID {portId}</param>
        /// <returns>Call hang up initiated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response137> HangupCallAsync(int deviceId, int interfaceId, int portId, int callId)
        {
            return HangupCallAsync(deviceId, interfaceId, portId, callId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Hang up a Call</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <param name="callId">Call ID {portId}</param>
        /// <returns>Call hang up initiated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response137> HangupCallAsync(int deviceId, int interfaceId, int portId, int callId, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            if (callId == null)
                throw new System.ArgumentNullException("callId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}/ports/{portId}/calls/{callId}");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{callId}", System.Uri.EscapeDataString(ConvertToString(callId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response137>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response138>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response138>("The call could not be hungup", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response139>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response139>("The call could not be found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response137);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Injects a string as a DTMF message to an ongoing call</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <param name="callId">Call ID {callId}</param>
        /// <param name="dtmf">The string to send as DTMF.</param>
        /// <returns>DTMF injected in call</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response140> SendDTMFAsync(int deviceId, int interfaceId, int portId, int callId, Dtmf dtmf)
        {
            return SendDTMFAsync(deviceId, interfaceId, portId, callId, dtmf, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Injects a string as a DTMF message to an ongoing call</summary>
        /// <param name="deviceId">Device ID {deviceId}. If {deviceId} is 0, the host's device ID is used.</param>
        /// <param name="interfaceId">Interface ID {interfaceId}</param>
        /// <param name="portId">Port ID {portId}</param>
        /// <param name="callId">Call ID {callId}</param>
        /// <param name="dtmf">The string to send as DTMF.</param>
        /// <returns>DTMF injected in call</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response140> SendDTMFAsync(int deviceId, int interfaceId, int portId, int callId, Dtmf dtmf, System.Threading.CancellationToken cancellationToken)
        {
            if (deviceId == null)
                throw new System.ArgumentNullException("deviceId");

            if (interfaceId == null)
                throw new System.ArgumentNullException("interfaceId");

            if (portId == null)
                throw new System.ArgumentNullException("portId");

            if (callId == null)
                throw new System.ArgumentNullException("callId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/devices/{deviceId}/interfaces/{interfaceId}/ports/{portId}/calls/{callId}/senddtmf");
            urlBuilder_.Replace("{deviceId}", System.Uri.EscapeDataString(ConvertToString(deviceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{interfaceId}", System.Uri.EscapeDataString(ConvertToString(interfaceId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{portId}", System.Uri.EscapeDataString(ConvertToString(portId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{callId}", System.Uri.EscapeDataString(ConvertToString(callId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(dtmf, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response140>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response141>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response141>("The call could not be found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response140);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Connections</summary>
        /// <returns>An array of connections</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Connection>> GetConnectionsAsync(string filter)
        {
            return GetConnectionsAsync(filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Connections</summary>
        /// <returns>An array of connections</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Connection>> GetConnectionsAsync(string filter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connections?");
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Connection>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Connection>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Add Connection</summary>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response142> AddConnectionAsync(Add3 @params)
        {
            return AddConnectionAsync(@params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add Connection</summary>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response142> AddConnectionAsync(Add3 @params, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connections");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response142>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response142);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Connections Live Status</summary>
        /// <returns>An array of connection live status</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Add7>> GetConnectionsLiveStatusAsync()
        {
            return GetConnectionsLiveStatusAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Connections Live Status</summary>
        /// <returns>An array of connection live status</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Add7>> GetConnectionsLiveStatusAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connections/liveStatus");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Add7>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Add7>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Connection</summary>
        /// <param name="connectionId">Retrieve configuration for this connection {connectionId}</param>
        /// <returns>The connection configuration</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Connection2> GetConnectionByIdAsync(int connectionId, string filter)
        {
            return GetConnectionByIdAsync(connectionId, filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Connection</summary>
        /// <param name="connectionId">Retrieve configuration for this connection {connectionId}</param>
        /// <returns>The connection configuration</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Connection2> GetConnectionByIdAsync(int connectionId, string filter, System.Threading.CancellationToken cancellationToken)
        {
            if (connectionId == null)
                throw new System.ArgumentNullException("connectionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connections/{connectionId}?");
            urlBuilder_.Replace("{connectionId}", System.Uri.EscapeDataString(ConvertToString(connectionId, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Connection2>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response143>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response143>("No matching {connectionId} for the filter", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response144>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response144>("The connection {connectionId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Connection2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update Connection</summary>
        /// <param name="connectionId">Update this {connectionId}.</param>
        /// <param name="@params">The connection's properties to update.</param>
        /// <returns>Connection updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response145> UpdateConnectionAsync(int connectionId, Params7 @params)
        {
            return UpdateConnectionAsync(connectionId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Connection</summary>
        /// <param name="connectionId">Update this {connectionId}.</param>
        /// <param name="@params">The connection's properties to update.</param>
        /// <returns>Connection updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response145> UpdateConnectionAsync(int connectionId, Params7 @params, System.Threading.CancellationToken cancellationToken)
        {
            if (connectionId == null)
                throw new System.ArgumentNullException("connectionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connections/{connectionId}");
            urlBuilder_.Replace("{connectionId}", System.Uri.EscapeDataString(ConvertToString(connectionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response145>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response146>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response146>("{connectionId} not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response145);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Delete Connection</summary>
        /// <param name="connectionId">Delete the connection {connectionId}</param>
        /// <returns>Deletion confirmation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response147> DeleteConnectionAsync(int connectionId)
        {
            return DeleteConnectionAsync(connectionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Connection</summary>
        /// <param name="connectionId">Delete the connection {connectionId}</param>
        /// <returns>Deletion confirmation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response147> DeleteConnectionAsync(int connectionId, System.Threading.CancellationToken cancellationToken)
        {
            if (connectionId == null)
                throw new System.ArgumentNullException("connectionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connections/{connectionId}");
            urlBuilder_.Replace("{connectionId}", System.Uri.EscapeDataString(ConvertToString(connectionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response147>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response148>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response148>("The connection {connectionId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response147);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Connection Live Status</summary>
        /// <param name="connectionId">Retrieve the live status for this connection {connectionId}</param>
        /// <returns>The connection live status</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Add8> GetConnectionLiveStatusAsync(int connectionId)
        {
            return GetConnectionLiveStatusAsync(connectionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Connection Live Status</summary>
        /// <param name="connectionId">Retrieve the live status for this connection {connectionId}</param>
        /// <returns>The connection live status</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Add8> GetConnectionLiveStatusAsync(int connectionId, System.Threading.CancellationToken cancellationToken)
        {
            if (connectionId == null)
                throw new System.ArgumentNullException("connectionId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/connections/{connectionId}/liveStatus");
            urlBuilder_.Replace("{connectionId}", System.Uri.EscapeDataString(ConvertToString(connectionId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Add8>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response149>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response149>("The connection {connectionId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Add8);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Roles</summary>
        /// <returns>An array of roles</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous15>> GetRolesAsync(string filter)
        {
            return GetRolesAsync(filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Roles</summary>
        /// <returns>An array of roles</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous15>> GetRolesAsync(string filter, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/roles?");
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous15>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Anonymous15>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Add Role</summary>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response150> AddRoleAsync(Anonymous3 @params)
        {
            return AddRoleAsync(@params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add Role</summary>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response150> AddRoleAsync(Anonymous3 @params, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/roles");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response150>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response150);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Role</summary>
        /// <param name="roleId">The role id to be retrieved</param>
        /// <returns>The role settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response151> GetRoleByIdAsync(int roleId, string filter)
        {
            return GetRoleByIdAsync(roleId, filter, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Role</summary>
        /// <param name="roleId">The role id to be retrieved</param>
        /// <returns>The role settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response151> GetRoleByIdAsync(int roleId, string filter, System.Threading.CancellationToken cancellationToken)
        {
            if (roleId == null)
                throw new System.ArgumentNullException("roleId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/roles/{roleId}?");
            urlBuilder_.Replace("{roleId}", System.Uri.EscapeDataString(ConvertToString(roleId, System.Globalization.CultureInfo.InvariantCulture)));
            if (filter != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("filter") + "=").Append(System.Uri.EscapeDataString(ConvertToString(filter, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response151>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response152>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response152>("The role {roleId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response151);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update Role</summary>
        /// <param name="roleId">The role id to be updated</param>
        /// <returns>Role updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response153> UpdateRoleAsync(int roleId, Update5 @params)
        {
            return UpdateRoleAsync(roleId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Role</summary>
        /// <param name="roleId">The role id to be updated</param>
        /// <returns>Role updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response153> UpdateRoleAsync(int roleId, Update5 @params, System.Threading.CancellationToken cancellationToken)
        {
            if (roleId == null)
                throw new System.ArgumentNullException("roleId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/roles/{roleId}");
            urlBuilder_.Replace("{roleId}", System.Uri.EscapeDataString(ConvertToString(roleId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response153>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response154>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response154>("Role could not be parsed (or was too large).", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response155>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response155>("Cannot change isDefault value.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response156>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response156>("Role {roleId} not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response153);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Delete Role</summary>
        /// <param name="roleId">The role id to be deleted</param>
        /// <returns>Deletion confirmation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response157> DeleteRoleAsync(int roleId)
        {
            return DeleteRoleAsync(roleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Role</summary>
        /// <param name="roleId">The role id to be deleted</param>
        /// <returns>Deletion confirmation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response157> DeleteRoleAsync(int roleId, System.Threading.CancellationToken cancellationToken)
        {
            if (roleId == null)
                throw new System.ArgumentNullException("roleId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/roles/{roleId}");
            urlBuilder_.Replace("{roleId}", System.Uri.EscapeDataString(ConvertToString(roleId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response157>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response158>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response158>("Cannot delete a default role.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response159>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response159>("The role {roleId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response157);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Reset Role</summary>
        /// <param name="roleId">The role id to be reset</param>
        /// <returns>Default role reset to it's default settings.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response160> RoleResetAsync(int roleId)
        {
            return RoleResetAsync(roleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Reset Role</summary>
        /// <param name="roleId">The role id to be reset</param>
        /// <returns>Default role reset to it's default settings.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response160> RoleResetAsync(int roleId, System.Threading.CancellationToken cancellationToken)
        {
            if (roleId == null)
                throw new System.ArgumentNullException("roleId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/roles/{roleId}/reset");
            urlBuilder_.Replace("{roleId}", System.Uri.EscapeDataString(ConvertToString(roleId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response160>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response161>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response161>("Can only reset a default role.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response162>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response162>("Role {roleId} not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response160);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Get's the Agent-IC users</summary>
        /// <returns>An array of agent-ic users</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous16>> GetIVPUsersAsync()
        {
            return GetIVPUsersAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get's the Agent-IC users</summary>
        /// <returns>An array of agent-ic users</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous16>> GetIVPUsersAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ivpusers");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous16>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(System.Collections.Generic.ICollection<Anonymous16>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Add Agent-IC User</summary>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response163> AddIVPUserAsync(Params8 @params)
        {
            return AddIVPUserAsync(@params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Add Agent-IC User</summary>
        /// <returns>When the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response163> AddIVPUserAsync(Params8 @params, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ivpusers");

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response163>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response164>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response164>("When the request is unsuccessful, caused by too many users already created.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response165>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response165>("When the request is unsuccessful, caused by invalid settings.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response166>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response166>("When the request is unsuccessful, caused by an unknown error.", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response163);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>AIC</summary>
        /// <param name="userId">The agent ic user id to be retrieved</param>
        /// <returns>The agent ic settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response167> GetAgentICUserByIdAsync(int userId)
        {
            return GetAgentICUserByIdAsync(userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>AIC</summary>
        /// <param name="userId">The agent ic user id to be retrieved</param>
        /// <returns>The agent ic settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response167> GetAgentICUserByIdAsync(int userId, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ivpusers/{userId}");
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response167>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response168>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response168>("The agent ic user {userId} wasn\'t found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response167);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Update Agent-IC User</summary>
        /// <param name="userId">The agent-ic user id to be updated</param>
        /// <returns>Agent-IC user updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response169> UpdateAgentICUserAsync(int userId, Params9 @params)
        {
            return UpdateAgentICUserAsync(userId, @params, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Update Agent-IC User</summary>
        /// <param name="userId">The agent-ic user id to be updated</param>
        /// <returns>Agent-IC user updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response169> UpdateAgentICUserAsync(int userId, Params9 @params, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ivpusers/{userId}");
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(@params, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response169>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response170>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response170>("Agent-IC usercould not be parsed (or was too large).", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response171>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response171>("Agent-IC user {userId} not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response169);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        /// <summary>Delete Agent-IC User</summary>
        /// <param name="userId">The agent-ic user id to be deleted</param>
        /// <returns>Deletion confirmation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response172> DeleteAgentICUserAsync(int userId)
        {
            return DeleteAgentICUserAsync(userId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Delete Agent-IC User</summary>
        /// <param name="userId">The agent-ic user id to be deleted</param>
        /// <returns>Deletion confirmation</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response172> DeleteAgentICUserAsync(int userId, System.Threading.CancellationToken cancellationToken)
        {
            if (userId == null)
                throw new System.ArgumentNullException("userId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/ivpusers/{userId}");
            urlBuilder_.Replace("{userId}", System.Uri.EscapeDataString(ConvertToString(userId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response172>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "404")
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response173>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response173>("Agent-IC user {userId} not found", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(Response172);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    return System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                }
            }
            else if (value is bool)
            {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }

    /// <summary>Retrieve capability for this {deviceType}.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DeviceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HMS-4X")]
        HMS4X = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4W2")]
        LQ4W2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-2W2")]
        LQ2W2 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4WG2")]
        LQ4WG2 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R4W8")]
        LQR4W8 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R2W4")]
        LQR2W4 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R2W4-4W4")]
        LQR2W44W4 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R4WG8")]
        LQR4WG8 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R2W2-4WG2")]
        LQR2W24WG2 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R2W4-4WG4")]
        LQR2W44WG4 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII")]
        FSII = 10,

    }

    /// <summary>Retrieve capability for this {connectionType}.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ConnectionType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"partyline")]
        Partyline = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"direct")]
        Direct = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 2,

    }

    /// <summary>Retrieve capability for this {deviceType}.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum InterfaceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"FSII-2W")]
        FSII2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-4W")]
        FSII4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HLI-2W")]
        HLI2W = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HLI-4W")]
        HLI4W = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-2W")]
        LQ2W = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4W")]
        LQ4W = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4WG")]
        LQ4WG = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-IVC")]
        LQIVC = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LQ_FSII
    {
        /// <summary>A human readable name for the device</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>The front panel display brightness (higher is brighter). LQ specific.</summary>
        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LQ_FSIIDisplayBrightness? DisplayBrightness { get; set; }

        /// <summary>PIN to unlock administration options on FSII-BP.</summary>
        [Newtonsoft.Json.JsonProperty("adminPin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        public string AdminPin { get; set; }

        /// <summary>PIN to register beltpacks Over-The-Air.</summary>
        [Newtonsoft.Json.JsonProperty("otaPin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        public string OtaPin { get; set; }

        /// <summary>The systems wireless id to link beltpacks to.</summary>
        [Newtonsoft.Json.JsonProperty("wirelessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(3, MinimumLength = 3)]
        public string WirelessId { get; set; }

        /// <summary>Battery type inside the FSII-BP attached to this Base Station. This is used for battery level indication.</summary>
        [Newtonsoft.Json.JsonProperty("aaBatteryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LQ_FSIIAaBatteryType? AaBatteryType { get; set; }

        /// <summary>Sorting used for role names sent to beltpacks.</summary>
        [Newtonsoft.Json.JsonProperty("roleSorting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LQ_FSIIRoleSorting? RoleSorting { get; set; }

        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(4)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Keysets> Keysets { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HMS
    {
        /// <summary>A human readable name for the device</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Update
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class License
    {
        /// <summary>Numeric string provided by Clear-Com to unlock licensed features.</summary>
        [Newtonsoft.Json.JsonProperty("licensePasscode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"([0-9A-F]{16})?")]
        public string LicensePasscode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Features
    {
        /// <summary>The list of features to activate with this ticket.</summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Features2> Features1 { get; set; } = new System.Collections.ObjectModel.Collection<Features2>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Config
    {
        /// <summary>disabled: Will not advertise itself as Link-Master or accept any connection. linkMaster: Will advertise itself as a Link-Master and accept Link-Members. linkMember: Will try to join the link group through the Link-Master.</summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConfigMode Mode { get; set; }

        /// <summary>IP address or name of the master to connect. Required when configured as Link-Member.</summary>
        [Newtonsoft.Json.JsonProperty("masterIp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MasterIp MasterIp { get; set; }

        /// <summary>HTTP port to use to connect to the master.</summary>
        [Newtonsoft.Json.JsonProperty("masterMgmtPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int? MasterMgmtPort { get; set; }

        /// <summary>The slot where the device joins the link-group. This will match the new device's device_id field.</summary>
        [Newtonsoft.Json.JsonProperty("slotId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 6)]
        public int? SlotId { get; set; }

        /// <summary>Deprecated</summary>
        [Newtonsoft.Json.JsonProperty("deleteDB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DeleteDB { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Ota
    {
        /// <summary>Set this field to 1 to start the OTA.</summary>
        [Newtonsoft.Json.JsonProperty("OTAState", Required = Newtonsoft.Json.Required.Always)]
        public OTAState OTAState { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Reboot
    {
        /// <summary>HelixNet only. Reboot all attached endpoints and ports.</summary>
        [Newtonsoft.Json.JsonProperty("all", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? All { get; set; }

        /// <summary>HelixNet only. Delay in seconds before rebooting, immediate reboot if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("delay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Delay { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Resettodefault
    {
        /// <summary>HelixNet only. If set to true, will reset Roles and Connections to their default values.</summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? System { get; set; }

        /// <summary>HelixNet only. If set to true, will reset the HMS-4X internal configuration (including network settings).</summary>
        [Newtonsoft.Json.JsonProperty("local", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Local { get; set; }

        /// <summary>HelixNet only. If set to true, will reset all currently paired endpoints.</summary>
        [Newtonsoft.Json.JsonProperty("endpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Endpoints { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Setnetmode
    {
        /// <summary>LQ only. Configures the tunneling mode. LAN is less resource intensive but will not work with routers.</summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SetnetmodeMode Mode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Setupnetwork
    {
        [Newtonsoft.Json.JsonProperty("network", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Network Network { get; set; } = new Network();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FSIIAntennaSettings
    {
        /// <summary>Configure the synchronization offset based on the cable length:
        /// * 1 -&gt; 0 - 69m
        /// * 2 -&gt; 70 - 139m
        /// * 3 -&gt; 140 - 209m
        /// * 4 -&gt; 210 - 279m
        /// * 5 -&gt; 280 - 349m
        /// * 6 -&gt; 350 - 419m
        /// * 7 -&gt; 420 - 489m
        /// * 8 -&gt; 490 - 559m
        /// * 9 -&gt; 560 - 629m
        /// * 10 -&gt; 630 - 699m
        /// * 11 -&gt; 700 - 769m
        /// * 12 -&gt; 770 - 839m
        /// * 13 -&gt; 840 - 909m
        /// * 14 -&gt; 910 - 979m
        /// * 15 -&gt; 980 - 1049m
        /// * 16 -&gt; 1050 - 1119m
        /// * 17 -&gt; 1120 - 1189m
        /// * 18 -&gt; 1190 - 1259m
        /// * 19 -&gt; 1260 - 1329m
        /// * 20 -&gt; 1330 - 1399m
        /// * 21 -&gt; 1400 - 1469m
        /// * 22 -&gt; 1470 - 1539m
        /// * 23 -&gt; 1540 - 1609m</summary>
        [Newtonsoft.Json.JsonProperty("syncOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 23)]
        public int? SyncOffset { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FSIIBPSettings
    {
        /// <summary>The endpoint's default role id.</summary>
        [Newtonsoft.Json.JsonProperty("default_role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Default_role { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Update2
    {
        /// <summary>Endpoint label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings Settings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Params
    {
        /// <summary>The role id to use for the endpoint</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Params2
    {
        /// <summary>Set the mute for the LS</summary>
        [Newtonsoft.Json.JsonProperty("lsCut", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LsCut { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Reboot2
    {
        /// <summary>HelixNet only. Reboot all attached endpoints and ports.</summary>
        [Newtonsoft.Json.JsonProperty("all", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? All { get; set; }

        /// <summary>HelixNet only. Delay in seconds before rebooting, immediate reboot if not specified.</summary>
        [Newtonsoft.Json.JsonProperty("delay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Delay { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Resettodefault2
    {
        /// <summary>HelixNet only. If set to true, will reset Roles and Connections to their default values.</summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? System { get; set; }

        /// <summary>HelixNet only. If set to true, will reset the HMS-4X internal configuration (including network settings).</summary>
        [Newtonsoft.Json.JsonProperty("local", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Local { get; set; }

        /// <summary>HelixNet only. If set to true, will reset all currently paired endpoints.</summary>
        [Newtonsoft.Json.JsonProperty("endpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Endpoints { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IVCDevice
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IVCDeviceType Type { get; set; }

        /// <summary>Label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings2 Settings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SIPServer
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SIPServerType Type { get; set; }

        /// <summary>Label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings3 Settings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Add
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IVCDevice2
    {
        /// <summary>The device identification label.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings4 Settings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SIPServer2
    {
        /// <summary>The SIP server identification label.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings5 Settings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Params3
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IVC32PortSettings
    {
        /// <summary>IVC32 port login name.</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        public string Login { get; set; }

        /// <summary>IVC32 port password.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Password { get; set; }

        /// <summary>Device id to which this external port is assigned or 0 if unassigned.</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SIPLineSettings
    {
        /// <summary>SIP user as part of the SIP URI.</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Login { get; set; }

        /// <summary>SIP password to register the user.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>Device id to which this external port is assigned or 0 if unassigned.</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Add2
    {
        /// <summary>External port label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        public Settings6 Settings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IVC32PortSettings2
    {
        /// <summary>IVC32 port login name.</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        public string Login { get; set; }

        /// <summary>IVC32 port password.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Password { get; set; }

        /// <summary>Device id to which this external port is assigned or 0 if unassigned.</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SIPLineSettings2
    {
        /// <summary>SIP user as part of the SIP URI.</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Login { get; set; }

        /// <summary>SIP password to register the user.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>Device id to which this external port is assigned or 0 if unassigned.</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Update3
    {
        /// <summary>Label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings7 Settings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Params4
    {
        /// <summary>Old password.</summary>
        [Newtonsoft.Json.JsonProperty("oldPassword", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OldPassword { get; set; }

        /// <summary>New password.</summary>
        [Newtonsoft.Json.JsonProperty("newPassword", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NewPassword { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Update4
    {
        /// <summary>Enable or disable power output on the 2W interface.</summary>
        [Newtonsoft.Json.JsonProperty("power", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Power { get; set; }

        /// <summary>Set the 2W mode.</summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Update4Mode? Mode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Put
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Res { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("termination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Termination { get; set; }

        [Newtonsoft.Json.JsonProperty("inputGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? InputGain { get; set; }

        [Newtonsoft.Json.JsonProperty("outputGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? OutputGain { get; set; }

        [Newtonsoft.Json.JsonProperty("multiChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MultiChannel { get; set; }

        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vox Vox { get; set; }

        [Newtonsoft.Json.JsonProperty("networkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkQuality NetworkQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("externalNetworkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PutExternalNetworkQuality? ExternalNetworkQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("externalSilenceSuppression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExternalSilenceSuppression { get; set; }

        [Newtonsoft.Json.JsonProperty("silenceSupp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SilenceSupp { get; set; }

        [Newtonsoft.Json.JsonProperty("pinout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PutPinout? Pinout { get; set; }

        [Newtonsoft.Json.JsonProperty("serial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial Serial { get; set; }

        [Newtonsoft.Json.JsonProperty("micLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MicLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("gpis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gpis> Gpis { get; set; }

        [Newtonsoft.Json.JsonProperty("gpos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gpos> Gpos { get; set; }

        [Newtonsoft.Json.JsonProperty("callSignal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CallSignal { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("headsetMicType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PutHeadsetMicType? HeadsetMicType { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PutSidetoneControl? SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmOutputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PgmOutputEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PutMode? Mode { get; set; }

        [Newtonsoft.Json.JsonProperty("gpoTriggerEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GpoTriggerEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkInputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RmkInputEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkOutputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RmkOutputEnabled { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Put2
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Res { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("termination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Termination { get; set; }

        [Newtonsoft.Json.JsonProperty("inputGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? InputGain { get; set; }

        [Newtonsoft.Json.JsonProperty("outputGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? OutputGain { get; set; }

        [Newtonsoft.Json.JsonProperty("multiChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MultiChannel { get; set; }

        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vox2 Vox { get; set; }

        [Newtonsoft.Json.JsonProperty("networkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkQuality2 NetworkQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("externalNetworkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Put2ExternalNetworkQuality? ExternalNetworkQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("externalSilenceSuppression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExternalSilenceSuppression { get; set; }

        [Newtonsoft.Json.JsonProperty("silenceSupp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SilenceSupp { get; set; }

        [Newtonsoft.Json.JsonProperty("pinout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Put2Pinout? Pinout { get; set; }

        [Newtonsoft.Json.JsonProperty("serial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial2 Serial { get; set; }

        [Newtonsoft.Json.JsonProperty("micLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MicLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("gpis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gpis2> Gpis { get; set; }

        [Newtonsoft.Json.JsonProperty("gpos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gpos2> Gpos { get; set; }

        [Newtonsoft.Json.JsonProperty("callSignal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CallSignal { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("headsetMicType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Put2HeadsetMicType? HeadsetMicType { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Put2SidetoneControl? SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmOutputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PgmOutputEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Put2Mode? Mode { get; set; }

        [Newtonsoft.Json.JsonProperty("gpoTriggerEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GpoTriggerEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkInputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RmkInputEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkOutputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RmkOutputEnabled { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Params5
    {
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }

        [Newtonsoft.Json.JsonProperty("timeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Timeout { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous
    {
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Target { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous2
    {
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Target { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Params6
    {
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Uri { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Dtmf
    {
        [Newtonsoft.Json.JsonProperty("dtmf", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Dtmf1 { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Add3
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Add3Type Type { get; set; }

        /// <summary>Connection label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Params7
    {
        /// <summary>Connection label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous3
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsDefault? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings8 Settings { get; set; } = new Settings8();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HMS4XSettings
    {
        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HMS4XSettingsDisplayBrightness? DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("keyBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HMS4XSettingsKeyBrightness? KeyBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("screensaverMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HMS4XSettingsScreensaverMode? ScreensaverMode { get; set; }

        [Newtonsoft.Json.JsonProperty("menuAccessEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MenuAccessEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("allTalkBtnMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HMS4XSettingsAllTalkBtnMode? AllTalkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkBtnMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HMS4XSettingsRmkBtnMode? RmkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(4)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Keysets2> Keysets { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-18, 0)]
        public int? SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HMS4XSettingsSidetoneControl? SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HMS4XSettingsHeadphoneLimit? HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 12)]
        public int? HeadphoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("headsetMicType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HMS4XSettingsHeadsetMicType? HeadsetMicType { get; set; }

        [Newtonsoft.Json.JsonProperty("micHeadroom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HMS4XSettingsMicHeadroom? MicHeadroom { get; set; }

        [Newtonsoft.Json.JsonProperty("micContourFilterEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MicContourFilterEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PgmLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? PgmGain { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmVoxEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PgmVoxEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmGpoTriggerEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PgmGpoTriggerEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmVoxOffDelayMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(500, 4000)]
        public int? PgmVoxOffDelayMs { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmIfbDimLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-80, 0)]
        public int? PgmIfbDimLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmAssignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PgmAssignments> PgmAssignments { get; set; }

        [Newtonsoft.Json.JsonProperty("saLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("saGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? SaGain { get; set; }

        [Newtonsoft.Json.JsonProperty("saBtnLatchEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SaBtnLatchEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("hotMicGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? HotMicGain { get; set; }

        [Newtonsoft.Json.JsonProperty("loudspeakerDimLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-24, 0)]
        public int? LoudspeakerDimLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("gpios", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gpios> Gpios { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HRM4XSettings
    {
        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HRM4XSettingsDisplayBrightness? DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("keyBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HRM4XSettingsKeyBrightness? KeyBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("screensaverMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HRM4XSettingsScreensaverMode? ScreensaverMode { get; set; }

        [Newtonsoft.Json.JsonProperty("menuAccessEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MenuAccessEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("allTalkBtnMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HRM4XSettingsAllTalkBtnMode? AllTalkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkBtnMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HRM4XSettingsRmkBtnMode? RmkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(4)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Keysets3> Keysets { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-18, 0)]
        public int? SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HRM4XSettingsSidetoneControl? SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HRM4XSettingsHeadphoneLimit? HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 12)]
        public int? HeadphoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("headsetMicType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HRM4XSettingsHeadsetMicType? HeadsetMicType { get; set; }

        [Newtonsoft.Json.JsonProperty("micHeadroom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HRM4XSettingsMicHeadroom? MicHeadroom { get; set; }

        [Newtonsoft.Json.JsonProperty("micContourFilterEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MicContourFilterEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PgmLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? PgmGain { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmVoxEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PgmVoxEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmGpoTriggerEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PgmGpoTriggerEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmVoxOffDelayMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(500, 4000)]
        public int? PgmVoxOffDelayMs { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmIfbDimLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-80, 0)]
        public int? PgmIfbDimLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmAssignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PgmAssignments2> PgmAssignments { get; set; }

        [Newtonsoft.Json.JsonProperty("saLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("saGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? SaGain { get; set; }

        [Newtonsoft.Json.JsonProperty("saBtnLatchEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SaBtnLatchEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("saConnectionAssignModeEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SaConnectionAssignModeEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("saConnectionAssignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SaConnectionAssignments> SaConnectionAssignments { get; set; }

        [Newtonsoft.Json.JsonProperty("saPgmOutputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SaPgmOutputEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("hotMicGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? HotMicGain { get; set; }

        [Newtonsoft.Json.JsonProperty("loudspeakerDimLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HRM4XSettingsLoudspeakerDimLevel? LoudspeakerDimLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("gpios", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gpios2> Gpios { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HKB2XSettings
    {
        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HKB2XSettingsDisplayBrightness? DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("keyBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HKB2XSettingsKeyBrightness? KeyBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("screensaverMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HKB2XSettingsScreensaverMode? ScreensaverMode { get; set; }

        [Newtonsoft.Json.JsonProperty("unlatchOnShiftEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnlatchOnShiftEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("menuAccessEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MenuAccessEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(4)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Keysets4> Keysets { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-18, 0)]
        public int? SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HKB2XSettingsSidetoneControl? SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HKB2XSettingsHeadphoneLimit? HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 12)]
        public int? HeadphoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("headsetMicType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HKB2XSettingsHeadsetMicType? HeadsetMicType { get; set; }

        [Newtonsoft.Json.JsonProperty("micHeadroom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HKB2XSettingsMicHeadroom? MicHeadroom { get; set; }

        [Newtonsoft.Json.JsonProperty("micContourFilterEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MicContourFilterEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("loudspeakerDimLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-24, 0)]
        public int? LoudspeakerDimLevel { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HBP2XSettings
    {
        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HBP2XSettingsDisplayBrightness? DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("keyBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HBP2XSettingsKeyBrightness? KeyBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("screensaverMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HBP2XSettingsScreensaverMode? ScreensaverMode { get; set; }

        [Newtonsoft.Json.JsonProperty("menuAccessEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MenuAccessEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("rotateDisplayEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RotateDisplayEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("vibrateOnCallEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VibrateOnCallEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(2)]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public System.Collections.Generic.ICollection<Keysets5> Keysets { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-18, 0)]
        public int? SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HBP2XSettingsSidetoneControl? SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HBP2XSettingsHeadphoneLimit? HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 12)]
        public int? HeadphoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("headsetMicType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HBP2XSettingsHeadsetMicType? HeadsetMicType { get; set; }

        [Newtonsoft.Json.JsonProperty("micHeadroom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HBP2XSettingsMicHeadroom? MicHeadroom { get; set; }

        [Newtonsoft.Json.JsonProperty("micContourFilterEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MicContourFilterEnabled { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FSIIBPSettings2
    {
        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(5)]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public System.Collections.Generic.ICollection<Keysets6> Keysets { get; set; }

        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Groups> Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 8)]
        public int? HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FSIIBPSettings2SidetoneControl? SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("masterVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MasterVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("lineInVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-15, 6)]
        public int? LineInVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("portInputGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-70, 15)]
        public int? PortInputGain { get; set; }

        [Newtonsoft.Json.JsonProperty("portOutputGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-70, 15)]
        public int? PortOutputGain { get; set; }

        [Newtonsoft.Json.JsonProperty("micEchoCancellation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MicEchoCancellation { get; set; }

        [Newtonsoft.Json.JsonProperty("masterVolumeOperation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MasterVolumeOperation { get; set; }

        [Newtonsoft.Json.JsonProperty("batteryAlarmMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FSIIBPSettings2BatteryAlarmMode? BatteryAlarmMode { get; set; }

        [Newtonsoft.Json.JsonProperty("lowBatteryThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 100)]
        public int? LowBatteryThreshold { get; set; }

        [Newtonsoft.Json.JsonProperty("callAlertMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FSIIBPSettings2CallAlertMode? CallAlertMode { get; set; }

        [Newtonsoft.Json.JsonProperty("outOfRangeAlarm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FSIIBPSettings2OutOfRangeAlarm? OutOfRangeAlarm { get; set; }

        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FSIIBPSettings2DisplayBrightness? DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("displayDimTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 120)]
        public int? DisplayDimTimeout { get; set; }

        [Newtonsoft.Json.JsonProperty("displayOffTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(5, 120)]
        public int? DisplayOffTimeout { get; set; }

        [Newtonsoft.Json.JsonProperty("listenAgainAutoDelete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 240)]
        public int? ListenAgainAutoDelete { get; set; }

        [Newtonsoft.Json.JsonProperty("listenAgainRecordTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 15)]
        public int? ListenAgainRecordTime { get; set; }

        [Newtonsoft.Json.JsonProperty("replyTalkAutoClear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 60)]
        public int? ReplyTalkAutoClear { get; set; }

        [Newtonsoft.Json.JsonProperty("menuLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FSIIBPSettings2MenuLevel? MenuLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("latchingTalkKeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LatchingTalkKeys { get; set; }

        [Newtonsoft.Json.JsonProperty("dimmedTallies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DimmedTallies { get; set; }

        [Newtonsoft.Json.JsonProperty("partyLineDisplayMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartyLineDisplayMode { get; set; }

        [Newtonsoft.Json.JsonProperty("menuKeyMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FSIIBPSettings2MenuKeyMode? MenuKeyMode { get; set; }

        [Newtonsoft.Json.JsonProperty("eavesdropping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Eavesdropping { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLowLevelLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FSIIBPSettings2HeadphoneLowLevelLimit? HeadphoneLowLevelLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("micType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FSIIBPSettings2MicType? MicType { get; set; }

        [Newtonsoft.Json.JsonProperty("useLocalSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseLocalSettings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LQAICSettings
    {
        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(24)]
        public System.Collections.Generic.ICollection<Keysets7> Keysets { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HMS4XRole
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HMS4XRoleType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HMS4XRoleIsDefault? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings9 Settings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HRM4XRole
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HRM4XRoleType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HRM4XRoleIsDefault? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings10 Settings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HKB2XRole
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HKB2XRoleType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HKB2XRoleIsDefault? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings11 Settings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class HBP2XRole
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public HBP2XRoleType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HBP2XRoleIsDefault? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings12 Settings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class FSIIBPRole
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FSIIBPRoleType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FSIIBPRoleIsDefault? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings13 Settings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LQAICRole
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LQAICRoleType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LQAICRoleIsDefault? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings14 Settings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Update5
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Params8
    {
        /// <summary>Agent-IC user label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label { get; set; }

        /// <summary>Type identifier.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Params8Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings15 Settings { get; set; } = new Settings15();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Params9
    {
        /// <summary>Agent-IC user label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings16 Settings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous4
    {
        /// <summary>Currently supported devices enumeration.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type2 Type { get; set; }

        /// <summary>Can the device be used in a stack (either base or expansion).</summary>
        [Newtonsoft.Json.JsonProperty("stackable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Stackable { get; set; }

        /// <summary>Does the device support psu monitoring.</summary>
        [Newtonsoft.Json.JsonProperty("psuMonitoring", Required = Newtonsoft.Json.Required.Always)]
        public bool PsuMonitoring { get; set; }

        /// <summary>Does the device handle webSocket connections.</summary>
        [Newtonsoft.Json.JsonProperty("webSocket", Required = Newtonsoft.Json.Required.Always)]
        public bool WebSocket { get; set; }

        /// <summary>Maximum name length allowed when naming the Device.</summary>
        [Newtonsoft.Json.JsonProperty("labelLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int LabelLength { get; set; }

        /// <summary>Device's level of Role support.</summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Roles Roles { get; set; }

        /// <summary>Does the device support endpoints.</summary>
        [Newtonsoft.Json.JsonProperty("endpoints", Required = Newtonsoft.Json.Required.Always)]
        public bool Endpoints { get; set; }

        /// <summary>Does the device support save and restore.</summary>
        [Newtonsoft.Json.JsonProperty("saveRestore", Required = Newtonsoft.Json.Required.Always)]
        public bool SaveRestore { get; set; }

        /// <summary>Firmware properties supported by the device.</summary>
        [Newtonsoft.Json.JsonProperty("upgrade", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Upgrade Upgrade { get; set; } = new Upgrade();

        /// <summary>Network properties supported by the device.</summary>
        [Newtonsoft.Json.JsonProperty("network", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Network2 Network { get; set; } = new Network2();

        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Icon Icon { get; set; } = new Icon();

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Connections Connections { get; set; }

        [Newtonsoft.Json.JsonProperty("licensing", Required = Newtonsoft.Json.Required.Always)]
        public bool Licensing { get; set; }

        [Newtonsoft.Json.JsonProperty("linking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Linking Linking { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Events> Events { get; set; }

        [Newtonsoft.Json.JsonProperty("externalDevices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalDevices> ExternalDevices { get; set; }

        /// <summary>The types of IVP users supported in the link group</summary>
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Users> Users { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response
    {
        /// <summary>Currently supported devices enumeration.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ResponseType Type { get; set; }

        /// <summary>Can the device be used in a stack (either base or expansion).</summary>
        [Newtonsoft.Json.JsonProperty("stackable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Stackable { get; set; }

        /// <summary>Does the device support psu monitoring.</summary>
        [Newtonsoft.Json.JsonProperty("psuMonitoring", Required = Newtonsoft.Json.Required.Always)]
        public bool PsuMonitoring { get; set; }

        /// <summary>Does the device handle webSocket connections.</summary>
        [Newtonsoft.Json.JsonProperty("webSocket", Required = Newtonsoft.Json.Required.Always)]
        public bool WebSocket { get; set; }

        /// <summary>Maximum name length allowed when naming the Device.</summary>
        [Newtonsoft.Json.JsonProperty("labelLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int LabelLength { get; set; }

        /// <summary>Device's level of Role support.</summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Roles2 Roles { get; set; }

        /// <summary>Does the device support endpoints.</summary>
        [Newtonsoft.Json.JsonProperty("endpoints", Required = Newtonsoft.Json.Required.Always)]
        public bool Endpoints { get; set; }

        /// <summary>Does the device support save and restore.</summary>
        [Newtonsoft.Json.JsonProperty("saveRestore", Required = Newtonsoft.Json.Required.Always)]
        public bool SaveRestore { get; set; }

        /// <summary>Firmware properties supported by the device.</summary>
        [Newtonsoft.Json.JsonProperty("upgrade", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Upgrade2 Upgrade { get; set; } = new Upgrade2();

        /// <summary>Network properties supported by the device.</summary>
        [Newtonsoft.Json.JsonProperty("network", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Network3 Network { get; set; } = new Network3();

        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Icon2 Icon { get; set; } = new Icon2();

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Connections2 Connections { get; set; }

        [Newtonsoft.Json.JsonProperty("licensing", Required = Newtonsoft.Json.Required.Always)]
        public bool Licensing { get; set; }

        [Newtonsoft.Json.JsonProperty("linking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Linking2 Linking { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Events2> Events { get; set; }

        [Newtonsoft.Json.JsonProperty("externalDevices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalDevices2> ExternalDevices { get; set; }

        /// <summary>The types of IVP users supported in the link group</summary>
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Users2> Users { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response2
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous5
    {
        /// <summary>Currently supported connections enumeration.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type3 Type { get; set; }

        /// <summary>Maximum name length allowed when naming the Connection.</summary>
        [Newtonsoft.Json.JsonProperty("labelLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int LabelLength { get; set; }

        /// <summary>Returns the maximum numbers of allowed connections.</summary>
        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Max { get; set; }

        /// <summary>Indicate if the list of connections is editable.</summary>
        [Newtonsoft.Json.JsonProperty("dynamic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Dynamic { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response3
    {
        /// <summary>Currently supported connections enumeration.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Response3Type Type { get; set; }

        /// <summary>Maximum name length allowed when naming the Connection.</summary>
        [Newtonsoft.Json.JsonProperty("labelLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int LabelLength { get; set; }

        /// <summary>Returns the maximum numbers of allowed connections.</summary>
        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Max { get; set; }

        /// <summary>Indicate if the list of connections is editable.</summary>
        [Newtonsoft.Json.JsonProperty("dynamic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Dynamic { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response4
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous6
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type4 Type { get; set; }

        [Newtonsoft.Json.JsonProperty("fec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fec { get; set; }

        [Newtonsoft.Json.JsonProperty("networkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NetworkQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Vox3> Vox { get; set; }

        [Newtonsoft.Json.JsonProperty("power", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Power { get; set; }

        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Mode { get; set; }

        [Newtonsoft.Json.JsonProperty("termination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Termination { get; set; }

        [Newtonsoft.Json.JsonProperty("callSignal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CallSignal { get; set; }

        [Newtonsoft.Json.JsonProperty("portFunction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PortFunction { get; set; }

        [Newtonsoft.Json.JsonProperty("baudRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BaudRate { get; set; }

        [Newtonsoft.Json.JsonProperty("gpio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Gpio { get; set; }

        [Newtonsoft.Json.JsonProperty("twoWayRadio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TwoWayRadio { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response5
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Response5Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("fec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fec { get; set; }

        [Newtonsoft.Json.JsonProperty("networkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NetworkQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Vox4> Vox { get; set; }

        [Newtonsoft.Json.JsonProperty("power", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Power { get; set; }

        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Mode { get; set; }

        [Newtonsoft.Json.JsonProperty("termination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Termination { get; set; }

        [Newtonsoft.Json.JsonProperty("callSignal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CallSignal { get; set; }

        [Newtonsoft.Json.JsonProperty("portFunction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PortFunction { get; set; }

        [Newtonsoft.Json.JsonProperty("baudRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BaudRate { get; set; }

        [Newtonsoft.Json.JsonProperty("gpio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Gpio { get; set; }

        [Newtonsoft.Json.JsonProperty("twoWayRadio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TwoWayRadio { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response6
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response7
    {
        /// <summary>The types of connections supported in the link group</summary>
        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Connections3> Connections { get; set; }

        /// <summary>The types of external systems supported in the link group</summary>
        [Newtonsoft.Json.JsonProperty("externalSystems", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalSystems> ExternalSystems { get; set; }

        /// <summary>The types of IVP users supported in the link group</summary>
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Users3> Users { get; set; }

        /// <summary>The types of roles supported in the link group</summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Roles3> Roles { get; set; }

        /// <summary>The types of network optimization supported in the link group</summary>
        [Newtonsoft.Json.JsonProperty("networkOptimization", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NetworkOptimization> NetworkOptimization { get; set; }

        [Newtonsoft.Json.JsonProperty("maxRoles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxRoles { get; set; }

        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Response7Codec? Codec { get; set; }

        [Newtonsoft.Json.JsonProperty("showConnectionBridgeOptionsIcon", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowConnectionBridgeOptionsIcon { get; set; }

        [Newtonsoft.Json.JsonProperty("showNetworkExternalConnectivitySection", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ShowNetworkExternalConnectivitySection { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Version
    {
        [Newtonsoft.Json.JsonProperty("apiVersion", Required = Newtonsoft.Json.Required.Always)]
        public int ApiVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("serverName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerName { get; set; }

        [Newtonsoft.Json.JsonProperty("serverVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerVersion { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous7
    {
        /// <summary>The device id in the link group. This is the slot position selected during linking.</summary>
        [Newtonsoft.Json.JsonProperty("device_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Device_id { get; set; }

        /// <summary>The device identification label</summary>
        [Newtonsoft.Json.JsonProperty("device_label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue)]
        public string Device_label { get; set; }

        /// <summary>The device's current IP address.</summary>
        [Newtonsoft.Json.JsonProperty("device_ipAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Device_ipAddress { get; set; }

        /// <summary>true if this is device where the request was sent.</summary>
        [Newtonsoft.Json.JsonProperty("isHost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHost { get; set; }

        /// <summary>The device type code name.</summary>
        [Newtonsoft.Json.JsonProperty("deviceType_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeviceType_name { get; set; }

        /// <summary>Device Universally Unique Identifier. It will not change even if device_id changes.</summary>
        [Newtonsoft.Json.JsonProperty("device_uuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        public string Device_uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("device_settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Device_settings Device_settings { get; set; }

        [Newtonsoft.Json.JsonProperty("device_isMaster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Device_isMaster { get; set; }

        [Newtonsoft.Json.JsonProperty("device_linking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Device_linking? Device_linking { get; set; }

        [Newtonsoft.Json.JsonProperty("device_masterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Device_masterId { get; set; }

        [Newtonsoft.Json.JsonProperty("device_masterStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Device_masterStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("device_masterAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Device_masterAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("device_masterPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Device_masterPort { get; set; }

        [Newtonsoft.Json.JsonProperty("device_netMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Device_netMode Device_netMode { get; set; }

        [Newtonsoft.Json.JsonProperty("device_usage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Device_usage { get; set; }

        [Newtonsoft.Json.JsonProperty("device_isReachable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Device_isReachable { get; set; }

        [Newtonsoft.Json.JsonProperty("device_versionSW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Device_versionSW { get; set; }

        [Newtonsoft.Json.JsonProperty("versionSW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionSW { get; set; }

        [Newtonsoft.Json.JsonProperty("versionHW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionHW { get; set; }

        [Newtonsoft.Json.JsonProperty("linkingVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LinkingVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("device_dver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Device_dver { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Res { get; set; }

        [Newtonsoft.Json.JsonProperty("hxIIBPversionSW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HxIIBPversionSW { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Role Role { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("device_liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Device_liveStatus Device_liveStatus { get; set; }

        /// <summary>The system ID as a numeric string for licensing purpose.</summary>
        [Newtonsoft.Json.JsonProperty("systemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9A-F]{6}")]
        public string SystemId { get; set; }

        /// <summary>The current license passcode provided by Clear-Com for the systemId.</summary>
        [Newtonsoft.Json.JsonProperty("licensePasscode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9A-F]{16}")]
        public string LicensePasscode { get; set; }

        /// <summary>A serial number which uniquely identifies the device for license purpose.</summary>
        [Newtonsoft.Json.JsonProperty("licenseSerialNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseSerialNo { get; set; }

        /// <summary>The feature list enabled by the current license passcode (HelixNet and FS-II) or license activations (LQ).</summary>
        [Newtonsoft.Json.JsonProperty("licensedFeatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LicensedFeatures> LicensedFeatures { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response8
    {
        /// <summary>The device id in the link group. This is the slot position selected during linking.</summary>
        [Newtonsoft.Json.JsonProperty("device_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Device_id { get; set; }

        /// <summary>The device identification label</summary>
        [Newtonsoft.Json.JsonProperty("device_label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue)]
        public string Device_label { get; set; }

        /// <summary>The device's current IP address.</summary>
        [Newtonsoft.Json.JsonProperty("device_ipAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Device_ipAddress { get; set; }

        /// <summary>true if this is device where the request was sent.</summary>
        [Newtonsoft.Json.JsonProperty("isHost", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsHost { get; set; }

        /// <summary>The device type code name.</summary>
        [Newtonsoft.Json.JsonProperty("deviceType_name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DeviceType_name { get; set; }

        /// <summary>Device Universally Unique Identifier. It will not change even if device_id changes.</summary>
        [Newtonsoft.Json.JsonProperty("device_uuid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}")]
        public string Device_uuid { get; set; }

        [Newtonsoft.Json.JsonProperty("device_settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Device_settings2 Device_settings { get; set; }

        [Newtonsoft.Json.JsonProperty("device_isMaster", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Device_isMaster { get; set; }

        [Newtonsoft.Json.JsonProperty("device_linking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Response8Device_linking? Device_linking { get; set; }

        [Newtonsoft.Json.JsonProperty("device_masterId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Device_masterId { get; set; }

        [Newtonsoft.Json.JsonProperty("device_masterStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Device_masterStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("device_masterAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Device_masterAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("device_masterPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Device_masterPort { get; set; }

        [Newtonsoft.Json.JsonProperty("device_netMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Response8Device_netMode Device_netMode { get; set; }

        [Newtonsoft.Json.JsonProperty("device_usage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Device_usage { get; set; }

        [Newtonsoft.Json.JsonProperty("device_isReachable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Device_isReachable { get; set; }

        [Newtonsoft.Json.JsonProperty("device_versionSW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Device_versionSW { get; set; }

        [Newtonsoft.Json.JsonProperty("versionSW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionSW { get; set; }

        [Newtonsoft.Json.JsonProperty("versionHW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionHW { get; set; }

        [Newtonsoft.Json.JsonProperty("linkingVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LinkingVersion { get; set; }

        [Newtonsoft.Json.JsonProperty("device_dver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Device_dver { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Res { get; set; }

        [Newtonsoft.Json.JsonProperty("hxIIBPversionSW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HxIIBPversionSW { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Role2 Role { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("device_liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Device_liveStatus2 Device_liveStatus { get; set; }

        /// <summary>The system ID as a numeric string for licensing purpose.</summary>
        [Newtonsoft.Json.JsonProperty("systemId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9A-F]{6}")]
        public string SystemId { get; set; }

        /// <summary>The current license passcode provided by Clear-Com for the systemId.</summary>
        [Newtonsoft.Json.JsonProperty("licensePasscode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"[0-9A-F]{16}")]
        public string LicensePasscode { get; set; }

        /// <summary>A serial number which uniquely identifies the device for license purpose.</summary>
        [Newtonsoft.Json.JsonProperty("licenseSerialNo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LicenseSerialNo { get; set; }

        /// <summary>The feature list enabled by the current license passcode (HelixNet and FS-II) or license activations (LQ).</summary>
        [Newtonsoft.Json.JsonProperty("licensedFeatures", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LicensedFeatures2> LicensedFeatures { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response9
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response10
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response11
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response12
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response13
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response14
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response15
    {
        /// <summary>Currently supported devices enumeration.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Response15Type Type { get; set; }

        /// <summary>Can the device be used in a stack (either base or expansion).</summary>
        [Newtonsoft.Json.JsonProperty("stackable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Stackable { get; set; }

        /// <summary>Does the device support psu monitoring.</summary>
        [Newtonsoft.Json.JsonProperty("psuMonitoring", Required = Newtonsoft.Json.Required.Always)]
        public bool PsuMonitoring { get; set; }

        /// <summary>Does the device handle webSocket connections.</summary>
        [Newtonsoft.Json.JsonProperty("webSocket", Required = Newtonsoft.Json.Required.Always)]
        public bool WebSocket { get; set; }

        /// <summary>Maximum name length allowed when naming the Device.</summary>
        [Newtonsoft.Json.JsonProperty("labelLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int LabelLength { get; set; }

        /// <summary>Device's level of Role support.</summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Roles4 Roles { get; set; }

        /// <summary>Does the device support endpoints.</summary>
        [Newtonsoft.Json.JsonProperty("endpoints", Required = Newtonsoft.Json.Required.Always)]
        public bool Endpoints { get; set; }

        /// <summary>Does the device support save and restore.</summary>
        [Newtonsoft.Json.JsonProperty("saveRestore", Required = Newtonsoft.Json.Required.Always)]
        public bool SaveRestore { get; set; }

        /// <summary>Firmware properties supported by the device.</summary>
        [Newtonsoft.Json.JsonProperty("upgrade", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Upgrade3 Upgrade { get; set; } = new Upgrade3();

        /// <summary>Network properties supported by the device.</summary>
        [Newtonsoft.Json.JsonProperty("network", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Network4 Network { get; set; } = new Network4();

        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Icon3 Icon { get; set; } = new Icon3();

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Connections4 Connections { get; set; }

        [Newtonsoft.Json.JsonProperty("licensing", Required = Newtonsoft.Json.Required.Always)]
        public bool Licensing { get; set; }

        [Newtonsoft.Json.JsonProperty("linking", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Linking3 Linking { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Events3> Events { get; set; }

        [Newtonsoft.Json.JsonProperty("externalDevices", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExternalDevices3> ExternalDevices { get; set; }

        /// <summary>The types of IVP users supported in the link group</summary>
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Users4> Users { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response16
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class DevicesLiveStatus
    {
        /// <summary>Uri that can be used to address the device using REST.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Res { get; set; }

        /// <summary>UI name for device identification.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        /// <summary>Textual product version as read from the file.</summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        /// <summary>The current connection state of the device to the link group</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DevicesLiveStatusState? State { get; set; }

        [Newtonsoft.Json.JsonProperty("endpoints", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Endpoints> Endpoints { get; set; }

        /// <summary>The amount of time the device has been powered on for.</summary>
        [Newtonsoft.Json.JsonProperty("uptime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uptime { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response17
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response18
    {
        /// <summary>The uploaded file name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>The uploaded file size in bytes.</summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Size { get; set; }

        /// <summary>Textual product version as read from the file.</summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        /// <summary>Whether the uploaded version can be used for upgrade.</summary>
        [Newtonsoft.Json.JsonProperty("supported", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Supported { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response19
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response20
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response21
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response22
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response23
    {
        /// <summary>Upgrade stage progress in percentage.</summary>
        [Newtonsoft.Json.JsonProperty("percentComplete", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 100)]
        public int PercentComplete { get; set; }

        /// <summary>Current upgrade stage name.</summary>
        [Newtonsoft.Json.JsonProperty("stage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Stage { get; set; }

        /// <summary>true when the device is about to reboot.</summary>
        [Newtonsoft.Json.JsonProperty("reboot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Reboot { get; set; }

        /// <summary>true when the upgrade is done.</summary>
        [Newtonsoft.Json.JsonProperty("done", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Done { get; set; }

        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("dependencies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Dependencies> Dependencies { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response24
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response25
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response26
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response27
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response28
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response29
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response30
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response31
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response32
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response33
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response34
    {
        /// <summary>The list of features to activate with this ticket.</summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Features3> Features { get; set; } = new System.Collections.ObjectModel.Collection<Features3>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response35
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response36
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response37
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response38
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response39
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response40
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response41
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response42
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("slot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Slot { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response43
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response44
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response45
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response46
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response47
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response48
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response49
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response50
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response51
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response52
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response53
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response54
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response55
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response56
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response57
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response58
    {
        /// <summary>Snapshot generation progress in percentage.</summary>
        [Newtonsoft.Json.JsonProperty("percentComplete", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 100)]
        public int PercentComplete { get; set; }

        /// <summary>URL to use to download the schema when percentComplete is 100.</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Url { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Endpoint
    {
        /// <summary>Unique endpoint id within the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Id { get; set; }

        /// <summary>Id of device that owns the endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("device_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Device_id { get; set; }

        /// <summary>Currently supported endpoints enumeration.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EndpointType Type { get; set; }

        /// <summary>Hardware revision for the type.</summary>
        [Newtonsoft.Json.JsonProperty("revision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Revision { get; set; }

        /// <summary>Frequency used by antennnas to connect beltpacks.</summary>
        [Newtonsoft.Json.JsonProperty("frequencyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EndpointFrequencyType? FrequencyType { get; set; }

        /// <summary>Endpoint's external up address, If device is connected through powerline, field is removed.</summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }

        /// <summary>Uri that can be used to address the endpoint using REST.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }

        /// <summary>UI name for endpoint identification.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        /// <summary>Endpoint's currently assigned role.</summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Role3 Role { get; set; }

        /// <summary>Endpoint's firmware version.</summary>
        [Newtonsoft.Json.JsonProperty("versionSW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionSW { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("updateRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpdateRequired { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response59
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Endpoint2
    {
        /// <summary>Unique endpoint id within the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Id { get; set; }

        /// <summary>Id of device that owns the endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("device_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Device_id { get; set; }

        /// <summary>Currently supported endpoints enumeration.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Endpoint2Type Type { get; set; }

        /// <summary>Hardware revision for the type.</summary>
        [Newtonsoft.Json.JsonProperty("revision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Revision { get; set; }

        /// <summary>Frequency used by antennnas to connect beltpacks.</summary>
        [Newtonsoft.Json.JsonProperty("frequencyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Endpoint2FrequencyType? FrequencyType { get; set; }

        /// <summary>Endpoint's external up address, If device is connected through powerline, field is removed.</summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }

        /// <summary>Uri that can be used to address the endpoint using REST.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }

        /// <summary>UI name for endpoint identification.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        /// <summary>Endpoint's currently assigned role.</summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Role4 Role { get; set; }

        /// <summary>Endpoint's firmware version.</summary>
        [Newtonsoft.Json.JsonProperty("versionSW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionSW { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus2 LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("updateRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpdateRequired { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response60
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response61
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Endpoint3
    {
        /// <summary>Unique endpoint id within the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Id { get; set; }

        /// <summary>Id of device that owns the endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("device_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Device_id { get; set; }

        /// <summary>Currently supported endpoints enumeration.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Endpoint3Type Type { get; set; }

        /// <summary>Hardware revision for the type.</summary>
        [Newtonsoft.Json.JsonProperty("revision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Revision { get; set; }

        /// <summary>Frequency used by antennnas to connect beltpacks.</summary>
        [Newtonsoft.Json.JsonProperty("frequencyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Endpoint3FrequencyType? FrequencyType { get; set; }

        /// <summary>Endpoint's external up address, If device is connected through powerline, field is removed.</summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }

        /// <summary>Uri that can be used to address the endpoint using REST.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }

        /// <summary>UI name for endpoint identification.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        /// <summary>Endpoint's currently assigned role.</summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Role5 Role { get; set; }

        /// <summary>Endpoint's firmware version.</summary>
        [Newtonsoft.Json.JsonProperty("versionSW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionSW { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus3 LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("updateRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpdateRequired { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response62
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response63
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response64
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response65
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response66
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Endpoint4
    {
        /// <summary>Unique endpoint id within the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Id { get; set; }

        /// <summary>Id of device that owns the endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("device_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Device_id { get; set; }

        /// <summary>Currently supported endpoints enumeration.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Endpoint4Type Type { get; set; }

        /// <summary>Hardware revision for the type.</summary>
        [Newtonsoft.Json.JsonProperty("revision", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Revision { get; set; }

        /// <summary>Frequency used by antennnas to connect beltpacks.</summary>
        [Newtonsoft.Json.JsonProperty("frequencyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Endpoint4FrequencyType? FrequencyType { get; set; }

        /// <summary>Endpoint's external up address, If device is connected through powerline, field is removed.</summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }

        /// <summary>Uri that can be used to address the endpoint using REST.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }

        /// <summary>UI name for endpoint identification.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        /// <summary>Endpoint's currently assigned role.</summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Role6 Role { get; set; }

        /// <summary>Endpoint's firmware version.</summary>
        [Newtonsoft.Json.JsonProperty("versionSW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionSW { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus4 LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("updateRequired", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UpdateRequired { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response67
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response68
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response69
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response70
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response71
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response72
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response73
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response74
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response75
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response76
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response77
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response78
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response79
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response80
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IVCDevice3
    {
        /// <summary>The external device id in the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The device identification label.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue)]
        public string Label { get; set; }

        /// <summary>The external device description.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IVCDevice3Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings17 Settings { get; set; } = new Settings17();

        /// <summary>Ports defined on the external device.</summary>
        [Newtonsoft.Json.JsonProperty("ports", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, Anonymous17> Ports { get; set; } = new System.Collections.Generic.Dictionary<string, Anonymous17>();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SIPServer3
    {
        /// <summary>The external device id in the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The SIP server identification label.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        /// <summary>The external device description.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SIPServer3Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings18 Settings { get; set; } = new Settings18();

        /// <summary>Ports defined on the external device.</summary>
        [Newtonsoft.Json.JsonProperty("ports", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, Anonymous18> Ports { get; set; } = new System.Collections.Generic.Dictionary<string, Anonymous18>();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous8
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IVCDevice4
    {
        /// <summary>The external device id in the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The device identification label.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue)]
        public string Label { get; set; }

        /// <summary>The external device description.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IVCDevice4Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings19 Settings { get; set; } = new Settings19();

        /// <summary>Ports defined on the external device.</summary>
        [Newtonsoft.Json.JsonProperty("ports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Ports> Ports { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SIPServer4
    {
        /// <summary>The external device id in the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The SIP server identification label.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        /// <summary>The external device description.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SIPServer4Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings20 Settings { get; set; } = new Settings20();

        /// <summary>Ports defined on the external device.</summary>
        [Newtonsoft.Json.JsonProperty("ports", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Ports2> Ports { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response81
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("newDevice", Required = Newtonsoft.Json.Required.Always)]
        public NewDevice NewDevice { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IVCDevice5
    {
        /// <summary>The external device id in the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The device identification label.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue)]
        public string Label { get; set; }

        /// <summary>The external device description.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IVCDevice5Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings21 Settings { get; set; } = new Settings21();

        /// <summary>Ports defined on the external device.</summary>
        [Newtonsoft.Json.JsonProperty("ports", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, Anonymous19> Ports { get; set; } = new System.Collections.Generic.Dictionary<string, Anonymous19>();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SIPServer5
    {
        /// <summary>The external device id in the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The SIP server identification label.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        /// <summary>The external device description.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SIPServer5Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings22 Settings { get; set; } = new Settings22();

        /// <summary>Ports defined on the external device.</summary>
        [Newtonsoft.Json.JsonProperty("ports", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, Anonymous20> Ports { get; set; } = new System.Collections.Generic.Dictionary<string, Anonymous20>();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response82
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response83
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IVCDevice6
    {
        /// <summary>The external device id in the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The device identification label.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue)]
        public string Label { get; set; }

        /// <summary>The external device description.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IVCDevice6Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings23 Settings { get; set; } = new Settings23();

        /// <summary>Ports defined on the external device.</summary>
        [Newtonsoft.Json.JsonProperty("ports", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, Anonymous21> Ports { get; set; } = new System.Collections.Generic.Dictionary<string, Anonymous21>();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SIPServer6
    {
        /// <summary>The external device id in the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The SIP server identification label.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        /// <summary>The external device description.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SIPServer6Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings24 Settings { get; set; } = new Settings24();

        /// <summary>Ports defined on the external device.</summary>
        [Newtonsoft.Json.JsonProperty("ports", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, Anonymous22> Ports { get; set; } = new System.Collections.Generic.Dictionary<string, Anonymous22>();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response84
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response85
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response86
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response87
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous9
    {
        /// <summary>The port id unique only within the external device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The parent external device id.</summary>
        [Newtonsoft.Json.JsonProperty("externalDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExternalDeviceId { get; set; }

        /// <summary>External port type compatible with the parent external device type.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type5 Type { get; set; }

        /// <summary>Label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>Short code to identify the port.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus5 LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings25 Settings { get; set; } = new Settings25();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response88
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IVC32PortSettings3
    {
        /// <summary>IVC32 port login name.</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Login { get; set; }

        /// <summary>IVC32 port password.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string Password { get; set; }

        /// <summary>Device id to which this external port is assigned.</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SIPLineSettings3
    {
        /// <summary>SIP line login name.</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }

        /// <summary>SIP line password.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>Device id to which this external port is assigned.</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response89
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("newPort", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public NewPort NewPort { get; set; } = new NewPort();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response90
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response91
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response92
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response93
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous10
    {
        /// <summary>The port id unique only within the external device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The parent external device id.</summary>
        [Newtonsoft.Json.JsonProperty("externalDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExternalDeviceId { get; set; }

        /// <summary>External port type compatible with the parent external device type.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type6 Type { get; set; }

        /// <summary>Label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>Short code to identify the port.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus6 LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings26 Settings { get; set; } = new Settings26();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response94
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous11
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response95
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response96
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response97
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response98
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response99
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response100
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response101
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response102
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response103
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Interface
    {
        /// <summary>Audio interface hardware index for internal use.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterface_hwIndex", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int AudioInterface_hwIndex { get; set; }

        /// <summary>Global audio interface id.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterface_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int AudioInterface_id { get; set; }

        /// <summary>Number of ports on this interface.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterface_portCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? AudioInterface_portCount { get; set; }

        /// <summary>Parent device id</summary>
        [Newtonsoft.Json.JsonProperty("device_id_Device", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Device_id_Device { get; set; }

        /// <summary>Interface long name for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_longName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InterfaceAudioInterfaceType_longName AudioInterfaceType_longName { get; set; }

        /// <summary>Interface short name for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_shortName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InterfaceAudioInterfaceType_shortName AudioInterfaceType_shortName { get; set; }

        /// <summary>Interface type unique code.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InterfaceAudioInterfaceType AudioInterfaceType { get; set; }

        /// <summary>Number of ports configured on this interface. For virtual interfaces (e.g. IVC), it may be greater than audioInterface_portCount.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_numPorts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int AudioInterfaceType_numPorts { get; set; }

        /// <summary>Hardware part number.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_partNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InterfaceAudioInterfaceType_partNum? AudioInterfaceType_partNum { get; set; }

        [Newtonsoft.Json.JsonProperty("audioInterface_settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AudioInterface_settings AudioInterface_settings { get; set; } = new AudioInterface_settings();

        [Newtonsoft.Json.JsonProperty("audioInterface_versionHW", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AudioInterface_versionHW { get; set; }

        [Newtonsoft.Json.JsonProperty("audioInterface_liveStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AudioInterface_liveStatus AudioInterface_liveStatus { get; set; } = new AudioInterface_liveStatus();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Interface2
    {
        /// <summary>Audio interface hardware index for internal use.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterface_hwIndex", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int AudioInterface_hwIndex { get; set; }

        /// <summary>Global audio interface id.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterface_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int AudioInterface_id { get; set; }

        /// <summary>Number of ports on this interface.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterface_portCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? AudioInterface_portCount { get; set; }

        /// <summary>Parent device id</summary>
        [Newtonsoft.Json.JsonProperty("device_id_Device", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Device_id_Device { get; set; }

        /// <summary>Interface long name for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_longName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Interface2AudioInterfaceType_longName AudioInterfaceType_longName { get; set; }

        /// <summary>Interface short name for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_shortName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Interface2AudioInterfaceType_shortName AudioInterfaceType_shortName { get; set; }

        /// <summary>Interface type unique code.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Interface2AudioInterfaceType AudioInterfaceType { get; set; }

        /// <summary>Number of ports configured on this interface. For virtual interfaces (e.g. IVC), it may be greater than audioInterface_portCount.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_numPorts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int AudioInterfaceType_numPorts { get; set; }

        /// <summary>Hardware part number.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_partNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Interface2AudioInterfaceType_partNum? AudioInterfaceType_partNum { get; set; }

        [Newtonsoft.Json.JsonProperty("audioInterface_settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AudioInterface_settings2 AudioInterface_settings { get; set; } = new AudioInterface_settings2();

        [Newtonsoft.Json.JsonProperty("audioInterface_versionHW", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AudioInterface_versionHW { get; set; }

        [Newtonsoft.Json.JsonProperty("audioInterface_liveStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AudioInterface_liveStatus2 AudioInterface_liveStatus { get; set; } = new AudioInterface_liveStatus2();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response104
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Interface3
    {
        /// <summary>Audio interface hardware index for internal use.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterface_hwIndex", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int AudioInterface_hwIndex { get; set; }

        /// <summary>Global audio interface id.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterface_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int AudioInterface_id { get; set; }

        /// <summary>Number of ports on this interface.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterface_portCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? AudioInterface_portCount { get; set; }

        /// <summary>Parent device id</summary>
        [Newtonsoft.Json.JsonProperty("device_id_Device", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Device_id_Device { get; set; }

        /// <summary>Interface long name for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_longName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Interface3AudioInterfaceType_longName AudioInterfaceType_longName { get; set; }

        /// <summary>Interface short name for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_shortName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Interface3AudioInterfaceType_shortName AudioInterfaceType_shortName { get; set; }

        /// <summary>Interface type unique code.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Interface3AudioInterfaceType AudioInterfaceType { get; set; }

        /// <summary>Number of ports configured on this interface. For virtual interfaces (e.g. IVC), it may be greater than audioInterface_portCount.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_numPorts", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int AudioInterfaceType_numPorts { get; set; }

        /// <summary>Hardware part number.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_partNum", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Interface3AudioInterfaceType_partNum? AudioInterfaceType_partNum { get; set; }

        [Newtonsoft.Json.JsonProperty("audioInterface_settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AudioInterface_settings3 AudioInterface_settings { get; set; } = new AudioInterface_settings3();

        [Newtonsoft.Json.JsonProperty("audioInterface_versionHW", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AudioInterface_versionHW { get; set; }

        [Newtonsoft.Json.JsonProperty("audioInterface_liveStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public AudioInterface_liveStatus3 AudioInterface_liveStatus { get; set; } = new AudioInterface_liveStatus3();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response105
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response106
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response107
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response108
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response109
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response110
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Response110Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("fec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Fec { get; set; }

        [Newtonsoft.Json.JsonProperty("networkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NetworkQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Vox5> Vox { get; set; }

        [Newtonsoft.Json.JsonProperty("power", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Power { get; set; }

        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Mode { get; set; }

        [Newtonsoft.Json.JsonProperty("termination", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Termination { get; set; }

        [Newtonsoft.Json.JsonProperty("callSignal", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CallSignal { get; set; }

        [Newtonsoft.Json.JsonProperty("portFunction", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PortFunction { get; set; }

        [Newtonsoft.Json.JsonProperty("baudRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BaudRate { get; set; }

        [Newtonsoft.Json.JsonProperty("gpio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Gpio { get; set; }

        [Newtonsoft.Json.JsonProperty("twoWayRadio", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? TwoWayRadio { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response111
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Add4
    {
        /// <summary>Port hardware index for internal use.</summary>
        [Newtonsoft.Json.JsonProperty("port_hwIndex", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Port_hwIndex { get; set; }

        /// <summary>Port label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("port_label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Port_label { get; set; }

        /// <summary>Global port id.</summary>
        [Newtonsoft.Json.JsonProperty("port_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Port_id { get; set; }

        /// <summary>Resource URI identifier for this port.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }

        /// <summary>The parent device ID.</summary>
        [Newtonsoft.Json.JsonProperty("device_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Device_id { get; set; }

        /// <summary>User id for internal use.</summary>
        [Newtonsoft.Json.JsonProperty("port_userId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Port_userId { get; set; }

        /// <summary>Map of connections associated to this port with their state.</summary>
        [Newtonsoft.Json.JsonProperty("port_connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Anonymous23> Port_connections { get; set; }

        [Newtonsoft.Json.JsonProperty("port_settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Port_settings Port_settings { get; set; }

        /// <summary>Global audio interface id.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterface_id_AudioInterface", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(256, int.MaxValue)]
        public int AudioInterface_id_AudioInterface { get; set; }

        /// <summary>Interface short name for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_shortName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Add4AudioInterfaceType_shortName AudioInterfaceType_shortName { get; set; }

        /// <summary>Interface long name for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_longName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Add4AudioInterfaceType_longName AudioInterfaceType_longName { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus7 LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("port_dver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Port_dver { get; set; }

        [Newtonsoft.Json.JsonProperty("port_desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Port_desc { get; set; }

        /// <summary>Port configuration type code.</summary>
        [Newtonsoft.Json.JsonProperty("port_config_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Add4Port_config_type Port_config_type { get; set; }

        /// <summary>For external ports, reference to the external device.</summary>
        [Newtonsoft.Json.JsonProperty("port_externalDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Port_externalDeviceId { get; set; }

        /// <summary>For external ports, reference to the external port.</summary>
        [Newtonsoft.Json.JsonProperty("port_externalPortId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Port_externalPortId { get; set; }

        /// <summary>URI of last call originating from this port</summary>
        [Newtonsoft.Json.JsonProperty("lastUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastUri { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response112
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response113
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response114
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response115
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Add5
    {
        /// <summary>Port hardware index for internal use.</summary>
        [Newtonsoft.Json.JsonProperty("port_hwIndex", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Port_hwIndex { get; set; }

        /// <summary>Port label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("port_label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Port_label { get; set; }

        /// <summary>Global port id.</summary>
        [Newtonsoft.Json.JsonProperty("port_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Port_id { get; set; }

        /// <summary>Resource URI identifier for this port.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }

        /// <summary>The parent device ID.</summary>
        [Newtonsoft.Json.JsonProperty("device_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Device_id { get; set; }

        /// <summary>User id for internal use.</summary>
        [Newtonsoft.Json.JsonProperty("port_userId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Port_userId { get; set; }

        /// <summary>Map of connections associated to this port with their state.</summary>
        [Newtonsoft.Json.JsonProperty("port_connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Anonymous24> Port_connections { get; set; }

        [Newtonsoft.Json.JsonProperty("port_settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Port_settings2 Port_settings { get; set; }

        /// <summary>Global audio interface id.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterface_id_AudioInterface", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(256, int.MaxValue)]
        public int AudioInterface_id_AudioInterface { get; set; }

        /// <summary>Interface short name for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_shortName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Add5AudioInterfaceType_shortName AudioInterfaceType_shortName { get; set; }

        /// <summary>Interface long name for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_longName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Add5AudioInterfaceType_longName AudioInterfaceType_longName { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus8 LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("port_dver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Port_dver { get; set; }

        [Newtonsoft.Json.JsonProperty("port_desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Port_desc { get; set; }

        /// <summary>Port configuration type code.</summary>
        [Newtonsoft.Json.JsonProperty("port_config_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Add5Port_config_type Port_config_type { get; set; }

        /// <summary>For external ports, reference to the external device.</summary>
        [Newtonsoft.Json.JsonProperty("port_externalDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Port_externalDeviceId { get; set; }

        /// <summary>For external ports, reference to the external port.</summary>
        [Newtonsoft.Json.JsonProperty("port_externalPortId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Port_externalPortId { get; set; }

        /// <summary>URI of last call originating from this port</summary>
        [Newtonsoft.Json.JsonProperty("lastUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastUri { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response116
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Add6
    {
        /// <summary>Port hardware index for internal use.</summary>
        [Newtonsoft.Json.JsonProperty("port_hwIndex", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Port_hwIndex { get; set; }

        /// <summary>Port label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("port_label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Port_label { get; set; }

        /// <summary>Global port id.</summary>
        [Newtonsoft.Json.JsonProperty("port_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Port_id { get; set; }

        /// <summary>Resource URI identifier for this port.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }

        /// <summary>The parent device ID.</summary>
        [Newtonsoft.Json.JsonProperty("device_id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Device_id { get; set; }

        /// <summary>User id for internal use.</summary>
        [Newtonsoft.Json.JsonProperty("port_userId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Port_userId { get; set; }

        /// <summary>Map of connections associated to this port with their state.</summary>
        [Newtonsoft.Json.JsonProperty("port_connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, Anonymous25> Port_connections { get; set; }

        [Newtonsoft.Json.JsonProperty("port_settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Port_settings3 Port_settings { get; set; }

        /// <summary>Global audio interface id.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterface_id_AudioInterface", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(256, int.MaxValue)]
        public int AudioInterface_id_AudioInterface { get; set; }

        /// <summary>Interface short name for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_shortName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Add6AudioInterfaceType_shortName AudioInterfaceType_shortName { get; set; }

        /// <summary>Interface long name for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceType_longName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Add6AudioInterfaceType_longName AudioInterfaceType_longName { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus9 LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("port_dver", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Port_dver { get; set; }

        [Newtonsoft.Json.JsonProperty("port_desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Port_desc { get; set; }

        /// <summary>Port configuration type code.</summary>
        [Newtonsoft.Json.JsonProperty("port_config_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Add6Port_config_type Port_config_type { get; set; }

        /// <summary>For external ports, reference to the external device.</summary>
        [Newtonsoft.Json.JsonProperty("port_externalDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Port_externalDeviceId { get; set; }

        /// <summary>For external ports, reference to the external port.</summary>
        [Newtonsoft.Json.JsonProperty("port_externalPortId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Port_externalPortId { get; set; }

        /// <summary>URI of last call originating from this port</summary>
        [Newtonsoft.Json.JsonProperty("lastUri", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastUri { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response117
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response118
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response119
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response120
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("nulling", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Nulling { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response121
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response122
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("nulling", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Nulling { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response123
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response124
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response125
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response126
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonProperty("confId", Required = Newtonsoft.Json.Required.Always)]
        public int ConfId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response127
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response128
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response129
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous12
    {
        /// <summary>The call id is only unique within the device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The parent device id.</summary>
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Always)]
        public int DeviceId { get; set; }

        /// <summary>The parent audio interface id.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceId", Required = Newtonsoft.Json.Required.Always)]
        public int AudioInterfaceId { get; set; }

        /// <summary>The parent port id (SIP Line).</summary>
        [Newtonsoft.Json.JsonProperty("portId", Required = Newtonsoft.Json.Required.Always)]
        public int PortId { get; set; }

        /// <summary>Call Live Status Object.</summary>
        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LiveStatus10 LiveStatus { get; set; } = new LiveStatus10();

        /// <summary>URI / Number</summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uri { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response130
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous13
    {
        /// <summary>The call id is only unique within the device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The parent device id.</summary>
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Always)]
        public int DeviceId { get; set; }

        /// <summary>The parent audio interface id.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceId", Required = Newtonsoft.Json.Required.Always)]
        public int AudioInterfaceId { get; set; }

        /// <summary>The parent port id (SIP Line).</summary>
        [Newtonsoft.Json.JsonProperty("portId", Required = Newtonsoft.Json.Required.Always)]
        public int PortId { get; set; }

        /// <summary>Call Live Status Object.</summary>
        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LiveStatus11 LiveStatus { get; set; } = new LiveStatus11();

        /// <summary>URI / Number</summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uri { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response131
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous14
    {
        /// <summary>The call id is only unique within the device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The parent device id.</summary>
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Always)]
        public int DeviceId { get; set; }

        /// <summary>The parent audio interface id.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceId", Required = Newtonsoft.Json.Required.Always)]
        public int AudioInterfaceId { get; set; }

        /// <summary>The parent port id (SIP Line).</summary>
        [Newtonsoft.Json.JsonProperty("portId", Required = Newtonsoft.Json.Required.Always)]
        public int PortId { get; set; }

        /// <summary>Call Live Status Object.</summary>
        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LiveStatus12 LiveStatus { get; set; } = new LiveStatus12();

        /// <summary>URI / Number</summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uri { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response132
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response133
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response134
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response135
    {
        /// <summary>The call id is only unique within the device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The parent device id.</summary>
        [Newtonsoft.Json.JsonProperty("deviceId", Required = Newtonsoft.Json.Required.Always)]
        public int DeviceId { get; set; }

        /// <summary>The parent audio interface id.</summary>
        [Newtonsoft.Json.JsonProperty("audioInterfaceId", Required = Newtonsoft.Json.Required.Always)]
        public int AudioInterfaceId { get; set; }

        /// <summary>The parent port id (SIP Line).</summary>
        [Newtonsoft.Json.JsonProperty("portId", Required = Newtonsoft.Json.Required.Always)]
        public int PortId { get; set; }

        /// <summary>Call Live Status Object.</summary>
        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LiveStatus13 LiveStatus { get; set; } = new LiveStatus13();

        /// <summary>URI / Number</summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uri { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response136
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response137
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response138
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response139
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response140
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response141
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connection
    {
        /// <summary>Unique connection id within the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Id { get; set; }

        /// <summary>Currently supported connections enumeration.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConnectionType2 Type { get; set; }

        /// <summary>UI name for connection identification.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        /// <summary>Uri that can be used to address the connection using REST.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response142
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Add7
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Add7Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("participants", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Participants> Participants { get; set; } = new System.Collections.ObjectModel.Collection<Participants>();

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connection2
    {
        /// <summary>Unique connection id within the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Id { get; set; }

        /// <summary>Currently supported connections enumeration.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Connection2Type Type { get; set; }

        /// <summary>UI name for connection identification.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        /// <summary>Uri that can be used to address the connection using REST.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response143
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response144
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response145
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response146
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response147
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response148
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Add8
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Add8Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("participants", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Participants2> Participants { get; set; } = new System.Collections.ObjectModel.Collection<Participants2>();

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response149
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous15
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type7 Type { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IsDefault2? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings27 Settings { get; set; } = new Settings27();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response150
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response151
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Response151Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Response151IsDefault? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings28 Settings { get; set; } = new Settings28();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response152
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response153
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response154
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response155
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response156
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response157
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response158
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response159
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response160
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response161
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response162
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous16
    {
        /// <summary>The agent-ic user id unique in a link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>Agent-IC user label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label { get; set; }

        /// <summary>Type identifier.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type8 Type { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings29 Settings { get; set; } = new Settings29();

        /// <summary>Resource URI identifier for this user.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response163
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response164
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response165
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response166
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response167
    {
        /// <summary>The agent-ic user id unique in a link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>Agent-IC user label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Label { get; set; }

        /// <summary>Type identifier.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Response167Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings30 Settings { get; set; } = new Settings30();

        /// <summary>Resource URI identifier for this user.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response168
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response169
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response170
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response171
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response172
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response173
    {
        [Newtonsoft.Json.JsonProperty("ok", Required = Newtonsoft.Json.Required.Always)]
        public bool Ok { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LQ_FSIIDisplayBrightness
    {
        _20 = 20,

        _85 = 85,

        _170 = 170,

        _255 = 255,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LQ_FSIIAaBatteryType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NiMH")]
        NiMH = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Alkaline")]
        Alkaline = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LQ_FSIIRoleSorting
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Alphabetical")]
        Alphabetical = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RoleNumber")]
        RoleNumber = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets
    {
        /// <summary>0 based keyset index on the display.</summary>
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        /// <summary>List of connection URIs associated to this keyset.</summary>
        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections5> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections5>();

        /// <summary>Available activation states for the FSII-BP keyset.</summary>
        [Newtonsoft.Json.JsonProperty("activationState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public KeysetsActivationState ActivationState { get; set; }

        /// <summary>Whether this keyset can send a call signal or not.</summary>
        [Newtonsoft.Json.JsonProperty("isCallKey", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCallKey { get; set; }

        /// <summary>true to make this keyset the reply key.</summary>
        [Newtonsoft.Json.JsonProperty("isReplyKey", Required = Newtonsoft.Json.Required.Always)]
        public bool IsReplyKey { get; set; }

        /// <summary>Set the talk button latching behaviour.</summary>
        [Newtonsoft.Json.JsonProperty("talkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public KeysetsTalkBtnMode TalkBtnMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Features2
    {
        /// <summary>The available feature's unique name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Features2Name Name { get; set; }

        /// <summary>The number of available licenses for this feature.</summary>
        [Newtonsoft.Json.JsonProperty("qty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double Qty { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ConfigMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"linkMaster")]
        LinkMaster = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"linkMember")]
        LinkMember = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class MasterIp
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum OTAState
    {
        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SetnetmodeMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LAN")]
        LAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WAN")]
        WAN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Network
    {
        /// <summary>Configures the external network interfaces in static IPv4 or DHCP.</summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NetworkMode Mode { get; set; }

        /// <summary>IPv4 address for the external interface when statically configured.</summary>
        [Newtonsoft.Json.JsonProperty("staticIP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StaticIP StaticIP { get; set; }

        /// <summary>IPv4 network mask for the external interface when statically configured.</summary>
        [Newtonsoft.Json.JsonProperty("netmask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Netmask Netmask { get; set; }

        /// <summary>Gateway IPv4 address for routing outside the subnet when statically configured.</summary>
        [Newtonsoft.Json.JsonProperty("gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Gateway Gateway { get; set; }

        [Newtonsoft.Json.JsonProperty("dns1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dns1 Dns1 { get; set; }

        [Newtonsoft.Json.JsonProperty("dns2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Dns2 Dns2 { get; set; }

        /// <summary>IPv4 address to use to reach this device from outside a firewall.</summary>
        [Newtonsoft.Json.JsonProperty("extip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Extip Extip { get; set; }

        /// <summary>Port for audio and control used to reach this device from outside a firewall. If set to 0, the default port 655 will be used.</summary>
        [Newtonsoft.Json.JsonProperty("extport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 65535)]
        public int? Extport { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings
    {
        /// <summary>Configure the synchronization offset based on the cable length:
        /// * 1 -&gt; 0 - 69m
        /// * 2 -&gt; 70 - 139m
        /// * 3 -&gt; 140 - 209m
        /// * 4 -&gt; 210 - 279m
        /// * 5 -&gt; 280 - 349m
        /// * 6 -&gt; 350 - 419m
        /// * 7 -&gt; 420 - 489m
        /// * 8 -&gt; 490 - 559m
        /// * 9 -&gt; 560 - 629m
        /// * 10 -&gt; 630 - 699m
        /// * 11 -&gt; 700 - 769m
        /// * 12 -&gt; 770 - 839m
        /// * 13 -&gt; 840 - 909m
        /// * 14 -&gt; 910 - 979m
        /// * 15 -&gt; 980 - 1049m
        /// * 16 -&gt; 1050 - 1119m
        /// * 17 -&gt; 1120 - 1189m
        /// * 18 -&gt; 1190 - 1259m
        /// * 19 -&gt; 1260 - 1329m
        /// * 20 -&gt; 1330 - 1399m
        /// * 21 -&gt; 1400 - 1469m
        /// * 22 -&gt; 1470 - 1539m
        /// * 23 -&gt; 1540 - 1609m</summary>
        [Newtonsoft.Json.JsonProperty("syncOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 23)]
        public int? SyncOffset { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum IVCDeviceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings2
    {
        /// <summary>Hostname or IPv4 address of the target external device.</summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ip { get; set; }

        /// <summary>TCP/UDP port number to use to reach the target external device.</summary>
        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int Port { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SIPServerType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings3
    {
        /// <summary>Hostname or IP address of the target SIP registrar.</summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ip { get; set; }

        /// <summary>TCP/UDP port number to use to reach the SIP registrar.</summary>
        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int Port { get; set; }

        /// <summary>Default domain to be used for SIP users.</summary>
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }

        /// <summary>Communication protocol to be used with the registrar.</summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings3Protocol? Protocol { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings4
    {
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }

        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int? Port { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings5
    {
        /// <summary>IP or hostname to reach the registrar.</summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip { get; set; }

        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int? Port { get; set; }

        /// <summary>Default domain to be used for SIP users.</summary>
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }

        /// <summary>Communication protocol to be used with the registrar.</summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings5Protocol? Protocol { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings6
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings7
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Update4Mode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ClearCom")]
        ClearCom = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RTS")]
        RTS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VoxState? State { get; set; }

        [Newtonsoft.Json.JsonProperty("threshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-60, -18)]
        public int? Threshold { get; set; }

        [Newtonsoft.Json.JsonProperty("delay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Delay { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Events4> Events { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NetworkQuality
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bitrate { get; set; }

        [Newtonsoft.Json.JsonProperty("packetSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PacketSize { get; set; }

        [Newtonsoft.Json.JsonProperty("jitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Jitter { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PutExternalNetworkQuality
    {
        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"wan")]
        Wan = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lan")]
        Lan = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"internet")]
        Internet = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PutPinout
    {
        [System.Runtime.Serialization.EnumMember(Value = @"panel")]
        Panel = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"matrix")]
        Matrix = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Serial
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SerialState? State { get; set; }

        [Newtonsoft.Json.JsonProperty("baudRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SerialBaudRate? BaudRate { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(5, 8)]
        public int? Data { get; set; }

        /// <summary>set to 0 for FSII, use string for HN</summary>
        [Newtonsoft.Json.JsonProperty("parity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SerialParity? Parity { get; set; }

        [Newtonsoft.Json.JsonProperty("stop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 2)]
        public int? Stop { get; set; }

        [Newtonsoft.Json.JsonProperty("flowControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SerialFlowControl? FlowControl { get; set; }

        [Newtonsoft.Json.JsonProperty("framingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SerialFramingType? FramingType { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpis
    {
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events5> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events5>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpos
    {
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events6> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events6>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PutHeadsetMicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"automatic")]
        Automatic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"electret")]
        Electret = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_0")]
        Dynamic_0 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_10")]
        Dynamic_10 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PutSidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PutMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"clearcom")]
        Clearcom = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"rtsPin2")]
        RtsPin2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"rtsPin3")]
        RtsPin3 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox2
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Vox2State? State { get; set; }

        [Newtonsoft.Json.JsonProperty("threshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-60, -18)]
        public int? Threshold { get; set; }

        [Newtonsoft.Json.JsonProperty("delay", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Delay { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Events7> Events { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NetworkQuality2
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bitrate { get; set; }

        [Newtonsoft.Json.JsonProperty("packetSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PacketSize { get; set; }

        [Newtonsoft.Json.JsonProperty("jitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Jitter { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Put2ExternalNetworkQuality
    {
        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"wan")]
        Wan = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lan")]
        Lan = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"internet")]
        Internet = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Put2Pinout
    {
        [System.Runtime.Serialization.EnumMember(Value = @"panel")]
        Panel = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"matrix")]
        Matrix = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Serial2
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial2State? State { get; set; }

        [Newtonsoft.Json.JsonProperty("baudRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial2BaudRate? BaudRate { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(5, 8)]
        public int? Data { get; set; }

        /// <summary>set to 0 for FSII, use string for HN</summary>
        [Newtonsoft.Json.JsonProperty("parity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial2Parity? Parity { get; set; }

        [Newtonsoft.Json.JsonProperty("stop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 2)]
        public int? Stop { get; set; }

        [Newtonsoft.Json.JsonProperty("flowControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial2FlowControl? FlowControl { get; set; }

        [Newtonsoft.Json.JsonProperty("framingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial2FramingType? FramingType { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpis2
    {
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events8> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events8>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpos2
    {
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events9> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events9>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Put2HeadsetMicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"automatic")]
        Automatic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"electret")]
        Electret = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_0")]
        Dynamic_0 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_10")]
        Dynamic_10 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Put2SidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Put2Mode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"clearcom")]
        Clearcom = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"rtsPin2")]
        RtsPin2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"rtsPin3")]
        RtsPin3 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Add3Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"partyline")]
        Partyline = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"direct")]
        Direct = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HMS-4X")]
        HMS4X = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum IsDefault
    {
        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings8
    {
        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings8DisplayBrightness DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("keyBrightness", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings8KeyBrightness KeyBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("screensaverMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings8ScreensaverMode ScreensaverMode { get; set; }

        [Newtonsoft.Json.JsonProperty("menuAccessEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool MenuAccessEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("allTalkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings8AllTalkBtnMode AllTalkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings8RmkBtnMode RmkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(4)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Keysets8> Keysets { get; set; } = new System.Collections.ObjectModel.Collection<Keysets8>();

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-18, 0)]
        public int SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings8SidetoneControl SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings8HeadphoneLimit HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 12)]
        public int HeadphoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("headsetMicType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings8HeadsetMicType HeadsetMicType { get; set; }

        [Newtonsoft.Json.JsonProperty("micHeadroom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings8MicHeadroom MicHeadroom { get; set; }

        [Newtonsoft.Json.JsonProperty("micContourFilterEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool MicContourFilterEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmLabel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PgmLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int PgmGain { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmVoxEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool PgmVoxEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmGpoTriggerEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool PgmGpoTriggerEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmVoxOffDelayMs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(500, 4000)]
        public int PgmVoxOffDelayMs { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmIfbDimLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-80, 0)]
        public int PgmIfbDimLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmAssignments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PgmAssignments3> PgmAssignments { get; set; } = new System.Collections.ObjectModel.Collection<PgmAssignments3>();

        [Newtonsoft.Json.JsonProperty("saLabel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SaLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("saGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int SaGain { get; set; }

        [Newtonsoft.Json.JsonProperty("saBtnLatchEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool SaBtnLatchEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("hotMicGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int HotMicGain { get; set; }

        [Newtonsoft.Json.JsonProperty("loudspeakerDimLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-24, 0)]
        public int LoudspeakerDimLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("gpios", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Gpios3> Gpios { get; set; } = new System.Collections.ObjectModel.Collection<Gpios3>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HMS4XSettingsDisplayBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"low")]
        Low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HMS4XSettingsKeyBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"highLow")]
        HighLow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"highOff")]
        HighOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lowOff")]
        LowOff = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"offOff")]
        OffOff = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HMS4XSettingsScreensaverMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blank")]
        Blank = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"connectionName")]
        ConnectionName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"roleName")]
        RoleName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"hostName")]
        HostName = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HMS4XSettingsAllTalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"visible")]
        Visible = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HMS4XSettingsRmkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"visible")]
        Visible = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets2
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections6> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections6>();

        [Newtonsoft.Json.JsonProperty("talkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets2TalkBtnMode TalkBtnMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HMS4XSettingsSidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HMS4XSettingsHeadphoneLimit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-6")]
        _Minus6 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HMS4XSettingsHeadsetMicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"electret")]
        Electret = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_0")]
        Dynamic_0 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_10")]
        Dynamic_10 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HMS4XSettingsMicHeadroom
    {
        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PgmAssignments
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[1-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpios
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GpiosType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("hwIndex", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 4)]
        public int HwIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events10> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events10>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HRM4XSettingsDisplayBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"low")]
        Low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HRM4XSettingsKeyBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"highLow")]
        HighLow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"highOff")]
        HighOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lowOff")]
        LowOff = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"offOff")]
        OffOff = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HRM4XSettingsScreensaverMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blank")]
        Blank = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"connectionName")]
        ConnectionName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"roleName")]
        RoleName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"hostName")]
        HostName = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HRM4XSettingsAllTalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"visible")]
        Visible = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HRM4XSettingsRmkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"visible")]
        Visible = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets3
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections7> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections7>();

        [Newtonsoft.Json.JsonProperty("talkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets3TalkBtnMode TalkBtnMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HRM4XSettingsSidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HRM4XSettingsHeadphoneLimit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-6")]
        _Minus6 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HRM4XSettingsHeadsetMicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"electret")]
        Electret = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_0")]
        Dynamic_0 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_10")]
        Dynamic_10 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HRM4XSettingsMicHeadroom
    {
        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PgmAssignments2
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[1-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SaConnectionAssignments
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HRM4XSettingsLoudspeakerDimLevel
    {
        _0 = 0,

        __3 = -3,

        __6 = -6,

        __12 = -12,

        __24 = -24,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpios2
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Gpios2Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("hwIndex", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 4)]
        public int HwIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events11> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events11>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HKB2XSettingsDisplayBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"low")]
        Low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HKB2XSettingsKeyBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"highLow")]
        HighLow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"highOff")]
        HighOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lowOff")]
        LowOff = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"offOff")]
        OffOff = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HKB2XSettingsScreensaverMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blank")]
        Blank = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"connectionName")]
        ConnectionName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"roleName")]
        RoleName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"hostName")]
        HostName = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets4
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections8> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections8>();

        [Newtonsoft.Json.JsonProperty("talkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets4TalkBtnMode TalkBtnMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HKB2XSettingsSidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HKB2XSettingsHeadphoneLimit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-6")]
        _Minus6 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HKB2XSettingsHeadsetMicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"electret")]
        Electret = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_0")]
        Dynamic_0 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_10")]
        Dynamic_10 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HKB2XSettingsMicHeadroom
    {
        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HBP2XSettingsDisplayBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"low")]
        Low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HBP2XSettingsKeyBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"highLow")]
        HighLow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"highOff")]
        HighOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lowOff")]
        LowOff = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"offOff")]
        OffOff = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HBP2XSettingsScreensaverMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blank")]
        Blank = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"connectionName")]
        ConnectionName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"roleName")]
        RoleName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"hostName")]
        HostName = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets5
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("stackedKeyEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool StackedKeyEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("stackedKeyLabel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StackedKeyLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections9> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections9>();

        [Newtonsoft.Json.JsonProperty("talkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets5TalkBtnMode TalkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("usbFlasherMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets5UsbFlasherMode UsbFlasherMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HBP2XSettingsSidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HBP2XSettingsHeadphoneLimit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-6")]
        _Minus6 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HBP2XSettingsHeadsetMicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"electret")]
        Electret = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_0")]
        Dynamic_0 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_10")]
        Dynamic_10 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HBP2XSettingsMicHeadroom
    {
        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets6
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections10> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections10>();

        [Newtonsoft.Json.JsonProperty("activationState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets6ActivationState ActivationState { get; set; }

        [Newtonsoft.Json.JsonProperty("isCallKey", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCallKey { get; set; }

        [Newtonsoft.Json.JsonProperty("isReplyKey", Required = Newtonsoft.Json.Required.Always)]
        public bool IsReplyKey { get; set; }

        [Newtonsoft.Json.JsonProperty("talkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets6TalkBtnMode TalkBtnMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Groups
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FSIIBPSettings2SidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FSIIBPSettings2BatteryAlarmMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"vibrate+audio")]
        Vibrate_audio = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"vibrate")]
        Vibrate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"audio")]
        Audio = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FSIIBPSettings2CallAlertMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"vibrate+audio")]
        Vibrate_audio = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"vibrate")]
        Vibrate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"audio")]
        Audio = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FSIIBPSettings2OutOfRangeAlarm
    {
        [System.Runtime.Serialization.EnumMember(Value = @"audio")]
        Audio = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FSIIBPSettings2DisplayBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"verylow")]
        Verylow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"low")]
        Low = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"veryhigh")]
        Veryhigh = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FSIIBPSettings2MenuLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"advanced")]
        Advanced = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"basic")]
        Basic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FSIIBPSettings2MenuKeyMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"listenagain")]
        Listenagain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"switchvolctrl")]
        Switchvolctrl = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FSIIBPSettings2HeadphoneLowLevelLimit
    {
        __6 = -6,

        __12 = -12,

        __21 = -21,

        __70 = -70,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FSIIBPSettings2MicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"dynamic")]
        Dynamic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"electrect")]
        Electrect = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"automatic")]
        Automatic = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets7
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("keys", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(4)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Keys> Keys { get; set; } = new System.Collections.ObjectModel.Collection<Keys>();

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections11> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections11>();

        [Newtonsoft.Json.JsonProperty("isAutoListen", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAutoListen { get; set; }

        [Newtonsoft.Json.JsonProperty("maxVolume", Required = Newtonsoft.Json.Required.Always)]
        public int MaxVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("minVolume", Required = Newtonsoft.Json.Required.Always)]
        public int MinVolume { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HMS4XRoleType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HMS-4X")]
        HMS4X = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HMS4XRoleIsDefault
    {
        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings9
    {
        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings9DisplayBrightness? DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("keyBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings9KeyBrightness? KeyBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("screensaverMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings9ScreensaverMode? ScreensaverMode { get; set; }

        [Newtonsoft.Json.JsonProperty("menuAccessEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MenuAccessEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("allTalkBtnMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings9AllTalkBtnMode? AllTalkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkBtnMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings9RmkBtnMode? RmkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(4)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Keysets9> Keysets { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-18, 0)]
        public int? SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings9SidetoneControl? SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings9HeadphoneLimit? HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 12)]
        public int? HeadphoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("headsetMicType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings9HeadsetMicType? HeadsetMicType { get; set; }

        [Newtonsoft.Json.JsonProperty("micHeadroom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings9MicHeadroom? MicHeadroom { get; set; }

        [Newtonsoft.Json.JsonProperty("micContourFilterEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MicContourFilterEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PgmLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? PgmGain { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmVoxEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PgmVoxEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmGpoTriggerEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PgmGpoTriggerEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmVoxOffDelayMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(500, 4000)]
        public int? PgmVoxOffDelayMs { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmIfbDimLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-80, 0)]
        public int? PgmIfbDimLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmAssignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PgmAssignments4> PgmAssignments { get; set; }

        [Newtonsoft.Json.JsonProperty("saLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("saGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? SaGain { get; set; }

        [Newtonsoft.Json.JsonProperty("saBtnLatchEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SaBtnLatchEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("hotMicGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? HotMicGain { get; set; }

        [Newtonsoft.Json.JsonProperty("loudspeakerDimLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-24, 0)]
        public int? LoudspeakerDimLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("gpios", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gpios4> Gpios { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HRM4XRoleType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HRM-4X")]
        HRM4X = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HRM4XRoleIsDefault
    {
        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings10
    {
        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings10DisplayBrightness? DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("keyBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings10KeyBrightness? KeyBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("screensaverMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings10ScreensaverMode? ScreensaverMode { get; set; }

        [Newtonsoft.Json.JsonProperty("menuAccessEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MenuAccessEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("allTalkBtnMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings10AllTalkBtnMode? AllTalkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkBtnMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings10RmkBtnMode? RmkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(4)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Keysets10> Keysets { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-18, 0)]
        public int? SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings10SidetoneControl? SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings10HeadphoneLimit? HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 12)]
        public int? HeadphoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("headsetMicType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings10HeadsetMicType? HeadsetMicType { get; set; }

        [Newtonsoft.Json.JsonProperty("micHeadroom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings10MicHeadroom? MicHeadroom { get; set; }

        [Newtonsoft.Json.JsonProperty("micContourFilterEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MicContourFilterEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PgmLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? PgmGain { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmVoxEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PgmVoxEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmGpoTriggerEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PgmGpoTriggerEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmVoxOffDelayMs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(500, 4000)]
        public int? PgmVoxOffDelayMs { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmIfbDimLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-80, 0)]
        public int? PgmIfbDimLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmAssignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PgmAssignments5> PgmAssignments { get; set; }

        [Newtonsoft.Json.JsonProperty("saLabel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SaLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("saGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? SaGain { get; set; }

        [Newtonsoft.Json.JsonProperty("saBtnLatchEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SaBtnLatchEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("saConnectionAssignModeEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SaConnectionAssignModeEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("saConnectionAssignments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SaConnectionAssignments2> SaConnectionAssignments { get; set; }

        [Newtonsoft.Json.JsonProperty("saPgmOutputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SaPgmOutputEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("hotMicGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? HotMicGain { get; set; }

        [Newtonsoft.Json.JsonProperty("loudspeakerDimLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings10LoudspeakerDimLevel? LoudspeakerDimLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("gpios", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gpios5> Gpios { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HKB2XRoleType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HKB-2X")]
        HKB2X = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HKB2XRoleIsDefault
    {
        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings11
    {
        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings11DisplayBrightness? DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("keyBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings11KeyBrightness? KeyBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("screensaverMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings11ScreensaverMode? ScreensaverMode { get; set; }

        [Newtonsoft.Json.JsonProperty("unlatchOnShiftEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UnlatchOnShiftEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("menuAccessEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MenuAccessEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(4)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Keysets11> Keysets { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-18, 0)]
        public int? SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings11SidetoneControl? SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings11HeadphoneLimit? HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 12)]
        public int? HeadphoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("headsetMicType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings11HeadsetMicType? HeadsetMicType { get; set; }

        [Newtonsoft.Json.JsonProperty("micHeadroom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings11MicHeadroom? MicHeadroom { get; set; }

        [Newtonsoft.Json.JsonProperty("micContourFilterEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MicContourFilterEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("loudspeakerDimLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-24, 0)]
        public int? LoudspeakerDimLevel { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HBP2XRoleType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HBP-2X")]
        HBP2X = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum HBP2XRoleIsDefault
    {
        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings12
    {
        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings12DisplayBrightness? DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("keyBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings12KeyBrightness? KeyBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("screensaverMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings12ScreensaverMode? ScreensaverMode { get; set; }

        [Newtonsoft.Json.JsonProperty("menuAccessEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MenuAccessEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("rotateDisplayEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RotateDisplayEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("vibrateOnCallEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? VibrateOnCallEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(2)]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public System.Collections.Generic.ICollection<Keysets12> Keysets { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-18, 0)]
        public int? SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings12SidetoneControl? SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings12HeadphoneLimit? HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 12)]
        public int? HeadphoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("headsetMicType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings12HeadsetMicType? HeadsetMicType { get; set; }

        [Newtonsoft.Json.JsonProperty("micHeadroom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings12MicHeadroom? MicHeadroom { get; set; }

        [Newtonsoft.Json.JsonProperty("micContourFilterEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MicContourFilterEnabled { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FSIIBPRoleType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"FSII-BP")]
        FSIIBP = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum FSIIBPRoleIsDefault
    {
        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings13
    {
        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(5)]
        [System.ComponentModel.DataAnnotations.MaxLength(5)]
        public System.Collections.Generic.ICollection<Keysets13> Keysets { get; set; }

        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Groups2> Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 8)]
        public int? HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings13SidetoneControl? SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("masterVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MasterVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("lineInVolume", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-15, 6)]
        public int? LineInVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("portInputGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-70, 15)]
        public int? PortInputGain { get; set; }

        [Newtonsoft.Json.JsonProperty("portOutputGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-70, 15)]
        public int? PortOutputGain { get; set; }

        [Newtonsoft.Json.JsonProperty("micEchoCancellation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MicEchoCancellation { get; set; }

        [Newtonsoft.Json.JsonProperty("masterVolumeOperation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MasterVolumeOperation { get; set; }

        [Newtonsoft.Json.JsonProperty("batteryAlarmMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings13BatteryAlarmMode? BatteryAlarmMode { get; set; }

        [Newtonsoft.Json.JsonProperty("lowBatteryThreshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 100)]
        public int? LowBatteryThreshold { get; set; }

        [Newtonsoft.Json.JsonProperty("callAlertMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings13CallAlertMode? CallAlertMode { get; set; }

        [Newtonsoft.Json.JsonProperty("outOfRangeAlarm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings13OutOfRangeAlarm? OutOfRangeAlarm { get; set; }

        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings13DisplayBrightness? DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("displayDimTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 120)]
        public int? DisplayDimTimeout { get; set; }

        [Newtonsoft.Json.JsonProperty("displayOffTimeout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(5, 120)]
        public int? DisplayOffTimeout { get; set; }

        [Newtonsoft.Json.JsonProperty("listenAgainAutoDelete", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 240)]
        public int? ListenAgainAutoDelete { get; set; }

        [Newtonsoft.Json.JsonProperty("listenAgainRecordTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 15)]
        public int? ListenAgainRecordTime { get; set; }

        [Newtonsoft.Json.JsonProperty("replyTalkAutoClear", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 60)]
        public int? ReplyTalkAutoClear { get; set; }

        [Newtonsoft.Json.JsonProperty("menuLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings13MenuLevel? MenuLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("latchingTalkKeys", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? LatchingTalkKeys { get; set; }

        [Newtonsoft.Json.JsonProperty("dimmedTallies", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? DimmedTallies { get; set; }

        [Newtonsoft.Json.JsonProperty("partyLineDisplayMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PartyLineDisplayMode { get; set; }

        [Newtonsoft.Json.JsonProperty("menuKeyMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings13MenuKeyMode? MenuKeyMode { get; set; }

        [Newtonsoft.Json.JsonProperty("eavesdropping", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Eavesdropping { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLowLevelLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings13HeadphoneLowLevelLimit? HeadphoneLowLevelLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("micType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings13MicType? MicType { get; set; }

        [Newtonsoft.Json.JsonProperty("useLocalSettings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? UseLocalSettings { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LQAICRoleType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LQ-AIC")]
        LQAIC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LQAICRoleIsDefault
    {
        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings14
    {
        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(24)]
        public System.Collections.Generic.ICollection<Keysets14> Keysets { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Params8Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LQ-AIC")]
        LQAIC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings15
    {
        /// <summary>The username for the agent-ic account.</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Login { get; set; }

        /// <summary>The password for the agent-ic account.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>The device ID that the account is pair with (0 if unassigned).</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.Always)]
        public int AssignedDeviceId { get; set; }

        /// <summary>The default role to assign to the device (0 if unassigned).</summary>
        [Newtonsoft.Json.JsonProperty("defaultRole", Required = Newtonsoft.Json.Required.Always)]
        public int DefaultRole { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings16
    {
        /// <summary>The username for the agent-ic account.</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Login { get; set; }

        /// <summary>The password for the agent-ic account.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>The device ID that the account is pair with (0 if unassigned).</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AssignedDeviceId { get; set; }

        /// <summary>The default role to assign to the device (0 if unassigned).</summary>
        [Newtonsoft.Json.JsonProperty("defaultRole", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DefaultRole { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Type2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HMS-4X")]
        HMS4X = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HBP-2X")]
        HBP2X = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HRM-4X")]
        HRM4X = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HKB-2X")]
        HKB2X = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII")]
        FSII = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4W2")]
        LQ4W2 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-2W2")]
        LQ2W2 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4WG2")]
        LQ4WG2 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R4W8")]
        LQR4W8 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R4W4")]
        LQR4W4 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R4FWG")]
        LQR4FWG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R4WG8")]
        LQR4WG8 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R2W2-4WG2")]
        LQR2W24WG2 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R2W4-4WG4")]
        LQR2W44WG4 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R2W4-4W4")]
        LQR2W44W4 = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R2W4")]
        LQR2W4 = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Roles
    {
        /// <summary>Does the device have dynamic roles. (Review this)</summary>
        [Newtonsoft.Json.JsonProperty("isDynamic", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDynamic { get; set; }

        /// <summary>Does the device support role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("device", Required = Newtonsoft.Json.Required.Always)]
        public bool Device { get; set; }

        /// <summary>Does the device support assigning roles to it's endpoints.</summary>
        [Newtonsoft.Json.JsonProperty("endpoint", Required = Newtonsoft.Json.Required.Always)]
        public bool Endpoint { get; set; }

        /// <summary>Does the device enforce a maximum number of roles.</summary>
        [Newtonsoft.Json.JsonProperty("maxRoles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxRoles { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Upgrade
    {
        /// <summary>Minimum firmware size accepted by the device.</summary>
        [Newtonsoft.Json.JsonProperty("minSize", Required = Newtonsoft.Json.Required.Always)]
        public int MinSize { get; set; }

        /// <summary>Maximum firmware size accepted by the device.</summary>
        [Newtonsoft.Json.JsonProperty("maxSize", Required = Newtonsoft.Json.Required.Always)]
        public int MaxSize { get; set; }

        /// <summary>Firmware file extension(s) accepted by the device.</summary>
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Extensions { get; set; } = new System.Collections.ObjectModel.Collection<string>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Network2
    {
        /// <summary>Does the device support dns.</summary>
        [Newtonsoft.Json.JsonProperty("dns", Required = Newtonsoft.Json.Required.Always)]
        public bool Dns { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Icon
    {
        [Newtonsoft.Json.JsonProperty("interfaces", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Interfaces Interfaces { get; set; } = new Interfaces();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections
    {
        [Newtonsoft.Json.JsonProperty("view", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConnectionsView View { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Linking
    {
        [Newtonsoft.Json.JsonProperty("supportedDevices", Required = Newtonsoft.Json.Required.Always)]
        public int SupportedDevices { get; set; }

        [Newtonsoft.Json.JsonProperty("maxDevices", Required = Newtonsoft.Json.Required.Always)]
        public int MaxDevices { get; set; }

        /// <summary>true if the device supports resolving hostnames for linking.</summary>
        [Newtonsoft.Json.JsonProperty("nameResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NameResolution { get; set; }

        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Options> Options { get; set; } = new System.Collections.ObjectModel.Collection<Options>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventsType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventsValue? Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ExternalDevices
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalDevicesType? Type { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Users
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UsersType? Type { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ResponseType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HMS-4X")]
        HMS4X = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HBP-2X")]
        HBP2X = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HRM-4X")]
        HRM4X = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HKB-2X")]
        HKB2X = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII")]
        FSII = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4W2")]
        LQ4W2 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-2W2")]
        LQ2W2 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4WG2")]
        LQ4WG2 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R4W8")]
        LQR4W8 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R4W4")]
        LQR4W4 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R4FWG")]
        LQR4FWG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R4WG8")]
        LQR4WG8 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R2W2-4WG2")]
        LQR2W24WG2 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R2W4-4WG4")]
        LQR2W44WG4 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R2W4-4W4")]
        LQR2W44W4 = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Roles2
    {
        /// <summary>Does the device have dynamic roles. (Review this)</summary>
        [Newtonsoft.Json.JsonProperty("isDynamic", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDynamic { get; set; }

        /// <summary>Does the device support role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("device", Required = Newtonsoft.Json.Required.Always)]
        public bool Device { get; set; }

        /// <summary>Does the device support assigning roles to it's endpoints.</summary>
        [Newtonsoft.Json.JsonProperty("endpoint", Required = Newtonsoft.Json.Required.Always)]
        public bool Endpoint { get; set; }

        /// <summary>Does the device enforce a maximum number of roles.</summary>
        [Newtonsoft.Json.JsonProperty("maxRoles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxRoles { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Upgrade2
    {
        /// <summary>Minimum firmware size accepted by the device.</summary>
        [Newtonsoft.Json.JsonProperty("minSize", Required = Newtonsoft.Json.Required.Always)]
        public int MinSize { get; set; }

        /// <summary>Maximum firmware size accepted by the device.</summary>
        [Newtonsoft.Json.JsonProperty("maxSize", Required = Newtonsoft.Json.Required.Always)]
        public int MaxSize { get; set; }

        /// <summary>Firmware file extension(s) accepted by the device.</summary>
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Extensions { get; set; } = new System.Collections.ObjectModel.Collection<string>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Network3
    {
        /// <summary>Does the device support dns.</summary>
        [Newtonsoft.Json.JsonProperty("dns", Required = Newtonsoft.Json.Required.Always)]
        public bool Dns { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Icon2
    {
        [Newtonsoft.Json.JsonProperty("interfaces", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Interfaces2 Interfaces { get; set; } = new Interfaces2();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections2
    {
        [Newtonsoft.Json.JsonProperty("view", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Connections2View View { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Linking2
    {
        [Newtonsoft.Json.JsonProperty("supportedDevices", Required = Newtonsoft.Json.Required.Always)]
        public int SupportedDevices { get; set; }

        [Newtonsoft.Json.JsonProperty("maxDevices", Required = Newtonsoft.Json.Required.Always)]
        public int MaxDevices { get; set; }

        /// <summary>true if the device supports resolving hostnames for linking.</summary>
        [Newtonsoft.Json.JsonProperty("nameResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NameResolution { get; set; }

        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Options2> Options { get; set; } = new System.Collections.ObjectModel.Collection<Options2>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events2
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events2Type? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events2Value? Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ExternalDevices2
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalDevices2Type? Type { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Users2
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Users2Type? Type { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Type3
    {
        [System.Runtime.Serialization.EnumMember(Value = @"partyline")]
        Partyline = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"direct")]
        Direct = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Response3Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"partyline")]
        Partyline = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"direct")]
        Direct = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Type4
    {
        [System.Runtime.Serialization.EnumMember(Value = @"FSII-2W")]
        FSII2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-4W")]
        FSII4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HLI-2W")]
        HLI2W = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HLI-4W")]
        HLI4W = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-2W")]
        LQ2W = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4W")]
        LQ4W = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4WG")]
        LQ4WG = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-IVC")]
        LQIVC = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox3
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Vox3Value Value { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Vox3Label Label { get; set; }

        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Default { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Response5Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"FSII-2W")]
        FSII2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-4W")]
        FSII4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HLI-2W")]
        HLI2W = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HLI-4W")]
        HLI4W = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-2W")]
        LQ2W = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4W")]
        LQ4W = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4WG")]
        LQ4WG = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-IVC")]
        LQIVC = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox4
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Vox4Value Value { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Vox4Label Label { get; set; }

        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Default { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections3
    {
        [Newtonsoft.Json.JsonProperty("dynamic", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Dynamic { get; set; }

        [Newtonsoft.Json.JsonProperty("labelLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LabelLength { get; set; }

        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Max { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Connections3Type? Type { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ExternalSystems
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalSystemsType? Type { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Users3
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Users3Type? Type { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Roles3
    {
        [Newtonsoft.Json.JsonProperty("labelLength", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LabelLength { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Roles3Type? Type { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NetworkOptimization
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NetworkOptimizationType? Type { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Response7Codec
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Opus")]
        Opus = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Wavepack")]
        Wavepack = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Device_settings
    {
        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Device_settingsDisplayBrightness? DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("network", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Network5 Network { get; set; } = new Network5();

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("otaPin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OtaPin { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("wirelessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WirelessId { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("adminPin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AdminPin { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("aaBatteryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Device_settingsAaBatteryType? AaBatteryType { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("roleSorting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Device_settingsRoleSorting? RoleSorting { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("OTAState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OTAState { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("asref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Asref { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Device_linking
    {
        [System.Runtime.Serialization.EnumMember(Value = @"linkMaster")]
        LinkMaster = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Device_netMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LAN")]
        LAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WAN")]
        WAN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Role
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Device_liveStatus
    {
        [Newtonsoft.Json.JsonProperty("power", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Power { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LicensedFeatures
    {
        /// <summary>Enabled feature name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LicensedFeaturesName? Name { get; set; }

        /// <summary>The number of activated items of this type. Defaults to 1 if qty is absent.</summary>
        [Newtonsoft.Json.JsonProperty("qty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Qty { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Device_settings2
    {
        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Device_settings2DisplayBrightness? DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("network", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Network6 Network { get; set; } = new Network6();

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("otaPin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OtaPin { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("wirelessId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WirelessId { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("adminPin", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AdminPin { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("aaBatteryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Device_settings2AaBatteryType? AaBatteryType { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("roleSorting", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Device_settings2RoleSorting? RoleSorting { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("OTAState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? OTAState { get; set; }

        /// <summary>Specific to FSII.</summary>
        [Newtonsoft.Json.JsonProperty("asref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Asref { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Response8Device_linking
    {
        [System.Runtime.Serialization.EnumMember(Value = @"linkMaster")]
        LinkMaster = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Response8Device_netMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LAN")]
        LAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WAN")]
        WAN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Role2
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Id { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Device_liveStatus2
    {
        [Newtonsoft.Json.JsonProperty("power", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Power { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LicensedFeatures2
    {
        /// <summary>Enabled feature name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LicensedFeatures2Name? Name { get; set; }

        /// <summary>The number of activated items of this type. Defaults to 1 if qty is absent.</summary>
        [Newtonsoft.Json.JsonProperty("qty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Qty { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Response15Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HMS-4X")]
        HMS4X = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HBP-2X")]
        HBP2X = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HRM-4X")]
        HRM4X = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HKB-2X")]
        HKB2X = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII")]
        FSII = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4W2")]
        LQ4W2 = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-2W2")]
        LQ2W2 = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4WG2")]
        LQ4WG2 = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R4W8")]
        LQR4W8 = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R4W4")]
        LQR4W4 = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R4FWG")]
        LQR4FWG = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R4WG8")]
        LQR4WG8 = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R2W2-4WG2")]
        LQR2W24WG2 = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R2W4-4WG4")]
        LQR2W44WG4 = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-R2W4-4W4")]
        LQR2W44W4 = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Roles4
    {
        /// <summary>Does the device have dynamic roles. (Review this)</summary>
        [Newtonsoft.Json.JsonProperty("isDynamic", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDynamic { get; set; }

        /// <summary>Does the device support role assignment.</summary>
        [Newtonsoft.Json.JsonProperty("device", Required = Newtonsoft.Json.Required.Always)]
        public bool Device { get; set; }

        /// <summary>Does the device support assigning roles to it's endpoints.</summary>
        [Newtonsoft.Json.JsonProperty("endpoint", Required = Newtonsoft.Json.Required.Always)]
        public bool Endpoint { get; set; }

        /// <summary>Does the device enforce a maximum number of roles.</summary>
        [Newtonsoft.Json.JsonProperty("maxRoles", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaxRoles { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Upgrade3
    {
        /// <summary>Minimum firmware size accepted by the device.</summary>
        [Newtonsoft.Json.JsonProperty("minSize", Required = Newtonsoft.Json.Required.Always)]
        public int MinSize { get; set; }

        /// <summary>Maximum firmware size accepted by the device.</summary>
        [Newtonsoft.Json.JsonProperty("maxSize", Required = Newtonsoft.Json.Required.Always)]
        public int MaxSize { get; set; }

        /// <summary>Firmware file extension(s) accepted by the device.</summary>
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Extensions { get; set; } = new System.Collections.ObjectModel.Collection<string>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Network4
    {
        /// <summary>Does the device support dns.</summary>
        [Newtonsoft.Json.JsonProperty("dns", Required = Newtonsoft.Json.Required.Always)]
        public bool Dns { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Icon3
    {
        [Newtonsoft.Json.JsonProperty("interfaces", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Interfaces3 Interfaces { get; set; } = new Interfaces3();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections4
    {
        [Newtonsoft.Json.JsonProperty("view", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Connections4View View { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Linking3
    {
        [Newtonsoft.Json.JsonProperty("supportedDevices", Required = Newtonsoft.Json.Required.Always)]
        public int SupportedDevices { get; set; }

        [Newtonsoft.Json.JsonProperty("maxDevices", Required = Newtonsoft.Json.Required.Always)]
        public int MaxDevices { get; set; }

        /// <summary>true if the device supports resolving hostnames for linking.</summary>
        [Newtonsoft.Json.JsonProperty("nameResolution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NameResolution { get; set; }

        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Options3> Options { get; set; } = new System.Collections.ObjectModel.Collection<Options3>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events3
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events3Type? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events3Value? Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class ExternalDevices3
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ExternalDevices3Type? Type { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Users4
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Users4Type? Type { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DevicesLiveStatusState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Connecting")]
        Connecting = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Connected")]
        Connected = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Disconnecting")]
        Disconnecting = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Disconnected")]
        Disconnected = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Endpoints
    {
        /// <summary>Uri that can be used to address the endpoint using REST.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Res { get; set; }

        /// <summary>UI name for endpoint identification.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        /// <summary>The current connection state of the endpoint</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EndpointsState? State { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Dependencies
    {
        /// <summary>The current upgrade stage for this dependency.</summary>
        [Newtonsoft.Json.JsonProperty("stage", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Stage { get; set; }

        [Newtonsoft.Json.JsonProperty("deviceType_name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DependenciesDeviceType_name? DeviceType_name { get; set; }

        [Newtonsoft.Json.JsonProperty("resources", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/devices/endpoints/[0-9]+$")]
        public string Resources { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Features3
    {
        /// <summary>The available feature's unique name.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Features3Name Name { get; set; }

        /// <summary>The number of available licenses for this feature.</summary>
        [Newtonsoft.Json.JsonProperty("qty", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public double Qty { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum EndpointType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HMS-4X")]
        HMS4X = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HBP-2X")]
        HBP2X = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HRM-4X")]
        HRM4X = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HKB-2X")]
        HKB2X = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-BP")]
        FSIIBP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-Antenna")]
        FSIIAntenna = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum EndpointFrequencyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"1.9")]
        _1_9 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"2.4")]
        _2_4 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Role3
    {
        /// <summary>Unique role id within the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Id { get; set; }

        /// <summary>UI name for endpoint's role identification.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        /// <summary>Role assigned to endpoint is the default one.</summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDefault { get; set; }

        /// <summary>Uri that can be used to address the endpoint's role using REST.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatusStatus Status { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Role { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings31 Settings { get; set; }

        [Newtonsoft.Json.JsonProperty("frequencyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatusFrequencyType? FrequencyType { get; set; }

        [Newtonsoft.Json.JsonProperty("syncState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatusSyncState? SyncState { get; set; }

        [Newtonsoft.Json.JsonProperty("antennaIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AntennaIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("antennaSlot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AntennaSlot { get; set; }

        [Newtonsoft.Json.JsonProperty("batteryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatusBatteryType? BatteryType { get; set; }

        [Newtonsoft.Json.JsonProperty("batteryLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BatteryLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("RSSSI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RSSSI { get; set; }

        [Newtonsoft.Json.JsonProperty("linkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LinkQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("frameErrorRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrameErrorRate { get; set; }

        [Newtonsoft.Json.JsonProperty("longevity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Longevity Longevity { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Endpoint2Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HMS-4X")]
        HMS4X = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HBP-2X")]
        HBP2X = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HRM-4X")]
        HRM4X = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HKB-2X")]
        HKB2X = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-BP")]
        FSIIBP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-Antenna")]
        FSIIAntenna = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Endpoint2FrequencyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"1.9")]
        _1_9 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"2.4")]
        _2_4 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Role4
    {
        /// <summary>Unique role id within the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Id { get; set; }

        /// <summary>UI name for endpoint's role identification.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        /// <summary>Role assigned to endpoint is the default one.</summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDefault { get; set; }

        /// <summary>Uri that can be used to address the endpoint's role using REST.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus2
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus2Status Status { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Role { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings32 Settings { get; set; }

        [Newtonsoft.Json.JsonProperty("frequencyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus2FrequencyType? FrequencyType { get; set; }

        [Newtonsoft.Json.JsonProperty("syncState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus2SyncState? SyncState { get; set; }

        [Newtonsoft.Json.JsonProperty("antennaIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AntennaIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("antennaSlot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AntennaSlot { get; set; }

        [Newtonsoft.Json.JsonProperty("batteryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus2BatteryType? BatteryType { get; set; }

        [Newtonsoft.Json.JsonProperty("batteryLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BatteryLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("RSSSI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RSSSI { get; set; }

        [Newtonsoft.Json.JsonProperty("linkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LinkQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("frameErrorRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrameErrorRate { get; set; }

        [Newtonsoft.Json.JsonProperty("longevity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Longevity2 Longevity { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Endpoint3Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HMS-4X")]
        HMS4X = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HBP-2X")]
        HBP2X = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HRM-4X")]
        HRM4X = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HKB-2X")]
        HKB2X = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-BP")]
        FSIIBP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-Antenna")]
        FSIIAntenna = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Endpoint3FrequencyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"1.9")]
        _1_9 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"2.4")]
        _2_4 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Role5
    {
        /// <summary>Unique role id within the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Id { get; set; }

        /// <summary>UI name for endpoint's role identification.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        /// <summary>Role assigned to endpoint is the default one.</summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDefault { get; set; }

        /// <summary>Uri that can be used to address the endpoint's role using REST.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus3
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus3Status Status { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Role { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings33 Settings { get; set; }

        [Newtonsoft.Json.JsonProperty("frequencyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus3FrequencyType? FrequencyType { get; set; }

        [Newtonsoft.Json.JsonProperty("syncState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus3SyncState? SyncState { get; set; }

        [Newtonsoft.Json.JsonProperty("antennaIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AntennaIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("antennaSlot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AntennaSlot { get; set; }

        [Newtonsoft.Json.JsonProperty("batteryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus3BatteryType? BatteryType { get; set; }

        [Newtonsoft.Json.JsonProperty("batteryLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BatteryLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("RSSSI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RSSSI { get; set; }

        [Newtonsoft.Json.JsonProperty("linkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LinkQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("frameErrorRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrameErrorRate { get; set; }

        [Newtonsoft.Json.JsonProperty("longevity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Longevity3 Longevity { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Endpoint4Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HMS-4X")]
        HMS4X = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HBP-2X")]
        HBP2X = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HRM-4X")]
        HRM4X = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HKB-2X")]
        HKB2X = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-BP")]
        FSIIBP = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-Antenna")]
        FSIIAntenna = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Endpoint4FrequencyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"1.9")]
        _1_9 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"2.4")]
        _2_4 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Role6
    {
        /// <summary>Unique role id within the link group.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Id { get; set; }

        /// <summary>UI name for endpoint's role identification.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        /// <summary>Role assigned to endpoint is the default one.</summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.Always)]
        public bool IsDefault { get; set; }

        /// <summary>Uri that can be used to address the endpoint's role using REST.</summary>
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus4
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus4Status Status { get; set; }

        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Role { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Settings34 Settings { get; set; }

        [Newtonsoft.Json.JsonProperty("frequencyType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus4FrequencyType? FrequencyType { get; set; }

        [Newtonsoft.Json.JsonProperty("syncState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus4SyncState? SyncState { get; set; }

        [Newtonsoft.Json.JsonProperty("antennaIndex", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AntennaIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("antennaSlot", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AntennaSlot { get; set; }

        [Newtonsoft.Json.JsonProperty("batteryType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus4BatteryType? BatteryType { get; set; }

        [Newtonsoft.Json.JsonProperty("batteryLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BatteryLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("RSSSI", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RSSSI { get; set; }

        [Newtonsoft.Json.JsonProperty("linkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LinkQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("frameErrorRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FrameErrorRate { get; set; }

        [Newtonsoft.Json.JsonProperty("longevity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Longevity4 Longevity { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum IVCDevice3Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings17
    {
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ip { get; set; }

        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int Port { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous17
    {
        /// <summary>The port id unique only within the external device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The parent external device id.</summary>
        [Newtonsoft.Json.JsonProperty("externalDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExternalDeviceId { get; set; }

        /// <summary>External port type compatible with the parent external device type.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type9 Type { get; set; }

        /// <summary>Label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>Short code to identify the port.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus14 LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings35 Settings { get; set; } = new Settings35();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SIPServer3Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings18
    {
        /// <summary>IP or hostname to reach the registrar.</summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ip { get; set; }

        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int Port { get; set; }

        /// <summary>Default domain to be used for SIP users.</summary>
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }

        /// <summary>Communication protocol to be used with the registrar.</summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings18Protocol? Protocol { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous18
    {
        /// <summary>The port id unique only within the external device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The parent external device id.</summary>
        [Newtonsoft.Json.JsonProperty("externalDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExternalDeviceId { get; set; }

        /// <summary>External port type compatible with the parent external device type.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type10 Type { get; set; }

        /// <summary>Label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>Short code to identify the port.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus15 LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings36 Settings { get; set; } = new Settings36();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum IVCDevice4Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings19
    {
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ip { get; set; }

        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Always)]
        public int Port { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Ports
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("externalDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExternalDeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public PortsType Type { get; set; }

        /// <summary>The external port identification label.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue)]
        public string Label { get; set; }

        /// <summary>The external port description.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings37 Settings { get; set; } = new Settings37();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SIPServer4Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings20
    {
        /// <summary>IP or hostname to reach the registrar.</summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ip { get; set; }

        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int Port { get; set; }

        /// <summary>Default domain to be used for SIP users.</summary>
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }

        /// <summary>Communication protocol to be used with the registrar.</summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings20Protocol? Protocol { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Ports2
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        [Newtonsoft.Json.JsonProperty("externalDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExternalDeviceId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public Ports2Type Type { get; set; }

        /// <summary>The external port identification label.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string Label { get; set; }

        /// <summary>The external port description.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings38 Settings { get; set; } = new Settings38();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NewDevice
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum IVCDevice5Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings21
    {
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ip { get; set; }

        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int Port { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous19
    {
        /// <summary>The port id unique only within the external device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The parent external device id.</summary>
        [Newtonsoft.Json.JsonProperty("externalDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExternalDeviceId { get; set; }

        /// <summary>External port type compatible with the parent external device type.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type11 Type { get; set; }

        /// <summary>Label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>Short code to identify the port.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus16 LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings39 Settings { get; set; } = new Settings39();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SIPServer5Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings22
    {
        /// <summary>IP or hostname to reach the registrar.</summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ip { get; set; }

        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int Port { get; set; }

        /// <summary>Default domain to be used for SIP users.</summary>
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }

        /// <summary>Communication protocol to be used with the registrar.</summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings22Protocol? Protocol { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous20
    {
        /// <summary>The port id unique only within the external device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The parent external device id.</summary>
        [Newtonsoft.Json.JsonProperty("externalDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExternalDeviceId { get; set; }

        /// <summary>External port type compatible with the parent external device type.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type12 Type { get; set; }

        /// <summary>Label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>Short code to identify the port.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus17 LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings40 Settings { get; set; } = new Settings40();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum IVCDevice6Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings23
    {
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ip { get; set; }

        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int Port { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous21
    {
        /// <summary>The port id unique only within the external device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The parent external device id.</summary>
        [Newtonsoft.Json.JsonProperty("externalDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExternalDeviceId { get; set; }

        /// <summary>External port type compatible with the parent external device type.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type13 Type { get; set; }

        /// <summary>Label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>Short code to identify the port.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus18 LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings41 Settings { get; set; } = new Settings41();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SIPServer6Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings24
    {
        /// <summary>IP or hostname to reach the registrar.</summary>
        [Newtonsoft.Json.JsonProperty("ip", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Ip { get; set; }

        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int Port { get; set; }

        /// <summary>Default domain to be used for SIP users.</summary>
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }

        /// <summary>Communication protocol to be used with the registrar.</summary>
        [Newtonsoft.Json.JsonProperty("protocol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings24Protocol? Protocol { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous22
    {
        /// <summary>The port id unique only within the external device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The parent external device id.</summary>
        [Newtonsoft.Json.JsonProperty("externalDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ExternalDeviceId { get; set; }

        /// <summary>External port type compatible with the parent external device type.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type14 Type { get; set; }

        /// <summary>Label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>Short code to identify the port.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("liveStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LiveStatus19 LiveStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Settings42 Settings { get; set; } = new Settings42();

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Type5
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus5
    {
        /// <summary>The external connection live status</summary>
        [Newtonsoft.Json.JsonProperty("externalConnectionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalConnectionStatus { get; set; }

        /// <summary>The SIP registration status code.</summary>
        [Newtonsoft.Json.JsonProperty("sipRegistrationStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SipRegistrationStatusCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings25
    {
        /// <summary>Login for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }

        /// <summary>Password for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>Assigned device id in the link-group.</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NewPort
    {
        /// <summary>The port id unique only within the external device.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>The parent external device id.</summary>
        [Newtonsoft.Json.JsonProperty("externalDeviceId", Required = Newtonsoft.Json.Required.Always)]
        public int ExternalDeviceId { get; set; }

        /// <summary>External port type compatible with the parent external device type.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NewPortType Type { get; set; }

        /// <summary>Label for display purpose.</summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        /// <summary>Short code to identify the port.</summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("settings", Required = Newtonsoft.Json.Required.Always)]
        public Settings43 Settings { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Type6
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus6
    {
        /// <summary>The external connection live status</summary>
        [Newtonsoft.Json.JsonProperty("externalConnectionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalConnectionStatus { get; set; }

        /// <summary>The SIP registration status code.</summary>
        [Newtonsoft.Json.JsonProperty("sipRegistrationStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SipRegistrationStatusCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings26
    {
        /// <summary>Login for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }

        /// <summary>Password for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>Assigned device id in the link-group.</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum InterfaceAudioInterfaceType_longName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2-Wire")]
        _2Wire = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4-Wire")]
        _4Wire = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4-Wire + GPIO")]
        _4Wire___GPIO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Station")]
        Station = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum InterfaceAudioInterfaceType_shortName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2W")]
        _2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4W")]
        _4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4WG")]
        _4WG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E1")]
        E1 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum InterfaceAudioInterfaceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LQ-2W")]
        LQ2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4W")]
        LQ4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4WG")]
        LQ4WG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-IVC")]
        LQIVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-2W")]
        FSII2W = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-4W")]
        FSII4W = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-E1")]
        FSIIE1 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum InterfaceAudioInterfaceType_partNum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2W2P-001")]
        _2W2P001 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4W2P-001")]
        _4W2P001 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4W2P-GPIO-001")]
        _4W2PGPIO001 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC-001")]
        IVC001 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E1-001")]
        E1001 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AudioInterface_settings
    {
        /// <summary>2W interface mode.</summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AudioInterface_settingsMode? Mode { get; set; }

        /// <summary>Whether the 2W interface provides power or not.</summary>
        [Newtonsoft.Json.JsonProperty("power", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Power { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AudioInterface_liveStatus
    {
        /// <summary>Whether power is sensed on this interface.</summary>
        [Newtonsoft.Json.JsonProperty("powerSense", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PowerSense { get; set; }

        [Newtonsoft.Json.JsonProperty("powerOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PowerOn { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Interface2AudioInterfaceType_longName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2-Wire")]
        _2Wire = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4-Wire")]
        _4Wire = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4-Wire + GPIO")]
        _4Wire___GPIO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Station")]
        Station = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Interface2AudioInterfaceType_shortName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2W")]
        _2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4W")]
        _4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4WG")]
        _4WG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E1")]
        E1 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Interface2AudioInterfaceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LQ-2W")]
        LQ2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4W")]
        LQ4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4WG")]
        LQ4WG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-IVC")]
        LQIVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-2W")]
        FSII2W = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-4W")]
        FSII4W = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-E1")]
        FSIIE1 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Interface2AudioInterfaceType_partNum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2W2P-001")]
        _2W2P001 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4W2P-001")]
        _4W2P001 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4W2P-GPIO-001")]
        _4W2PGPIO001 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC-001")]
        IVC001 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E1-001")]
        E1001 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AudioInterface_settings2
    {
        /// <summary>2W interface mode.</summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AudioInterface_settings2Mode? Mode { get; set; }

        /// <summary>Whether the 2W interface provides power or not.</summary>
        [Newtonsoft.Json.JsonProperty("power", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Power { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AudioInterface_liveStatus2
    {
        /// <summary>Whether power is sensed on this interface.</summary>
        [Newtonsoft.Json.JsonProperty("powerSense", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PowerSense { get; set; }

        [Newtonsoft.Json.JsonProperty("powerOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PowerOn { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Interface3AudioInterfaceType_longName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2-Wire")]
        _2Wire = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4-Wire")]
        _4Wire = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4-Wire + GPIO")]
        _4Wire___GPIO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Station")]
        Station = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Interface3AudioInterfaceType_shortName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2W")]
        _2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4W")]
        _4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4WG")]
        _4WG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E1")]
        E1 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Interface3AudioInterfaceType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LQ-2W")]
        LQ2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4W")]
        LQ4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4WG")]
        LQ4WG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-IVC")]
        LQIVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-2W")]
        FSII2W = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-4W")]
        FSII4W = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-E1")]
        FSIIE1 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Interface3AudioInterfaceType_partNum
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2W2P-001")]
        _2W2P001 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4W2P-001")]
        _4W2P001 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4W2P-GPIO-001")]
        _4W2PGPIO001 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC-001")]
        IVC001 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E1-001")]
        E1001 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AudioInterface_settings3
    {
        /// <summary>2W interface mode.</summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AudioInterface_settings3Mode? Mode { get; set; }

        /// <summary>Whether the 2W interface provides power or not.</summary>
        [Newtonsoft.Json.JsonProperty("power", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Power { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class AudioInterface_liveStatus3
    {
        /// <summary>Whether power is sensed on this interface.</summary>
        [Newtonsoft.Json.JsonProperty("powerSense", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PowerSense { get; set; }

        [Newtonsoft.Json.JsonProperty("powerOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PowerOn { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Response110Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"FSII-2W")]
        FSII2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-4W")]
        FSII4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HLI-2W")]
        HLI2W = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HLI-4W")]
        HLI4W = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-2W")]
        LQ2W = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4W")]
        LQ4W = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-4WG")]
        LQ4WG = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"LQ-IVC")]
        LQIVC = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox5
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Vox5Value Value { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Vox5Label Label { get; set; }

        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Default { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous23
    {
        [Newtonsoft.Json.JsonProperty("connectionId", Required = Newtonsoft.Json.Required.Always)]
        public int ConnectionId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Port_settings
    {
        /// <summary>Input gain in dB [-12, -9, -6, -3, 0, +3, +6, +9, +12] on 4W, 4WG and IVC, [-3, -2, -1, 0, +1, +2, +3] on 2W.</summary>
        [Newtonsoft.Json.JsonProperty("inputGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? InputGain { get; set; }

        /// <summary>Output gain in dB [-12, -9, -6, -3, 0, +3, +6, +9, +12] on 4W, 4WG and IVC, [-3, -2, -1, 0, +1, +2, +3] on 2W.</summary>
        [Newtonsoft.Json.JsonProperty("outputGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? OutputGain { get; set; }

        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vox6 Vox { get; set; }

        [Newtonsoft.Json.JsonProperty("networkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkQuality3 NetworkQuality { get; set; }

        /// <summary>4W pinout type</summary>
        [Newtonsoft.Json.JsonProperty("pinout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Port_settingsPinout? Pinout { get; set; }

        [Newtonsoft.Json.JsonProperty("serial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial3 Serial { get; set; }

        /// <summary>Enable/disable silence suppression on the codec.</summary>
        [Newtonsoft.Json.JsonProperty("silenceSupp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SilenceSupp { get; set; }

        /// <summary>true to allow this port to be assigned to more than 1 channel.</summary>
        [Newtonsoft.Json.JsonProperty("multiChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MultiChannel { get; set; }

        [Newtonsoft.Json.JsonProperty("externalNetworkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Port_settingsExternalNetworkQuality? ExternalNetworkQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("externalSilenceSuppression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExternalSilenceSuppression { get; set; }

        [Newtonsoft.Json.JsonProperty("gpis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gpis3> Gpis { get; set; }

        [Newtonsoft.Json.JsonProperty("gpos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gpos3> Gpos { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmOutputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PgmOutputEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Port_settingsMode? Mode { get; set; }

        [Newtonsoft.Json.JsonProperty("gpoTriggerEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GpoTriggerEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkInputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RmkInputEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkOutputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RmkOutputEnabled { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Add4AudioInterfaceType_shortName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2W")]
        _2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4W")]
        _4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4WG")]
        _4WG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E1")]
        E1 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Add4AudioInterfaceType_longName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2-Wire")]
        _2Wire = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4-Wire")]
        _4Wire = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4-Wire + GPIO")]
        _4Wire___GPIO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Station")]
        Station = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus7
    {
        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Vox7 Vox { get; set; } = new Vox7();

        [Newtonsoft.Json.JsonProperty("online", Required = Newtonsoft.Json.Required.Always)]
        public bool Online { get; set; }

        /// <summary>The external connection live status</summary>
        [Newtonsoft.Json.JsonProperty("externalConnectionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalConnectionStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("sipRegistrationStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SipRegistrationStatusCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Add4Port_config_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2W")]
        _2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4W")]
        _4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4WG")]
        _4WG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E1")]
        E1 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous24
    {
        [Newtonsoft.Json.JsonProperty("connectionId", Required = Newtonsoft.Json.Required.Always)]
        public int ConnectionId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Port_settings2
    {
        /// <summary>Input gain in dB [-12, -9, -6, -3, 0, +3, +6, +9, +12] on 4W, 4WG and IVC, [-3, -2, -1, 0, +1, +2, +3] on 2W.</summary>
        [Newtonsoft.Json.JsonProperty("inputGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? InputGain { get; set; }

        /// <summary>Output gain in dB [-12, -9, -6, -3, 0, +3, +6, +9, +12] on 4W, 4WG and IVC, [-3, -2, -1, 0, +1, +2, +3] on 2W.</summary>
        [Newtonsoft.Json.JsonProperty("outputGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? OutputGain { get; set; }

        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vox8 Vox { get; set; }

        [Newtonsoft.Json.JsonProperty("networkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkQuality4 NetworkQuality { get; set; }

        /// <summary>4W pinout type</summary>
        [Newtonsoft.Json.JsonProperty("pinout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Port_settings2Pinout? Pinout { get; set; }

        [Newtonsoft.Json.JsonProperty("serial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial4 Serial { get; set; }

        /// <summary>Enable/disable silence suppression on the codec.</summary>
        [Newtonsoft.Json.JsonProperty("silenceSupp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SilenceSupp { get; set; }

        /// <summary>true to allow this port to be assigned to more than 1 channel.</summary>
        [Newtonsoft.Json.JsonProperty("multiChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MultiChannel { get; set; }

        [Newtonsoft.Json.JsonProperty("externalNetworkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Port_settings2ExternalNetworkQuality? ExternalNetworkQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("externalSilenceSuppression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExternalSilenceSuppression { get; set; }

        [Newtonsoft.Json.JsonProperty("gpis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gpis4> Gpis { get; set; }

        [Newtonsoft.Json.JsonProperty("gpos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gpos4> Gpos { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmOutputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PgmOutputEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Port_settings2Mode? Mode { get; set; }

        [Newtonsoft.Json.JsonProperty("gpoTriggerEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GpoTriggerEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkInputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RmkInputEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkOutputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RmkOutputEnabled { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Add5AudioInterfaceType_shortName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2W")]
        _2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4W")]
        _4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4WG")]
        _4WG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E1")]
        E1 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Add5AudioInterfaceType_longName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2-Wire")]
        _2Wire = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4-Wire")]
        _4Wire = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4-Wire + GPIO")]
        _4Wire___GPIO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Station")]
        Station = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus8
    {
        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Vox9 Vox { get; set; } = new Vox9();

        [Newtonsoft.Json.JsonProperty("online", Required = Newtonsoft.Json.Required.Always)]
        public bool Online { get; set; }

        /// <summary>The external connection live status</summary>
        [Newtonsoft.Json.JsonProperty("externalConnectionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalConnectionStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("sipRegistrationStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SipRegistrationStatusCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Add5Port_config_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2W")]
        _2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4W")]
        _4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4WG")]
        _4WG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E1")]
        E1 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous25
    {
        [Newtonsoft.Json.JsonProperty("connectionId", Required = Newtonsoft.Json.Required.Always)]
        public int ConnectionId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Port_settings3
    {
        /// <summary>Input gain in dB [-12, -9, -6, -3, 0, +3, +6, +9, +12] on 4W, 4WG and IVC, [-3, -2, -1, 0, +1, +2, +3] on 2W.</summary>
        [Newtonsoft.Json.JsonProperty("inputGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? InputGain { get; set; }

        /// <summary>Output gain in dB [-12, -9, -6, -3, 0, +3, +6, +9, +12] on 4W, 4WG and IVC, [-3, -2, -1, 0, +1, +2, +3] on 2W.</summary>
        [Newtonsoft.Json.JsonProperty("outputGain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int? OutputGain { get; set; }

        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Vox10 Vox { get; set; }

        [Newtonsoft.Json.JsonProperty("networkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkQuality5 NetworkQuality { get; set; }

        /// <summary>4W pinout type</summary>
        [Newtonsoft.Json.JsonProperty("pinout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Port_settings3Pinout? Pinout { get; set; }

        [Newtonsoft.Json.JsonProperty("serial", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial5 Serial { get; set; }

        /// <summary>Enable/disable silence suppression on the codec.</summary>
        [Newtonsoft.Json.JsonProperty("silenceSupp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SilenceSupp { get; set; }

        /// <summary>true to allow this port to be assigned to more than 1 channel.</summary>
        [Newtonsoft.Json.JsonProperty("multiChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MultiChannel { get; set; }

        [Newtonsoft.Json.JsonProperty("externalNetworkQuality", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Port_settings3ExternalNetworkQuality? ExternalNetworkQuality { get; set; }

        [Newtonsoft.Json.JsonProperty("externalSilenceSuppression", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ExternalSilenceSuppression { get; set; }

        [Newtonsoft.Json.JsonProperty("gpis", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gpis5> Gpis { get; set; }

        [Newtonsoft.Json.JsonProperty("gpos", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gpos5> Gpos { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmOutputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? PgmOutputEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Port_settings3Mode? Mode { get; set; }

        [Newtonsoft.Json.JsonProperty("gpoTriggerEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GpoTriggerEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkInputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RmkInputEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkOutputEnabled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? RmkOutputEnabled { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Add6AudioInterfaceType_shortName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2W")]
        _2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4W")]
        _4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4WG")]
        _4WG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E1")]
        E1 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Add6AudioInterfaceType_longName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2-Wire")]
        _2Wire = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4-Wire")]
        _4Wire = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4-Wire + GPIO")]
        _4Wire___GPIO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Station")]
        Station = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus9
    {
        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Vox11 Vox { get; set; } = new Vox11();

        [Newtonsoft.Json.JsonProperty("online", Required = Newtonsoft.Json.Required.Always)]
        public bool Online { get; set; }

        /// <summary>The external connection live status</summary>
        [Newtonsoft.Json.JsonProperty("externalConnectionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalConnectionStatus { get; set; }

        [Newtonsoft.Json.JsonProperty("sipRegistrationStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SipRegistrationStatusCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Add6Port_config_type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"2W")]
        _2W = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"4W")]
        _4W = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"4WG")]
        _4WG = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"E1")]
        E1 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus10
    {
        /// <summary>Caller ID</summary>
        [Newtonsoft.Json.JsonProperty("callerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallerId { get; set; }

        /// <summary>Current status of the call</summary>
        [Newtonsoft.Json.JsonProperty("sipCallStatusCode", Required = Newtonsoft.Json.Required.Always)]
        public double SipCallStatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Vox12 Vox { get; set; } = new Vox12();

        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus10Codec? Codec { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus11
    {
        /// <summary>Caller ID</summary>
        [Newtonsoft.Json.JsonProperty("callerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallerId { get; set; }

        /// <summary>Current status of the call</summary>
        [Newtonsoft.Json.JsonProperty("sipCallStatusCode", Required = Newtonsoft.Json.Required.Always)]
        public double SipCallStatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Vox13 Vox { get; set; } = new Vox13();

        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus11Codec? Codec { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus12
    {
        /// <summary>Caller ID</summary>
        [Newtonsoft.Json.JsonProperty("callerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallerId { get; set; }

        /// <summary>Current status of the call</summary>
        [Newtonsoft.Json.JsonProperty("sipCallStatusCode", Required = Newtonsoft.Json.Required.Always)]
        public double SipCallStatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Vox14 Vox { get; set; } = new Vox14();

        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus12Codec? Codec { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus13
    {
        /// <summary>Caller ID</summary>
        [Newtonsoft.Json.JsonProperty("callerId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CallerId { get; set; }

        /// <summary>Current status of the call</summary>
        [Newtonsoft.Json.JsonProperty("sipCallStatusCode", Required = Newtonsoft.Json.Required.Always)]
        public double SipCallStatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("vox", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Vox15 Vox { get; set; } = new Vox15();

        [Newtonsoft.Json.JsonProperty("codec", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LiveStatus13Codec? Codec { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ConnectionType2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"partyline")]
        Partyline = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"direct")]
        Direct = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Add7Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"partyline")]
        Partyline = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"direct")]
        Direct = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Participants
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParticipantsState? State { get; set; }

        [Newtonsoft.Json.JsonProperty("joinState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParticipantsJoinState? JoinState { get; set; }

        [Newtonsoft.Json.JsonProperty("device_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Device_id { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParticipantsType? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Connection2Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"partyline")]
        Partyline = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"direct")]
        Direct = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Add8Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"partyline")]
        Partyline = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"direct")]
        Direct = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Participants2
    {
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Participants2State? State { get; set; }

        [Newtonsoft.Json.JsonProperty("joinState", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Participants2JoinState? JoinState { get; set; }

        [Newtonsoft.Json.JsonProperty("device_id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int? Device_id { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Participants2Type? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Type7
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HMS-4X")]
        HMS4X = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum IsDefault2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings27
    {
        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings27DisplayBrightness DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("keyBrightness", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings27KeyBrightness KeyBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("screensaverMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings27ScreensaverMode ScreensaverMode { get; set; }

        [Newtonsoft.Json.JsonProperty("menuAccessEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool MenuAccessEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("allTalkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings27AllTalkBtnMode AllTalkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings27RmkBtnMode RmkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(4)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Keysets15> Keysets { get; set; } = new System.Collections.ObjectModel.Collection<Keysets15>();

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-18, 0)]
        public int SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings27SidetoneControl SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings27HeadphoneLimit HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 12)]
        public int HeadphoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("headsetMicType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings27HeadsetMicType HeadsetMicType { get; set; }

        [Newtonsoft.Json.JsonProperty("micHeadroom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings27MicHeadroom MicHeadroom { get; set; }

        [Newtonsoft.Json.JsonProperty("micContourFilterEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool MicContourFilterEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmLabel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PgmLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int PgmGain { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmVoxEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool PgmVoxEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmGpoTriggerEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool PgmGpoTriggerEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmVoxOffDelayMs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(500, 4000)]
        public int PgmVoxOffDelayMs { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmIfbDimLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-80, 0)]
        public int PgmIfbDimLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmAssignments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PgmAssignments6> PgmAssignments { get; set; } = new System.Collections.ObjectModel.Collection<PgmAssignments6>();

        [Newtonsoft.Json.JsonProperty("saLabel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SaLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("saGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int SaGain { get; set; }

        [Newtonsoft.Json.JsonProperty("saBtnLatchEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool SaBtnLatchEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("hotMicGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int HotMicGain { get; set; }

        [Newtonsoft.Json.JsonProperty("loudspeakerDimLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-24, 0)]
        public int LoudspeakerDimLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("gpios", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Gpios6> Gpios { get; set; } = new System.Collections.ObjectModel.Collection<Gpios6>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Response151Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HMS-4X")]
        HMS4X = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Response151IsDefault
    {
        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings28
    {
        [Newtonsoft.Json.JsonProperty("displayBrightness", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings28DisplayBrightness DisplayBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("keyBrightness", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings28KeyBrightness KeyBrightness { get; set; }

        [Newtonsoft.Json.JsonProperty("screensaverMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings28ScreensaverMode ScreensaverMode { get; set; }

        [Newtonsoft.Json.JsonProperty("menuAccessEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool MenuAccessEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("allTalkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings28AllTalkBtnMode AllTalkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("rmkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings28RmkBtnMode RmkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("keysets", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(4)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Keysets16> Keysets { get; set; } = new System.Collections.ObjectModel.Collection<Keysets16>();

        [Newtonsoft.Json.JsonProperty("sidetoneGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-18, 0)]
        public int SidetoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("sidetoneControl", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings28SidetoneControl SidetoneControl { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneLimit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings28HeadphoneLimit HeadphoneLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("headphoneGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 12)]
        public int HeadphoneGain { get; set; }

        [Newtonsoft.Json.JsonProperty("headsetMicType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings28HeadsetMicType HeadsetMicType { get; set; }

        [Newtonsoft.Json.JsonProperty("micHeadroom", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Settings28MicHeadroom MicHeadroom { get; set; }

        [Newtonsoft.Json.JsonProperty("micContourFilterEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool MicContourFilterEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmLabel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string PgmLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int PgmGain { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmVoxEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool PgmVoxEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmGpoTriggerEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool PgmGpoTriggerEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmVoxOffDelayMs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(500, 4000)]
        public int PgmVoxOffDelayMs { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmIfbDimLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-80, 0)]
        public int PgmIfbDimLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("pgmAssignments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<PgmAssignments7> PgmAssignments { get; set; } = new System.Collections.ObjectModel.Collection<PgmAssignments7>();

        [Newtonsoft.Json.JsonProperty("saLabel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SaLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("saGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int SaGain { get; set; }

        [Newtonsoft.Json.JsonProperty("saBtnLatchEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool SaBtnLatchEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("hotMicGain", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-12, 12)]
        public int HotMicGain { get; set; }

        [Newtonsoft.Json.JsonProperty("loudspeakerDimLevel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(-24, 0)]
        public int LoudspeakerDimLevel { get; set; }

        [Newtonsoft.Json.JsonProperty("gpios", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Gpios7> Gpios { get; set; } = new System.Collections.ObjectModel.Collection<Gpios7>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Type8
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LQ-AIC")]
        LQAIC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings29
    {
        /// <summary>The username for the agent-ic account.</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Login { get; set; }

        /// <summary>The password for the agent-ic account.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>The device ID that the account is pair with (0 if unassigned).</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.Always)]
        public int AssignedDeviceId { get; set; }

        /// <summary>The default role to assign to the device (0 if unassigned).</summary>
        [Newtonsoft.Json.JsonProperty("defaultRole", Required = Newtonsoft.Json.Required.Always)]
        public int DefaultRole { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Response167Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LQ-AIC")]
        LQAIC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings30
    {
        /// <summary>The username for the agent-ic account.</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Login { get; set; }

        /// <summary>The password for the agent-ic account.</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>The device ID that the account is pair with (0 if unassigned).</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.Always)]
        public int AssignedDeviceId { get; set; }

        /// <summary>The default role to assign to the device (0 if unassigned).</summary>
        [Newtonsoft.Json.JsonProperty("defaultRole", Required = Newtonsoft.Json.Required.Always)]
        public int DefaultRole { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections5
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum KeysetsActivationState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"listen")]
        Listen = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"talklisten")]
        Talklisten = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"dualtalklisten")]
        Dualtalklisten = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"forcelisten")]
        Forcelisten = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"talkforcelisten")]
        Talkforcelisten = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"forcetalkforcelisten")]
        Forcetalkforcelisten = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum KeysetsTalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"latching")]
        Latching = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-latching")]
        NonLatching = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Features2Name
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIP8-LQ")]
        SIP8LQ = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC-LQ")]
        AGENTICLQ = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC8-LQ")]
        AGENTIC8LQ = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP8-LQ-DEMO")]
        SIP8LQDEMO = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC-LQ-DEMO")]
        AGENTICLQDEMO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC8-LQ-DEMO")]
        AGENTIC8LQDEMO = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NetworkMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"dhcp")]
        Dhcp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"static")]
        Static = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class StaticIP
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Netmask
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gateway
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Dns1
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Dns2
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Extip
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings3Protocol
    {
        [System.Runtime.Serialization.EnumMember(Value = @"udp")]
        Udp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"tcp")]
        Tcp = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"tls")]
        Tls = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings5Protocol
    {
        [System.Runtime.Serialization.EnumMember(Value = @"udp")]
        Udp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"tcp")]
        Tcp = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"tls")]
        Tls = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum VoxState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fixed")]
        Fixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"adaptive")]
        Adaptive = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events4
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events4Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events4Value Value { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Connections { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SerialState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"enabled")]
        Enabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SerialBaudRate
    {
        _300 = 300,

        _600 = 600,

        _1200 = 1200,

        _2400 = 2400,

        _4800 = 4800,

        _9600 = 9600,

        _19200 = 19200,

        _38400 = 38400,

        _57600 = 57600,

        _115200 = 115200,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SerialParity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"odd")]
        Odd = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"even")]
        Even = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SerialFlowControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RTS/CTS")]
        RTS_CTS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Xon/Xoff")]
        Xon_Xoff = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum SerialFramingType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Eclipse/4000")]
        Eclipse_4000 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Matrix Plus")]
        Matrix_Plus = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events5
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events5Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events5Value Value { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Connections { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events6
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events6Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events6Value Value { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Connections { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Vox2State
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fixed")]
        Fixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"adaptive")]
        Adaptive = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events7
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events7Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events7Value Value { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Connections { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial2State
    {
        [System.Runtime.Serialization.EnumMember(Value = @"enabled")]
        Enabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial2BaudRate
    {
        _300 = 300,

        _600 = 600,

        _1200 = 1200,

        _2400 = 2400,

        _4800 = 4800,

        _9600 = 9600,

        _19200 = 19200,

        _38400 = 38400,

        _57600 = 57600,

        _115200 = 115200,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial2Parity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"odd")]
        Odd = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"even")]
        Even = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial2FlowControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RTS/CTS")]
        RTS_CTS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Xon/Xoff")]
        Xon_Xoff = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial2FramingType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Eclipse/4000")]
        Eclipse_4000 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Matrix Plus")]
        Matrix_Plus = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events8
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events8Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events8Value Value { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Connections { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events9
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events9Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events9Value Value { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Connections { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings8DisplayBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"low")]
        Low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings8KeyBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"highLow")]
        HighLow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"highOff")]
        HighOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lowOff")]
        LowOff = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"offOff")]
        OffOff = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings8ScreensaverMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blank")]
        Blank = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"connectionName")]
        ConnectionName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"roleName")]
        RoleName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"hostName")]
        HostName = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings8AllTalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"visible")]
        Visible = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings8RmkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"visible")]
        Visible = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets8
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections12> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections12>();

        [Newtonsoft.Json.JsonProperty("talkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets8TalkBtnMode TalkBtnMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings8SidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings8HeadphoneLimit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-6")]
        _Minus6 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings8HeadsetMicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"electret")]
        Electret = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_0")]
        Dynamic_0 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_10")]
        Dynamic_10 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings8MicHeadroom
    {
        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PgmAssignments3
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[1-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpios3
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Gpios3Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("hwIndex", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 4)]
        public int HwIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events12> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events12>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections6
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets2TalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"latching")]
        Latching = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-latching")]
        NonLatching = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum GpiosType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"opto")]
        Opto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"relay")]
        Relay = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events10
    {
        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Connections13> Connections { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events10Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections7
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets3TalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"latching")]
        Latching = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-latching")]
        NonLatching = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Gpios2Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"opto")]
        Opto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"relay")]
        Relay = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events11
    {
        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Connections14> Connections { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events11Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections8
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets4TalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"latching")]
        Latching = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-latching")]
        NonLatching = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections9
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets5TalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"latching")]
        Latching = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-latching")]
        NonLatching = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets5UsbFlasherMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blinking")]
        Blinking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"solid")]
        Solid = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections10
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/(connections/[0-9]+|roles/[0-9]+|devices/[0-9]+/interfaces/[0-9]+/ports/[0-9]+|special/(.*?))$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets6ActivationState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"listen")]
        Listen = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"talklisten")]
        Talklisten = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"dualtalklisten")]
        Dualtalklisten = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"forcelisten")]
        Forcelisten = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"talkforcelisten")]
        Talkforcelisten = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"forcetalkforcelisten")]
        Forcetalkforcelisten = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets6TalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"latching")]
        Latching = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-latching")]
        NonLatching = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keys
    {
        [Newtonsoft.Json.JsonProperty("keyIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeyIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public KeysType Type { get; set; }

        [Newtonsoft.Json.JsonProperty("isLatchable", Required = Newtonsoft.Json.Required.Always)]
        public bool IsLatchable { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections11
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings9DisplayBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"low")]
        Low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings9KeyBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"highLow")]
        HighLow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"highOff")]
        HighOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lowOff")]
        LowOff = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"offOff")]
        OffOff = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings9ScreensaverMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blank")]
        Blank = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"connectionName")]
        ConnectionName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"roleName")]
        RoleName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"hostName")]
        HostName = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings9AllTalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"visible")]
        Visible = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings9RmkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"visible")]
        Visible = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets9
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections15> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections15>();

        [Newtonsoft.Json.JsonProperty("talkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets9TalkBtnMode TalkBtnMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings9SidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings9HeadphoneLimit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-6")]
        _Minus6 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings9HeadsetMicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"electret")]
        Electret = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_0")]
        Dynamic_0 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_10")]
        Dynamic_10 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings9MicHeadroom
    {
        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PgmAssignments4
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[1-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpios4
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Gpios4Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("hwIndex", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 4)]
        public int HwIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events13> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events13>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings10DisplayBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"low")]
        Low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings10KeyBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"highLow")]
        HighLow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"highOff")]
        HighOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lowOff")]
        LowOff = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"offOff")]
        OffOff = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings10ScreensaverMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blank")]
        Blank = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"connectionName")]
        ConnectionName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"roleName")]
        RoleName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"hostName")]
        HostName = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings10AllTalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"visible")]
        Visible = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings10RmkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"visible")]
        Visible = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets10
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections16> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections16>();

        [Newtonsoft.Json.JsonProperty("talkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets10TalkBtnMode TalkBtnMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings10SidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings10HeadphoneLimit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-6")]
        _Minus6 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings10HeadsetMicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"electret")]
        Electret = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_0")]
        Dynamic_0 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_10")]
        Dynamic_10 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings10MicHeadroom
    {
        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PgmAssignments5
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[1-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class SaConnectionAssignments2
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings10LoudspeakerDimLevel
    {
        _0 = 0,

        __3 = -3,

        __6 = -6,

        __12 = -12,

        __24 = -24,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpios5
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Gpios5Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("hwIndex", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 4)]
        public int HwIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events14> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events14>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings11DisplayBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"low")]
        Low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings11KeyBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"highLow")]
        HighLow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"highOff")]
        HighOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lowOff")]
        LowOff = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"offOff")]
        OffOff = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings11ScreensaverMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blank")]
        Blank = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"connectionName")]
        ConnectionName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"roleName")]
        RoleName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"hostName")]
        HostName = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets11
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections17> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections17>();

        [Newtonsoft.Json.JsonProperty("talkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets11TalkBtnMode TalkBtnMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings11SidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings11HeadphoneLimit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-6")]
        _Minus6 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings11HeadsetMicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"electret")]
        Electret = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_0")]
        Dynamic_0 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_10")]
        Dynamic_10 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings11MicHeadroom
    {
        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings12DisplayBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"low")]
        Low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings12KeyBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"highLow")]
        HighLow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"highOff")]
        HighOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lowOff")]
        LowOff = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"offOff")]
        OffOff = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings12ScreensaverMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blank")]
        Blank = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"connectionName")]
        ConnectionName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"roleName")]
        RoleName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"hostName")]
        HostName = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets12
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("stackedKeyEnabled", Required = Newtonsoft.Json.Required.Always)]
        public bool StackedKeyEnabled { get; set; }

        [Newtonsoft.Json.JsonProperty("stackedKeyLabel", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StackedKeyLabel { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections18> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections18>();

        [Newtonsoft.Json.JsonProperty("talkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets12TalkBtnMode TalkBtnMode { get; set; }

        [Newtonsoft.Json.JsonProperty("usbFlasherMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets12UsbFlasherMode UsbFlasherMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings12SidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings12HeadphoneLimit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-6")]
        _Minus6 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings12HeadsetMicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"electret")]
        Electret = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_0")]
        Dynamic_0 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_10")]
        Dynamic_10 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings12MicHeadroom
    {
        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets13
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections19> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections19>();

        [Newtonsoft.Json.JsonProperty("activationState", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets13ActivationState ActivationState { get; set; }

        [Newtonsoft.Json.JsonProperty("isCallKey", Required = Newtonsoft.Json.Required.Always)]
        public bool IsCallKey { get; set; }

        [Newtonsoft.Json.JsonProperty("isReplyKey", Required = Newtonsoft.Json.Required.Always)]
        public bool IsReplyKey { get; set; }

        [Newtonsoft.Json.JsonProperty("talkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets13TalkBtnMode TalkBtnMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Groups2
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings13SidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings13BatteryAlarmMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"vibrate+audio")]
        Vibrate_audio = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"vibrate")]
        Vibrate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"audio")]
        Audio = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings13CallAlertMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"vibrate+audio")]
        Vibrate_audio = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"vibrate")]
        Vibrate = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"audio")]
        Audio = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings13OutOfRangeAlarm
    {
        [System.Runtime.Serialization.EnumMember(Value = @"audio")]
        Audio = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings13DisplayBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"verylow")]
        Verylow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"low")]
        Low = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"veryhigh")]
        Veryhigh = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings13MenuLevel
    {
        [System.Runtime.Serialization.EnumMember(Value = @"advanced")]
        Advanced = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"basic")]
        Basic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings13MenuKeyMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"listenagain")]
        Listenagain = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"switchvolctrl")]
        Switchvolctrl = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings13HeadphoneLowLevelLimit
    {
        __6 = -6,

        __12 = -12,

        __21 = -21,

        __70 = -70,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings13MicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"dynamic")]
        Dynamic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"electrect")]
        Electrect = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"automatic")]
        Automatic = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets14
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("keys", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(4)]
        [System.ComponentModel.DataAnnotations.MaxLength(4)]
        public System.Collections.Generic.ICollection<Keys2> Keys { get; set; } = new System.Collections.ObjectModel.Collection<Keys2>();

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections20> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections20>();

        [Newtonsoft.Json.JsonProperty("isAutoListen", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAutoListen { get; set; }

        [Newtonsoft.Json.JsonProperty("maxVolume", Required = Newtonsoft.Json.Required.Always)]
        public int MaxVolume { get; set; }

        [Newtonsoft.Json.JsonProperty("minVolume", Required = Newtonsoft.Json.Required.Always)]
        public int MinVolume { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Interfaces
    {
        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }

        [Newtonsoft.Json.JsonProperty("displayMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public InterfacesDisplayMode DisplayMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ConnectionsView
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connections")]
        Connections = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Options
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Default { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum EventsType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum EventsValue
    {
        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ExternalDevicesType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum UsersType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LQ-AIC")]
        LQAIC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Interfaces2
    {
        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }

        [Newtonsoft.Json.JsonProperty("displayMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Interfaces2DisplayMode DisplayMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Connections2View
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connections")]
        Connections = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Options2
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Default { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events2Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events2Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ExternalDevices2Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Users2Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LQ-AIC")]
        LQAIC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Vox3Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"adaptive")]
        Adaptive = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fixed")]
        Fixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Vox3Label
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Adaptive Threshold")]
        Adaptive_Threshold = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Fixed Threshold")]
        Fixed_Threshold = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Vox4Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"adaptive")]
        Adaptive = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fixed")]
        Fixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Vox4Label
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Adaptive Threshold")]
        Adaptive_Threshold = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Fixed Threshold")]
        Fixed_Threshold = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Connections3Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"partyline")]
        Partyline = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"direct")]
        Direct = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ExternalSystemsType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Users3Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LQ-AIC")]
        LQAIC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Roles3Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LQ-AIC")]
        LQAIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HMS-4X")]
        HMS4X = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HBP-2X")]
        HBP2X = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"HRM-4X")]
        HRM4X = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HKB-2X")]
        HKB2X = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"FSII-BP")]
        FSIIBP = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NetworkOptimizationType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LAN")]
        LAN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WAN")]
        WAN = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Device_settingsDisplayBrightness
    {
        _20 = 20,

        _85 = 85,

        _170 = 170,

        _255 = 255,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Network5
    {
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Network5Mode? Mode { get; set; }

        [Newtonsoft.Json.JsonProperty("staticIP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StaticIP { get; set; }

        [Newtonsoft.Json.JsonProperty("netmask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Netmask { get; set; }

        [Newtonsoft.Json.JsonProperty("gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gateway { get; set; }

        [Newtonsoft.Json.JsonProperty("dns1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dns1 { get; set; }

        [Newtonsoft.Json.JsonProperty("dns2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dns2 { get; set; }

        [Newtonsoft.Json.JsonProperty("extip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extip { get; set; }

        [Newtonsoft.Json.JsonProperty("extport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int? Extport { get; set; }

        [Newtonsoft.Json.JsonProperty("mgmtPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int? MgmtPort { get; set; }

        [Newtonsoft.Json.JsonProperty("tunnelPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int? TunnelPort { get; set; }

        /// <summary>The device's network interface MAC address.</summary>
        [Newtonsoft.Json.JsonProperty("mac", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mac { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Device_settingsAaBatteryType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Alkaline")]
        Alkaline = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Device_settingsRoleSorting
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Alphabetical")]
        Alphabetical = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RoleNumber")]
        RoleNumber = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LicensedFeaturesName
    {
        [System.Runtime.Serialization.EnumMember(Value = @"24Channels")]
        _24Channels = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"25Beltpacks")]
        _25Beltpacks = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP8-LQ")]
        SIP8LQ = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC-LQ")]
        AGENTICLQ = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC8-LQ")]
        AGENTIC8LQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP8-LQ-DEMO")]
        SIP8LQDEMO = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC-LQ-DEMO")]
        AGENTICLQDEMO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC8-LQ-DEMO")]
        AGENTIC8LQDEMO = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Device_settings2DisplayBrightness
    {
        _20 = 20,

        _85 = 85,

        _170 = 170,

        _255 = 255,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Network6
    {
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Network6Mode? Mode { get; set; }

        [Newtonsoft.Json.JsonProperty("staticIP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StaticIP { get; set; }

        [Newtonsoft.Json.JsonProperty("netmask", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Netmask { get; set; }

        [Newtonsoft.Json.JsonProperty("gateway", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gateway { get; set; }

        [Newtonsoft.Json.JsonProperty("dns1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dns1 { get; set; }

        [Newtonsoft.Json.JsonProperty("dns2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Dns2 { get; set; }

        [Newtonsoft.Json.JsonProperty("extip", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Extip { get; set; }

        [Newtonsoft.Json.JsonProperty("extport", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int? Extport { get; set; }

        [Newtonsoft.Json.JsonProperty("mgmtPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int? MgmtPort { get; set; }

        [Newtonsoft.Json.JsonProperty("tunnelPort", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, 65535)]
        public int? TunnelPort { get; set; }

        /// <summary>The device's network interface MAC address.</summary>
        [Newtonsoft.Json.JsonProperty("mac", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mac { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Device_settings2AaBatteryType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Alkaline")]
        Alkaline = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Device_settings2RoleSorting
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Alphabetical")]
        Alphabetical = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RoleNumber")]
        RoleNumber = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LicensedFeatures2Name
    {
        [System.Runtime.Serialization.EnumMember(Value = @"24Channels")]
        _24Channels = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"25Beltpacks")]
        _25Beltpacks = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP8-LQ")]
        SIP8LQ = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC-LQ")]
        AGENTICLQ = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC8-LQ")]
        AGENTIC8LQ = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP8-LQ-DEMO")]
        SIP8LQDEMO = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC-LQ-DEMO")]
        AGENTICLQDEMO = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC8-LQ-DEMO")]
        AGENTIC8LQDEMO = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Interfaces3
    {
        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }

        [Newtonsoft.Json.JsonProperty("displayMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Interfaces3DisplayMode DisplayMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Connections4View
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connections")]
        Connections = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Options3
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Default { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events3Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events3Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ExternalDevices3Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Users4Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"LQ-AIC")]
        LQAIC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum EndpointsState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OffLine")]
        OffLine = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Initializing")]
        Initializing = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Connecting")]
        Connecting = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Online")]
        Online = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Invisible")]
        Invisible = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Away")]
        Away = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"BeRightBack")]
        BeRightBack = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"NotAvailable")]
        NotAvailable = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"DoNotDisturb")]
        DoNotDisturb = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"OnAir")]
        OnAir = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
        Undefined = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum DependenciesDeviceType_name
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HLI-2W2")]
        HLI2W2 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"HLI-4W2")]
        HLI4W2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"HMS-4X")]
        HMS4X = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Features3Name
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIP8-LQ")]
        SIP8LQ = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC-LQ")]
        AGENTICLQ = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC8-LQ")]
        AGENTIC8LQ = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP8-LQ-DEMO")]
        SIP8LQDEMO = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC-LQ-DEMO")]
        AGENTICLQDEMO = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"AGENT-IC8-LQ-DEMO")]
        AGENTIC8LQDEMO = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatusStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"online")]
        Online = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"offline")]
        Offline = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings31
    {
        [Newtonsoft.Json.JsonProperty("syncOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SyncOffset { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatusFrequencyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"1.9")]
        _1_9 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"2.4")]
        _2_4 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatusSyncState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"good")]
        Good = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatusBatteryType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Li-Ion")]
        LiIon = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Alkaline")]
        Alkaline = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Longevity
    {
        [Newtonsoft.Json.JsonProperty("hours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hours { get; set; }

        [Newtonsoft.Json.JsonProperty("minutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minutes { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus2Status
    {
        [System.Runtime.Serialization.EnumMember(Value = @"online")]
        Online = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"offline")]
        Offline = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings32
    {
        [Newtonsoft.Json.JsonProperty("syncOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SyncOffset { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus2FrequencyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"1.9")]
        _1_9 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"2.4")]
        _2_4 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus2SyncState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"good")]
        Good = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus2BatteryType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Li-Ion")]
        LiIon = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Alkaline")]
        Alkaline = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Longevity2
    {
        [Newtonsoft.Json.JsonProperty("hours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hours { get; set; }

        [Newtonsoft.Json.JsonProperty("minutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minutes { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus3Status
    {
        [System.Runtime.Serialization.EnumMember(Value = @"online")]
        Online = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"offline")]
        Offline = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings33
    {
        [Newtonsoft.Json.JsonProperty("syncOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SyncOffset { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus3FrequencyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"1.9")]
        _1_9 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"2.4")]
        _2_4 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus3SyncState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"good")]
        Good = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus3BatteryType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Li-Ion")]
        LiIon = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Alkaline")]
        Alkaline = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Longevity3
    {
        [Newtonsoft.Json.JsonProperty("hours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hours { get; set; }

        [Newtonsoft.Json.JsonProperty("minutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minutes { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus4Status
    {
        [System.Runtime.Serialization.EnumMember(Value = @"online")]
        Online = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"offline")]
        Offline = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings34
    {
        [Newtonsoft.Json.JsonProperty("syncOffset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SyncOffset { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus4FrequencyType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"1.9")]
        _1_9 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"2.4")]
        _2_4 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus4SyncState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"good")]
        Good = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus4BatteryType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Li-Ion")]
        LiIon = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Alkaline")]
        Alkaline = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Longevity4
    {
        [Newtonsoft.Json.JsonProperty("hours", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Hours { get; set; }

        [Newtonsoft.Json.JsonProperty("minutes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minutes { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Type9
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus14
    {
        /// <summary>The external connection live status</summary>
        [Newtonsoft.Json.JsonProperty("externalConnectionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalConnectionStatus { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings35
    {
        /// <summary>Login for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }

        /// <summary>Password for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>Assigned device id in the link-group.</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings18Protocol
    {
        [System.Runtime.Serialization.EnumMember(Value = @"udp")]
        Udp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"tcp")]
        Tcp = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"tls")]
        Tls = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Type10
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus15
    {
        /// <summary>The SIP registration status code.</summary>
        [Newtonsoft.Json.JsonProperty("sipRegistrationStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SipRegistrationStatusCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings36
    {
        /// <summary>Login for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }

        /// <summary>Password for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>Assigned device id in the link-group.</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum PortsType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings37
    {
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings20Protocol
    {
        [System.Runtime.Serialization.EnumMember(Value = @"udp")]
        Udp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"tcp")]
        Tcp = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"tls")]
        Tls = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Ports2Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings38
    {
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Type11
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus16
    {
        /// <summary>The external connection live status</summary>
        [Newtonsoft.Json.JsonProperty("externalConnectionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalConnectionStatus { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings39
    {
        /// <summary>Login for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }

        /// <summary>Password for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>Assigned device id in the link-group.</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings22Protocol
    {
        [System.Runtime.Serialization.EnumMember(Value = @"udp")]
        Udp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"tcp")]
        Tcp = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"tls")]
        Tls = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Type12
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus17
    {
        /// <summary>The SIP registration status code.</summary>
        [Newtonsoft.Json.JsonProperty("sipRegistrationStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SipRegistrationStatusCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings40
    {
        /// <summary>Login for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }

        /// <summary>Password for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>Assigned device id in the link-group.</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Type13
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus18
    {
        /// <summary>The external connection live status</summary>
        [Newtonsoft.Json.JsonProperty("externalConnectionStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExternalConnectionStatus { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings41
    {
        /// <summary>Login for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }

        /// <summary>Password for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>Assigned device id in the link-group.</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings24Protocol
    {
        [System.Runtime.Serialization.EnumMember(Value = @"udp")]
        Udp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"tcp")]
        Tcp = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"tls")]
        Tls = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Type14
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class LiveStatus19
    {
        /// <summary>The SIP registration status code.</summary>
        [Newtonsoft.Json.JsonProperty("sipRegistrationStatusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SipRegistrationStatusCode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings42
    {
        /// <summary>Login for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("login", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Login { get; set; }

        /// <summary>Password for the IVC port</summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; }

        /// <summary>Assigned device id in the link-group.</summary>
        [Newtonsoft.Json.JsonProperty("assignedDeviceId", Required = Newtonsoft.Json.Required.AllowNull)]
        public int? AssignedDeviceId { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NewPortType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"IVC")]
        IVC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SIP")]
        SIP = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Settings43
    {

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum AudioInterface_settingsMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ClearCom")]
        ClearCom = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RTS")]
        RTS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum AudioInterface_settings2Mode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ClearCom")]
        ClearCom = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RTS")]
        RTS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum AudioInterface_settings3Mode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ClearCom")]
        ClearCom = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RTS")]
        RTS = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Vox5Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"adaptive")]
        Adaptive = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fixed")]
        Fixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Vox5Label
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Adaptive Threshold")]
        Adaptive_Threshold = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Fixed Threshold")]
        Fixed_Threshold = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox6
    {
        /// <summary>Enable/disable VOX and select the mode.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Vox6State State { get; set; }

        /// <summary>Threshold in dB used in fixed VOX mode. Note that if the interface isn't 2W, the dB value is actually offset by +18dB.</summary>
        [Newtonsoft.Json.JsonProperty("threshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-60, -18)]
        public int? Threshold { get; set; }

        /// <summary>Delay in milliseconds to transition to silent state when silence is detected.</summary>
        [Newtonsoft.Json.JsonProperty("delay", Required = Newtonsoft.Json.Required.Always)]
        public Vox6Delay Delay { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events15> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events15>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NetworkQuality3
    {
        /// <summary>Network quality type identifier.
        /// * 0 -&gt; Very Low
        /// * 1 -&gt; Low
        /// * 2 -&gt; Balanced
        /// * 3 -&gt; High
        /// * 4 -&gt; Very High
        /// * 5 -&gt; Custom</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 5)]
        public int? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkQuality3Bitrate? Bitrate { get; set; }

        /// <summary>Packet duration in milliseconds.</summary>
        [Newtonsoft.Json.JsonProperty("packetSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkQuality3PacketSize? PacketSize { get; set; }

        /// <summary>Jitter buffer range values.</summary>
        [Newtonsoft.Json.JsonProperty("jitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]+-[0-9]+$")]
        public string Jitter { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Port_settingsPinout
    {
        [System.Runtime.Serialization.EnumMember(Value = @"panel")]
        Panel = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"matrix")]
        Matrix = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Serial3
    {
        /// <summary>The serial data connection state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial3State? State { get; set; }

        /// <summary>Baud rate used on 4W direct data ports.</summary>
        [Newtonsoft.Json.JsonProperty("baudRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial3BaudRate? BaudRate { get; set; }

        /// <summary>Data bits used on 4W direct data ports.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial3Data? Data { get; set; }

        /// <summary>set to 0 for FSII, use string for HN</summary>
        [Newtonsoft.Json.JsonProperty("parity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial3Parity? Parity { get; set; }

        /// <summary>Stop bits used on 4W direct data ports.</summary>
        [Newtonsoft.Json.JsonProperty("stop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial3Stop? Stop { get; set; }

        /// <summary>Stop bits used on 4W direct data ports.</summary>
        [Newtonsoft.Json.JsonProperty("flowControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial3FlowControl? FlowControl { get; set; }

        /// <summary>The framing type used around packets.</summary>
        [Newtonsoft.Json.JsonProperty("framingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial3FramingType? FramingType { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Port_settingsExternalNetworkQuality
    {
        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"wan")]
        Wan = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lan")]
        Lan = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"internet")]
        Internet = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpis3
    {
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events16> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events16>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpos3
    {
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events17> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events17>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Port_settingsMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"clearcom")]
        Clearcom = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"rtsPin2")]
        RtsPin2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"rtsPin3")]
        RtsPin3 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox7
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public bool Status { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox8
    {
        /// <summary>Enable/disable VOX and select the mode.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Vox8State State { get; set; }

        /// <summary>Threshold in dB used in fixed VOX mode. Note that if the interface isn't 2W, the dB value is actually offset by +18dB.</summary>
        [Newtonsoft.Json.JsonProperty("threshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-60, -18)]
        public int? Threshold { get; set; }

        /// <summary>Delay in milliseconds to transition to silent state when silence is detected.</summary>
        [Newtonsoft.Json.JsonProperty("delay", Required = Newtonsoft.Json.Required.Always)]
        public Vox8Delay Delay { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events18> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events18>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NetworkQuality4
    {
        /// <summary>Network quality type identifier.
        /// * 0 -&gt; Very Low
        /// * 1 -&gt; Low
        /// * 2 -&gt; Balanced
        /// * 3 -&gt; High
        /// * 4 -&gt; Very High
        /// * 5 -&gt; Custom</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 5)]
        public int? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkQuality4Bitrate? Bitrate { get; set; }

        /// <summary>Packet duration in milliseconds.</summary>
        [Newtonsoft.Json.JsonProperty("packetSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkQuality4PacketSize? PacketSize { get; set; }

        /// <summary>Jitter buffer range values.</summary>
        [Newtonsoft.Json.JsonProperty("jitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]+-[0-9]+$")]
        public string Jitter { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Port_settings2Pinout
    {
        [System.Runtime.Serialization.EnumMember(Value = @"panel")]
        Panel = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"matrix")]
        Matrix = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Serial4
    {
        /// <summary>The serial data connection state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial4State? State { get; set; }

        /// <summary>Baud rate used on 4W direct data ports.</summary>
        [Newtonsoft.Json.JsonProperty("baudRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial4BaudRate? BaudRate { get; set; }

        /// <summary>Data bits used on 4W direct data ports.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial4Data? Data { get; set; }

        /// <summary>set to 0 for FSII, use string for HN</summary>
        [Newtonsoft.Json.JsonProperty("parity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial4Parity? Parity { get; set; }

        /// <summary>Stop bits used on 4W direct data ports.</summary>
        [Newtonsoft.Json.JsonProperty("stop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial4Stop? Stop { get; set; }

        /// <summary>Stop bits used on 4W direct data ports.</summary>
        [Newtonsoft.Json.JsonProperty("flowControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial4FlowControl? FlowControl { get; set; }

        /// <summary>The framing type used around packets.</summary>
        [Newtonsoft.Json.JsonProperty("framingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial4FramingType? FramingType { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Port_settings2ExternalNetworkQuality
    {
        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"wan")]
        Wan = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lan")]
        Lan = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"internet")]
        Internet = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpis4
    {
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events19> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events19>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpos4
    {
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events20> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events20>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Port_settings2Mode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"clearcom")]
        Clearcom = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"rtsPin2")]
        RtsPin2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"rtsPin3")]
        RtsPin3 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox9
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public bool Status { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox10
    {
        /// <summary>Enable/disable VOX and select the mode.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Vox10State State { get; set; }

        /// <summary>Threshold in dB used in fixed VOX mode. Note that if the interface isn't 2W, the dB value is actually offset by +18dB.</summary>
        [Newtonsoft.Json.JsonProperty("threshold", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(-60, -18)]
        public int? Threshold { get; set; }

        /// <summary>Delay in milliseconds to transition to silent state when silence is detected.</summary>
        [Newtonsoft.Json.JsonProperty("delay", Required = Newtonsoft.Json.Required.Always)]
        public Vox10Delay Delay { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events21> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events21>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class NetworkQuality5
    {
        /// <summary>Network quality type identifier.
        /// * 0 -&gt; Very Low
        /// * 1 -&gt; Low
        /// * 2 -&gt; Balanced
        /// * 3 -&gt; High
        /// * 4 -&gt; Very High
        /// * 5 -&gt; Custom</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 5)]
        public int? Type { get; set; }

        [Newtonsoft.Json.JsonProperty("bitrate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkQuality5Bitrate? Bitrate { get; set; }

        /// <summary>Packet duration in milliseconds.</summary>
        [Newtonsoft.Json.JsonProperty("packetSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NetworkQuality5PacketSize? PacketSize { get; set; }

        /// <summary>Jitter buffer range values.</summary>
        [Newtonsoft.Json.JsonProperty("jitter", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]+-[0-9]+$")]
        public string Jitter { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Port_settings3Pinout
    {
        [System.Runtime.Serialization.EnumMember(Value = @"panel")]
        Panel = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"matrix")]
        Matrix = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Serial5
    {
        /// <summary>The serial data connection state.</summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial5State? State { get; set; }

        /// <summary>Baud rate used on 4W direct data ports.</summary>
        [Newtonsoft.Json.JsonProperty("baudRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial5BaudRate? BaudRate { get; set; }

        /// <summary>Data bits used on 4W direct data ports.</summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial5Data? Data { get; set; }

        /// <summary>set to 0 for FSII, use string for HN</summary>
        [Newtonsoft.Json.JsonProperty("parity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial5Parity? Parity { get; set; }

        /// <summary>Stop bits used on 4W direct data ports.</summary>
        [Newtonsoft.Json.JsonProperty("stop", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Serial5Stop? Stop { get; set; }

        /// <summary>Stop bits used on 4W direct data ports.</summary>
        [Newtonsoft.Json.JsonProperty("flowControl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial5FlowControl? FlowControl { get; set; }

        /// <summary>The framing type used around packets.</summary>
        [Newtonsoft.Json.JsonProperty("framingType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Serial5FramingType? FramingType { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Port_settings3ExternalNetworkQuality
    {
        [System.Runtime.Serialization.EnumMember(Value = @"default")]
        Default = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"wan")]
        Wan = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lan")]
        Lan = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"internet")]
        Internet = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpis5
    {
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events22> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events22>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpos5
    {
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events23> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events23>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Port_settings3Mode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"clearcom")]
        Clearcom = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"rtsPin2")]
        RtsPin2 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"rtsPin3")]
        RtsPin3 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox11
    {
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public bool Status { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox12
    {
        /// <summary>If audio is currently detected</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public bool Status { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus10Codec
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PCMU")]
        PCMU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PCMA")]
        PCMA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"G722")]
        G722 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox13
    {
        /// <summary>If audio is currently detected</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public bool Status { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus11Codec
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PCMU")]
        PCMU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PCMA")]
        PCMA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"G722")]
        G722 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox14
    {
        /// <summary>If audio is currently detected</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public bool Status { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus12Codec
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PCMU")]
        PCMU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PCMA")]
        PCMA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"G722")]
        G722 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Vox15
    {
        /// <summary>If audio is currently detected</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        public bool Status { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum LiveStatus13Codec
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PCMU")]
        PCMU = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PCMA")]
        PCMA = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"G722")]
        G722 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ParticipantsState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"waiting")]
        Waiting = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"connected")]
        Connected = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disconnecting")]
        Disconnecting = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ParticipantsJoinState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Listen")]
        Listen = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Talk")]
        Talk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Talk-Listen")]
        TalkListen = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum ParticipantsType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"hms")]
        Hms = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hrm")]
        Hrm = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hkb")]
        Hkb = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"hbp")]
        Hbp = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"2w")]
        _2w = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"4w")]
        _4w = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"pgm")]
        Pgm = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"sa")]
        Sa = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Participants2State
    {
        [System.Runtime.Serialization.EnumMember(Value = @"waiting")]
        Waiting = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"connected")]
        Connected = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disconnecting")]
        Disconnecting = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Participants2JoinState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Listen")]
        Listen = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Talk")]
        Talk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Talk-Listen")]
        TalkListen = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Participants2Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"hms")]
        Hms = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hrm")]
        Hrm = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hkb")]
        Hkb = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"hbp")]
        Hbp = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"2w")]
        _2w = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"4w")]
        _4w = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"pgm")]
        Pgm = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"sa")]
        Sa = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings27DisplayBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"low")]
        Low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings27KeyBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"highLow")]
        HighLow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"highOff")]
        HighOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lowOff")]
        LowOff = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"offOff")]
        OffOff = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings27ScreensaverMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blank")]
        Blank = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"connectionName")]
        ConnectionName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"roleName")]
        RoleName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"hostName")]
        HostName = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings27AllTalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"visible")]
        Visible = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings27RmkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"visible")]
        Visible = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets15
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections21> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections21>();

        [Newtonsoft.Json.JsonProperty("talkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets15TalkBtnMode TalkBtnMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings27SidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings27HeadphoneLimit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-6")]
        _Minus6 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings27HeadsetMicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"electret")]
        Electret = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_0")]
        Dynamic_0 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_10")]
        Dynamic_10 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings27MicHeadroom
    {
        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PgmAssignments6
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[1-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpios6
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Gpios6Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("hwIndex", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 4)]
        public int HwIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events24> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events24>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings28DisplayBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"low")]
        Low = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings28KeyBrightness
    {
        [System.Runtime.Serialization.EnumMember(Value = @"highLow")]
        HighLow = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"highOff")]
        HighOff = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"lowOff")]
        LowOff = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"offOff")]
        OffOff = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings28ScreensaverMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blank")]
        Blank = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"connectionName")]
        ConnectionName = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"roleName")]
        RoleName = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"hostName")]
        HostName = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings28AllTalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"visible")]
        Visible = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings28RmkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"visible")]
        Visible = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keysets16
    {
        [Newtonsoft.Json.JsonProperty("keysetIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeysetIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Connections22> Connections { get; set; } = new System.Collections.ObjectModel.Collection<Connections22>();

        [Newtonsoft.Json.JsonProperty("talkBtnMode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keysets16TalkBtnMode TalkBtnMode { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings28SidetoneControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"tracking")]
        Tracking = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-tracking")]
        NonTracking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings28HeadphoneLimit
    {
        [System.Runtime.Serialization.EnumMember(Value = @"off")]
        Off = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"6")]
        _6 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"-6")]
        _Minus6 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings28HeadsetMicType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"electret")]
        Electret = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_0")]
        Dynamic_0 = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"dynamic_10")]
        Dynamic_10 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Settings28MicHeadroom
    {
        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"high")]
        High = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PgmAssignments7
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[1-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Gpios7
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Gpios7Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("hwIndex", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, 4)]
        public int HwIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events25> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events25>();


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events4Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events4Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events5Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events5Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events6Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events6Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events7Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events7Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events8Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events8Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events9Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events9Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections12
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets8TalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"latching")]
        Latching = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-latching")]
        NonLatching = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Gpios3Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"opto")]
        Opto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"relay")]
        Relay = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events12
    {
        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Connections23> Connections { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events12Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections13
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events10Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"localKeyPress")]
        LocalKeyPress = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections14
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events11Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"localKeyPress")]
        LocalKeyPress = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum KeysType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Talk")]
        Talk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Listen")]
        Listen = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Call")]
        Call = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Event1")]
        Event1 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Event2")]
        Event2 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RMK")]
        RMK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections15
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets9TalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"latching")]
        Latching = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-latching")]
        NonLatching = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Gpios4Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"opto")]
        Opto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"relay")]
        Relay = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events13
    {
        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Connections24> Connections { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events13Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections16
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets10TalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"latching")]
        Latching = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-latching")]
        NonLatching = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Gpios5Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"opto")]
        Opto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"relay")]
        Relay = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events14
    {
        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Connections25> Connections { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events14Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections17
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets11TalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"latching")]
        Latching = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-latching")]
        NonLatching = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections18
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets12TalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"latching")]
        Latching = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-latching")]
        NonLatching = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets12UsbFlasherMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"blinking")]
        Blinking = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"solid")]
        Solid = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections19
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/(connections/[0-9]+|roles/[0-9]+|devices/[0-9]+/interfaces/[0-9]+/ports/[0-9]+|special/(.*?))$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets13ActivationState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"listen")]
        Listen = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"talklisten")]
        Talklisten = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"dualtalklisten")]
        Dualtalklisten = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"forcelisten")]
        Forcelisten = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"talkforcelisten")]
        Talkforcelisten = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"forcetalkforcelisten")]
        Forcetalkforcelisten = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets13TalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"latching")]
        Latching = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-latching")]
        NonLatching = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Keys2
    {
        [Newtonsoft.Json.JsonProperty("keyIndex", Required = Newtonsoft.Json.Required.Always)]
        public int KeyIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Keys2Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("isLatchable", Required = Newtonsoft.Json.Required.Always)]
        public bool IsLatchable { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections20
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum InterfacesDisplayMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"bySlot")]
        BySlot = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"supportedList")]
        SupportedList = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Interfaces2DisplayMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"bySlot")]
        BySlot = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"supportedList")]
        SupportedList = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Network5Mode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"dhcp")]
        Dhcp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"static")]
        Static = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Network6Mode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"dhcp")]
        Dhcp = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"static")]
        Static = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Interfaces3DisplayMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"bySlot")]
        BySlot = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"supportedList")]
        SupportedList = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Vox6State
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fixed")]
        Fixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"adaptive")]
        Adaptive = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Vox6Delay
    {
        _500 = 500,

        _1000 = 1000,

        _2000 = 2000,

        _3000 = 3000,

        _4000 = 4000,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events15
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events15Value Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NetworkQuality3Bitrate
    {
        _16 = 16,

        _32 = 32,

        _48 = 48,

        _64 = 64,

        _128 = 128,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NetworkQuality3PacketSize
    {
        _5 = 5,

        _10 = 10,

        _20 = 20,

        _40 = 40,

        _60 = 60,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial3State
    {
        [System.Runtime.Serialization.EnumMember(Value = @"enabled")]
        Enabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial3BaudRate
    {
        _9600 = 9600,

        _19200 = 19200,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial3Data
    {
        _8 = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial3Parity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"odd")]
        Odd = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"even")]
        Even = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial3Stop
    {
        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial3FlowControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial3FramingType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Eclipse/4000")]
        Eclipse_4000 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Matrix Plus")]
        Matrix_Plus = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events16
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events16Value Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events17
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events17Value Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Vox8State
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fixed")]
        Fixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"adaptive")]
        Adaptive = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Vox8Delay
    {
        _500 = 500,

        _1000 = 1000,

        _2000 = 2000,

        _3000 = 3000,

        _4000 = 4000,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events18
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events18Value Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NetworkQuality4Bitrate
    {
        _16 = 16,

        _32 = 32,

        _48 = 48,

        _64 = 64,

        _128 = 128,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NetworkQuality4PacketSize
    {
        _5 = 5,

        _10 = 10,

        _20 = 20,

        _40 = 40,

        _60 = 60,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial4State
    {
        [System.Runtime.Serialization.EnumMember(Value = @"enabled")]
        Enabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial4BaudRate
    {
        _9600 = 9600,

        _19200 = 19200,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial4Data
    {
        _8 = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial4Parity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"odd")]
        Odd = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"even")]
        Even = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial4Stop
    {
        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial4FlowControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial4FramingType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Eclipse/4000")]
        Eclipse_4000 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Matrix Plus")]
        Matrix_Plus = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events19
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events19Value Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events20
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events20Value Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Vox10State
    {
        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"fixed")]
        Fixed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"adaptive")]
        Adaptive = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Vox10Delay
    {
        _500 = 500,

        _1000 = 1000,

        _2000 = 2000,

        _3000 = 3000,

        _4000 = 4000,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events21
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events21Value Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NetworkQuality5Bitrate
    {
        _16 = 16,

        _32 = 32,

        _48 = 48,

        _64 = 64,

        _128 = 128,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum NetworkQuality5PacketSize
    {
        _5 = 5,

        _10 = 10,

        _20 = 20,

        _40 = 40,

        _60 = 60,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial5State
    {
        [System.Runtime.Serialization.EnumMember(Value = @"enabled")]
        Enabled = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial5BaudRate
    {
        _9600 = 9600,

        _19200 = 19200,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial5Data
    {
        _8 = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial5Parity
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"odd")]
        Odd = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"even")]
        Even = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"0")]
        _0 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial5Stop
    {
        _1 = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial5FlowControl
    {
        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Serial5FramingType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Eclipse/4000")]
        Eclipse_4000 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Matrix Plus")]
        Matrix_Plus = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events22
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events22Value Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events23
    {
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events23Value Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections21
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets15TalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"latching")]
        Latching = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-latching")]
        NonLatching = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Gpios6Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"opto")]
        Opto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"relay")]
        Relay = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events24
    {
        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Connections26> Connections { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events24Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections22
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keysets16TalkBtnMode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"latching")]
        Latching = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"non-latching")]
        NonLatching = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"disabled")]
        Disabled = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Gpios7Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"opto")]
        Opto = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"relay")]
        Relay = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Events25
    {
        [Newtonsoft.Json.JsonProperty("connections", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Connections27> Connections { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Events25Type Type { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections23
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events12Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"localKeyPress")]
        LocalKeyPress = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections24
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events13Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"localKeyPress")]
        LocalKeyPress = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections25
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events14Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"localKeyPress")]
        LocalKeyPress = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Keys2Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Talk")]
        Talk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Listen")]
        Listen = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Call")]
        Call = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Event1")]
        Event1 = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"Event2")]
        Event2 = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"RMK")]
        RMK = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"None")]
        None = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events15Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events16Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events17Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events18Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events19Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events20Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events21Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events22Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events23Value
    {
        [System.Runtime.Serialization.EnumMember(Value = @"control")]
        Control = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"talk")]
        Talk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"call")]
        Call = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections26
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events24Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"localKeyPress")]
        LocalKeyPress = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Connections27
    {
        [Newtonsoft.Json.JsonProperty("res", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^/api/1/connections/[0-9]+$")]
        public string Res { get; set; }


    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.1.11.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum Events25Type
    {
        [System.Runtime.Serialization.EnumMember(Value = @"localKeyPress")]
        LocalKeyPress = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"connection")]
        Connection = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this(data, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this(data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            if (Stream != null)
                Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108